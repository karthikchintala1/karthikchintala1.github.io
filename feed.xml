<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code Rethinked</title>
  
  <subtitle>Thoughts on ongoing things in the world of .NET</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://coderethinked.com/"/>
  <updated>2019-09-25T01:18:40.025Z</updated>
  <id>https://coderethinked.com/</id>
  
  <author>
    <name>Karthik Chintala</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Getting started with Vue CLI</title>
    <link href="https://coderethinked.com/getting-started-with-vue-cli/"/>
    <id>https://coderethinked.com/getting-started-with-vue-cli/</id>
    <published>2019-09-25T01:18:00.000Z</published>
    <updated>2019-09-25T01:18:40.025Z</updated>
    
    <content type="html"><![CDATA[<p>If you are already familiar with Vue CLI, you can just skip reading this post. </p><p>Vue JS is an open-source JavaScript framework for building user interfaces and SPA’s (single-page applications). </p><p>If you want to build a project in Vue, I’d recommend Vue CLI templates for those who are new to Vue.<br><a id="more"></a></p><blockquote><p><a href="https://cli.vuejs.org/" target="_blank" rel="noopener">Vue-cli</a> offers zero-config rapid prototyping with cli-service, scaffolding, run time dependency and a GUI to create and manage apps. </p></blockquote><p>The Vue CLI component system includes 3 things. </p><ul><li><a href="https://cli.vuejs.org/guide/#cli" target="_blank" rel="noopener">CLI</a></li><li><a href="https://cli.vuejs.org/guide/#cli-service" target="_blank" rel="noopener">CLI Service</a> and </li><li><a href="https://cli.vuejs.org/guide/#cli-plugins" target="_blank" rel="noopener">CLI plugins</a>. </li></ul><h3 id="Installing-Vue-CLI"><a href="#Installing-Vue-CLI" class="headerlink" title="Installing Vue CLI"></a>Installing Vue CLI</h3><p>Let’s install the Vue-CLI and create a new project with the CLI commands. </p><figure class="highlight cmd hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli </span><br><span class="line"># OR </span><br><span class="line">yarn global add @vue/cli </span><br></pre></td></tr></table></figure><h3 id="Creating-a-project-with-Vue-CLI"><a href="#Creating-a-project-with-Vue-CLI" class="headerlink" title="Creating a project with Vue CLI"></a>Creating a project with Vue CLI</h3><p>After installing the Vue CLI successfully, we can create a new project using the following command in a new directory </p><figure class="highlight cmd hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create &lt;foldername&gt; </span><br></pre></td></tr></table></figure><p>Or if you are interested in creating the project in an already created folder you can also do that with <code>vue create .</code> command. </p><p>After running the above command in a command prompt, cli will be asking us to choose the default preset or we can manually configure our project with the tooling we are interested in. </p><p>After selecting a preset either manually or selecting the default, you’ll be asked to select a linter config for the project. </p><img src="/getting-started-with-vue-cli/linter_config.png" title="coderethinked.com: image of command line options in vue cli"><p>We have 4 different options here. </p><ul><li>ESLint with error prevention only: minimal errors </li><li>ESLint + Airbnb config: ESLint with Airbnb standards </li><li>ESLint + Standard config: Standard config </li><li>ESLint + Prettier: Prettier is a code formatter with rules. </li></ul><p>I chose <code>ESLint + Standard</code> config. Once done, the rest of the options you can configure based on your need like lint on save, saving your current config to a preset, etc. </p><p>Once done with this you should have your project folder with Vue CLI generated folder structure. </p><p>If you are not a command-line person, then you can do it in the Vue UI. All you’ve to do is run the <code>Vue UI</code> from the command line and it launches an app in the browser so you can cherry-pick what configuration you want in the browser. </p><h3 id="Exploring-the-Vue-CLI-project"><a href="#Exploring-the-Vue-CLI-project" class="headerlink" title="Exploring the Vue CLI project"></a>Exploring the Vue CLI project</h3><p>Here’s the folder structure. </p><img src="/getting-started-with-vue-cli/vuecli_generated_folder_structure.png" title="coderethinked.com: folder structure in vue cli"><p>Let’s see what we have in the <code>package.json</code> file.<br><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"jumpstart"</span>,</span><br><span class="line">  <span class="hljs-attr">"version"</span>: <span class="hljs-string">"0.1.0"</span>,</span><br><span class="line">  <span class="hljs-attr">"private"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line">  <span class="hljs-attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"serve"</span>: <span class="hljs-string">"vue-cli-service serve"</span>,</span><br><span class="line">    <span class="hljs-attr">"build"</span>: <span class="hljs-string">"vue-cli-service build"</span>,</span><br><span class="line">    <span class="hljs-attr">"lint"</span>: <span class="hljs-string">"vue-cli-service lint"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="hljs-attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"core-js"</span>: <span class="hljs-string">"^2.6.5"</span>,</span><br><span class="line">    <span class="hljs-attr">"vue"</span>: <span class="hljs-string">"^2.6.10"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="hljs-attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"@vue/cli-plugin-babel"</span>: <span class="hljs-string">"^3.11.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"@vue/cli-plugin-eslint"</span>: <span class="hljs-string">"^3.11.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"@vue/cli-service"</span>: <span class="hljs-string">"^3.11.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"@vue/eslint-config-standard"</span>: <span class="hljs-string">"^4.0.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"babel-eslint"</span>: <span class="hljs-string">"^10.0.1"</span>,</span><br><span class="line">    <span class="hljs-attr">"eslint"</span>: <span class="hljs-string">"^5.16.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"eslint-plugin-vue"</span>: <span class="hljs-string">"^5.0.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"vue-template-compiler"</span>: <span class="hljs-string">"^2.6.10"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>Notice the script section here. We can perform 3 different commands and the <code>vue-cli-service</code> will act accordingly. </p><p>We can run the project in development mode using the following command. </p><figure class="highlight cmd hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run serve </span><br><span class="line"># OR </span><br><span class="line">yarn serve </span><br></pre></td></tr></table></figure><p>So, if we run the <code>npm run serve</code> command then the <code>vue-cli-service</code> will start the development server for us with Hot Module Reload(HMR) ability.<br>HMR is the ability to re-compile the code and re-run the dev server when any code changes. </p><p>The <code>npm run build</code> compiles and minifies for the production environment. </p><p>Apart from the command line, you can also build/serve the app from the UI as well with <code>vue ui</code>.</p><img src="/getting-started-with-vue-cli/vue_ui_to_start_project.png" title="coderethinked.com: vue ui for new project"><p>Vue UI provides some stats for our app like speed stats, size of our components, assets, etc. </p><img src="/getting-started-with-vue-cli/analytics_in_vue_ui.png" title="coderethinked.com: stats in vue ui page"><h3 id="Vue-folder-structure"><a href="#Vue-folder-structure" class="headerlink" title="Vue folder structure"></a>Vue folder structure</h3><p><code>src</code> is a folder that contains all our source code. Inside <code>src</code> folder we will have components and assets folders. You can delete these folders and organize your folders. </p><p>I think it is good to have these folders and if you have feature specific components, then you can create some folders under <code>components</code> folder.<br>Rest of the files in the project folder are configuration files. </p><h3 id="Vue-app-entry-point"><a href="#Vue-app-entry-point" class="headerlink" title="Vue app entry point"></a>Vue app entry point</h3><p><code>main.js</code> is the entry point for our app. We define the entry point in <code>vue.config.js</code> file. With the new CLI service, the <code>vue.config.js</code> is optional. So, we cannot see any config.js files in our project but you can have one. </p><p>In the <code>main.js</code>, we have the Vue instance for the App component. This will run the App component and App component renders the content it holds. </p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">new</span> Vue(&#123; </span><br><span class="line">  render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App) </span><br><span class="line">&#125;).$mount(‘#app’) </span><br></pre></td></tr></table></figure><h3 id="App-component"><a href="#App-component" class="headerlink" title="App component"></a>App component</h3><p>The App component is the plugging point for what we need on the home/landing page of our app. You can think of this as a layout for the entire app. </p><p>So, if you wish to have a layout like this</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">AppHeader</span>&gt;</span> </span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">AppHeader</span>&gt;</span> </span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">BodyContent</span>&gt;</span> </span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">LeftPanel</span>&gt;</span> </span><br><span class="line">      <span class="hljs-comment">&lt;!--Holds links to the right panel --&gt;</span> </span><br><span class="line">   <span class="hljs-tag">&lt;/<span class="hljs-name">LeftPanel</span>&gt;</span> </span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">RightPanel</span>&gt;</span> </span><br><span class="line">      <span class="hljs-comment">&lt;!-- Displays content --&gt;</span> </span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">RightPanel</span>&gt;</span> </span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">BodyContent</span>&gt;</span> </span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">AppFooter</span>&gt;</span> </span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">AppFooter</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>Then you need to register the above components(AppHeader, BodyContent, LeftPanel, RightPanel, AppFooter) in the App.Vue file. </p><p>If the RightPanel includes a carousel component, then you need not register it here it has to be registered in the RightPanel to render it. </p><p>There is no need to register every component you created into the App component.</p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      Creating vue project with vue cli tool and how to create a project in the new Vue UI as well. Also we&#39;ll see what are the files we got in our brand new project.
    
    </summary>
    
      <category term="vue" scheme="https://coderethinked.com/categories/vue/"/>
    
    
      <category term="vue" scheme="https://coderethinked.com/tags/vue/"/>
    
      <category term="vue-cli-service" scheme="https://coderethinked.com/tags/vue-cli-service/"/>
    
      <category term="vue-ui" scheme="https://coderethinked.com/tags/vue-ui/"/>
    
      <category term="getting-started" scheme="https://coderethinked.com/tags/getting-started/"/>
    
  </entry>
  
  <entry>
    <title>.ToSafeDictionary() extension method in csharp</title>
    <link href="https://coderethinked.com/tosafedictionary-extension-method-in-csharp/"/>
    <id>https://coderethinked.com/tosafedictionary-extension-method-in-csharp/</id>
    <published>2019-08-19T03:14:58.000Z</published>
    <updated>2019-08-19T01:55:56.660Z</updated>
    
    <content type="html"><![CDATA[<p>The <code>.ToDictionary()</code> extension will throw an argument exception if we have duplicate keys added to the dictionary.<br><a id="more"></a></p><p>Ex:<br><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="hljs-keyword">int</span>&gt; listOfItems= <span class="hljs-keyword">new</span> List&lt;<span class="hljs-keyword">int</span>&gt;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;</span><br><span class="line">Dictionary&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">string</span>&gt; dict = listOfItems.ToDictionary(a =&gt; a, a =&gt; <span class="hljs-string">"item "</span> + a);</span><br><span class="line">Console.WriteLine(dict.Count);</span><br></pre></td></tr></table></figure></p><p>The above code throws the following exception</p><blockquote><p>System.ArgumentException: An item with the same key has already been added.</p></blockquote><p>In this post, we’ll create an extension method which will ignore duplicate keys from being added to a dictionary.</p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p>So, though we add duplicates into the list of items and have it to transform to a dictionary, our extension method should ignore the duplicates and returns a dictionary without duplicates.</p><p>First, let’s see what is in the original <code>.ToDictionary()</code> extension method.</p><h3 id="Original-ToDictionary-extension-method-source-code"><a href="#Original-ToDictionary-extension-method-source-code" class="headerlink" title="Original ToDictionary extension method source code"></a>Original ToDictionary extension method source code</h3><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Dictionary&lt;TKey, TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(<span class="hljs-keyword">this</span> IEnumerable&lt;TSource&gt; source, Func&lt;TSource, TKey&gt; keySelector, Func&lt;TSource, TElement&gt; elementSelector, IEqualityComparer&lt;TKey&gt; comparer) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (source == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> Error.ArgumentNull(<span class="hljs-string">"source"</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span> (keySelector == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> Error.ArgumentNull(<span class="hljs-string">"keySelector"</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span> (elementSelector == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> Error.ArgumentNull(<span class="hljs-string">"elementSelector"</span>);</span><br><span class="line">            Dictionary&lt;TKey, TElement&gt; d = <span class="hljs-keyword">new</span> Dictionary&lt;TKey, TElement&gt;(comparer);</span><br><span class="line">            <span class="hljs-keyword">foreach</span> (TSource element <span class="hljs-keyword">in</span> source) d.Add(keySelector(element), elementSelector(element));</span><br><span class="line">            <span class="hljs-keyword">return</span> d;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><em><code>.ToDictionary()</code> extension method is just a foreach over the enumerables</em>. Each item in the list will be iterated and added to the dictionary. The accumulated dictionary is returned in the end.</p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="ToSafeDictionary-extension-method"><a href="#ToSafeDictionary-extension-method" class="headerlink" title="ToSafeDictionary extension method"></a>ToSafeDictionary extension method</h3><p>To implement <code>.ToSafeDictionary()</code> extension method, We’ll just extend the original <code>.ToDictionary()</code> method to have contains check before adding any item to the dictionary. No magic, just a conditional check to ignore the key.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Dictionary&lt;TKey, TElement&gt; ToSafeDictionary&lt;TSource, TKey, TElement&gt;(<span class="hljs-keyword">this</span> IEnumerable&lt;TSource&gt; source, Func&lt;TSource, TKey&gt; keySelector, Func&lt;TSource, TElement&gt; elementSelector, IEqualityComparer&lt;TKey&gt; comparer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (source == <span class="hljs-literal">null</span>)</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArgumentException(<span class="hljs-string">"source"</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (keySelector == <span class="hljs-literal">null</span>)</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArgumentException(<span class="hljs-string">"keySelector"</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (elementSelector == <span class="hljs-literal">null</span>)</span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArgumentException(<span class="hljs-string">"elementSelector"</span>);</span><br><span class="line">Dictionary&lt;TKey, TElement&gt; d = <span class="hljs-keyword">new</span> Dictionary&lt;TKey, TElement&gt;(comparer);</span><br><span class="line"><span class="hljs-keyword">foreach</span> (TSource element <span class="hljs-keyword">in</span> source)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (!d.ContainsKey(keySelector(element)))</span><br><span class="line">d.Add(keySelector(element), elementSelector(element));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that I’ve used the <code>ArgumentException</code> when the values for the parameters is null instead of using the original source code <code>Error.ArgumentNull</code> just to make sure we compile the code in C#.</p><p>Now if we run the same example code with <code>.ToSafeDictionary</code> on the list of items then we should not get any exceptions.</p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dictionary&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">string</span>&gt; dict = listOfItems.ToSafeDictionary(a =&gt; a, a =&gt; <span class="hljs-string">"item "</span> + a, <span class="hljs-literal">null</span>);</span><br><span class="line">Console.WriteLine(dict.Count);</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://github.com/microsoft/referencesource/blob/master/System.Core/System/Linq/Enumerable.cs" target="_blank" rel="noopener">Enumerable source code</a></li></ul>]]></content>
    
    <summary type="html">
    
      An extension method that will prevent against throwing argument exceptions if the duplicate keys were added to the dictionary. This is an extension to the original .ToDictionary() extension method.
    
    </summary>
    
      <category term="csharp" scheme="https://coderethinked.com/categories/csharp/"/>
    
    
      <category term="csharp" scheme="https://coderethinked.com/tags/csharp/"/>
    
      <category term="extension method" scheme="https://coderethinked.com/tags/extension-method/"/>
    
      <category term="dictionary" scheme="https://coderethinked.com/tags/dictionary/"/>
    
  </entry>
  
  <entry>
    <title>Delegates as callback functions in csharp</title>
    <link href="https://coderethinked.com/delegates-as-callback-functions-in-csharp/"/>
    <id>https://coderethinked.com/delegates-as-callback-functions-in-csharp/</id>
    <published>2019-06-20T05:51:21.000Z</published>
    <updated>2019-08-17T02:24:04.556Z</updated>
    
    <content type="html"><![CDATA[<p>To update many records in entity framework, it is good to use the <code>.Attach</code> method of the db context instead of looping through every record and fetching the data through EF and updating it.<br><a id="more"></a><br>So, I sat down and wrote the attaching part of the code to update the records.</p><p>But, the <code>.Attach</code> method isn’t efficient when you are not turning off the entity tracker on the data context.</p><p>So, before updating the records I’ve to turn off <code>AutoDetectChangesEnabled</code> property. Once completed, we will turn on <code>AutoDetectChangesEnabled</code>. </p><p>Here’s the code, anyway.</p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateTodos</span>(<span class="hljs-params">IDataContext context</span>) </span></span><br><span class="line"><span class="hljs-function"></span>&#123; </span><br><span class="line">    <span class="hljs-keyword">try</span> </span><br><span class="line">    &#123; </span><br><span class="line">        ((DbContext)context).Configuration.AutoDetectChangesEnabled = <span class="hljs-literal">false</span>; </span><br><span class="line">        <span class="hljs-keyword">var</span> items = context.TodoItems; </span><br><span class="line">        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> items) </span><br><span class="line">        &#123; </span><br><span class="line">            context.TodoItems.Attach(item); </span><br><span class="line">            item.TodoText = “updating with dummy content”; </span><br><span class="line">            item.ModifiedDate = DateTime.Now; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="hljs-keyword">finally</span> </span><br><span class="line">    &#123; </span><br><span class="line">        ((DbContext)context).ChangeTracker.DetectChanges(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateDetails</span>(<span class="hljs-params">IDataContext context</span>) </span></span><br><span class="line"><span class="hljs-function"></span>&#123; </span><br><span class="line">    <span class="hljs-keyword">try</span> </span><br><span class="line">    &#123; </span><br><span class="line">        ((DbContext)context).Configuration.AutoDetectChangesEnabled = <span class="hljs-literal">false</span>; </span><br><span class="line">        <span class="hljs-keyword">var</span> items = context.Details; </span><br><span class="line">        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> items) </span><br><span class="line">        &#123; </span><br><span class="line">            context.Details.Attach(item); </span><br><span class="line">            item.Notes = item.Notes + Convert.ToString(item.ID * <span class="hljs-number">10</span>); </span><br><span class="line">            item.ModifiedDate = DateTime.Now; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="hljs-keyword">finally</span> </span><br><span class="line">    &#123; </span><br><span class="line">        ((DbContext)context).ChangeTracker.DetectChanges(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>We see the calls to change tracking are being turned off and on in both the methods. </p><p>To make the code look less lines of code, we could move the toggle part of detect changes to separate methods for turning on and off but that still leaves with duplicated method calls.</p><p>What if we could wrap the change tracking thing to a method, which will also execute our method after detect we turn detect changes off and after executing our method it turns off change detection? </p><p>This is something like the <a href="https://developer.mozilla.org/en-US/docs/Glossary/Callback_function" target="_blank" rel="noopener">callback functions</a> in javascript. </p><p>So, in JavaScript here’s how we write callback functions for the above scenario.</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> config = &#123; <span class="hljs-comment">//assuming this as DataContext configuration </span></span><br><span class="line"> detectChanges: <span class="hljs-literal">true</span> </span><br><span class="line">&#125;; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SurroundWithDetectChanges</span> (<span class="hljs-params">callback</span>) </span>&#123; </span><br><span class="line"> <span class="hljs-keyword">try</span> &#123; </span><br><span class="line">  config.detectChanges = <span class="hljs-literal">false</span>; </span><br><span class="line">  callback();</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="hljs-keyword">catch</span> () &#123; &#125; </span><br><span class="line"> <span class="hljs-keyword">finally</span> &#123; </span><br><span class="line">  config.detectChanges = <span class="hljs-literal">true</span>; </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line">SurroundWithDetectChanges(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line">    <span class="hljs-comment">//code to update the table records goes here. </span></span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure><p>Similarly, we’ve to leverage the same thing in c# side with the callback functions. </p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="Delegates-as-callback-functions"><a href="#Delegates-as-callback-functions" class="headerlink" title="Delegates as callback functions"></a>Delegates as callback functions</h3><p>There are several advantages of delegates. One of them is their callback ability. </p><p>Let’s write an extension method which turns the <code>AutoDetectChangesEnabled</code> to off/on as needed and also takes a callback (similar to what we’ve done in JavaScript). </p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Ext</span> </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FastUpdate</span>(<span class="hljs-params">IDataContext context, Action&lt;IDataContext&gt; callBack</span>) </span></span><br><span class="line"><span class="hljs-function"></span>        &#123; </span><br><span class="line">            <span class="hljs-keyword">try</span> </span><br><span class="line">            &#123; </span><br><span class="line">                ((DbContext)context).Configuration.AutoDetectChangesEnabled = <span class="hljs-literal">false</span>; </span><br><span class="line">                callBack(context); </span><br><span class="line">            &#125; </span><br><span class="line">            <span class="hljs-keyword">finally</span> </span><br><span class="line">            &#123; </span><br><span class="line">                ((DbContext)context).Configuration.AutoDetectChangesEnabled = <span class="hljs-literal">true</span>; </span><br><span class="line">                ((DbContext)context).ChangeTracker.DetectChanges(); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>So, the above method turns OFF the detect changes mechanism and calls our callback method we’ll supply to this method. After completing the callback, then we’ll turn ON the detect changes in the <code>finally</code> block of the <code>FastUpdate</code> method. </p><p>Here’s how to call the above extension method.<br><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> Ext.FastUpdate(context, (ctx) =&gt; </span><br><span class="line">                &#123; </span><br><span class="line">                    <span class="hljs-keyword">var</span> items = ctx.TodoItems; </span><br><span class="line">                    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> items) </span><br><span class="line">                    &#123; </span><br><span class="line">                        ctx.TodoItems.Attach(item); </span><br><span class="line">                        item.TodoText = “with auto detect changes”; </span><br><span class="line">                    &#125; </span><br><span class="line">                &#125;); </span><br></pre></td></tr></table></figure><br>The second parameter to the <code>FastUpdate</code> method is our callback method. To make it clear, let me rewrite the above call to <code>FastUpdate</code> method. </p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//call the extension method with callback function </span></span><br><span class="line">Ext.FastUpdate(context, (ctx) =&gt; UpdateTodoItems(ctx)) </span><br><span class="line"><span class="hljs-comment">//callback function </span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateTodoItems</span>(<span class="hljs-params">IDataContext ctx</span>) </span></span><br><span class="line"><span class="hljs-function"></span>        &#123; </span><br><span class="line">            <span class="hljs-keyword">var</span> items = ctx.TodoItems; </span><br><span class="line">            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> items) </span><br><span class="line">            &#123; </span><br><span class="line">                ctx.TodoItems.Attach(item); </span><br><span class="line">                item.TodoText = “with auto detect changes”; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br></pre></td></tr></table></figure><p>This callback(<code>UpdateTodoItems</code>) method, invoked from the <code>FastUpdate</code> method return nothing. It just updates the items on the data context. This looks good but if we want to return something from the callback method, then we‘d have to go for <code>Func</code> delegate.</p><p>Action delegate is for void callbacks, Func delegate is for returning something to the caller.<br>Let’s write a callback function that returns the result. </p><h3 id="Func-delegates-to-return-values"><a href="#Func-delegates-to-return-values" class="headerlink" title="Func delegates to return values"></a>Func delegates to return values</h3><p>Let me take a simple example to return data from the method. Say, we’ve to compute the sum of even numbers.<br>Here’s our sum of even numbers method.<br><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">SumOfEvens</span>(<span class="hljs-params">IEnumerable&lt;<span class="hljs-keyword">int</span>&gt; listOfItems</span>) </span></span><br><span class="line"><span class="hljs-function"></span>        &#123; </span><br><span class="line">            <span class="hljs-keyword">return</span> listOfItems.Where(a =&gt; a % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>).Sum(); </span><br><span class="line">        &#125; </span><br></pre></td></tr></table></figure></p><p>This method takes a list of items as input and returns the even numbers sum. </p><p>Here’s the delegate to call the above method.<br><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">Func&lt;IEnumerable&lt;<span class="hljs-keyword">int</span>&gt;, <span class="hljs-keyword">int</span>&gt; sum = <span class="hljs-keyword">new</span> Func&lt;IEnumerable&lt;<span class="hljs-keyword">int</span>&gt;, <span class="hljs-keyword">int</span>&gt;(SumOfEvens); </span><br></pre></td></tr></table></figure></p><p>The <code>sum</code> variable above is our delegate to which we must supply the list of items to get the sum of evens in the list of values. </p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> listItems = Enumerable.Range(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>); </span><br><span class="line">Console.WriteLine(sum(listItems)); </span><br></pre></td></tr></table></figure><p>That should print us the result.</p><p>If we were to log the information before calculating the sum of even number we must tweak the delegate assignment here. </p><p>Here’s the <code>Func</code> delegate declaration with logging information before and after executing the <code>SumOfEvens</code> method. </p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> Func&lt;IEnumerable&lt;<span class="hljs-keyword">int</span>&gt;, <span class="hljs-keyword">int</span>&gt; sum = <span class="hljs-keyword">new</span> Func&lt;IEnumerable&lt;<span class="hljs-keyword">int</span>&gt;, <span class="hljs-keyword">int</span>&gt;(a =&gt; </span><br><span class="line">            &#123; </span><br><span class="line">                Log(<span class="hljs-string">$"-- About to calculate the even sum for <span class="hljs-subst">&#123;a.Count()&#125;</span> items ---“); </span></span><br><span class="line"><span class="hljs-string">                var result = SumOfEvens(a); </span></span><br><span class="line"><span class="hljs-string">                Log($”-- sum of the even numbers is: <span class="hljs-subst">&#123;result&#125;</span> ---“); </span></span><br><span class="line"><span class="hljs-string">                return result; </span></span><br><span class="line"><span class="hljs-string">            &#125;); </span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">public void Log(string message) </span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">&#123; </span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">        Console.WriteLine(message); </span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">&#125;</span></span></span><br></pre></td></tr></table></figure><p>In the above code, we’ll log the number of items to print before calculating the sum. Once we get the sum, we’ll print the sum using <code>Log</code> extension method. And at the end, we’ll just return the result.</p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
    
    <summary type="html">
    
      Delegates as callback functions. In this post, we&#39;ll see how we can make use of the callback mechanism of the Action and Func delegates in c#. We&#39;ll leverage the callback mechanism through delegates.
    
    </summary>
    
      <category term="csharp" scheme="https://coderethinked.com/categories/csharp/"/>
    
      <category term="delegates" scheme="https://coderethinked.com/categories/csharp/delegates/"/>
    
    
      <category term="csharp" scheme="https://coderethinked.com/tags/csharp/"/>
    
      <category term="func" scheme="https://coderethinked.com/tags/func/"/>
    
      <category term="action" scheme="https://coderethinked.com/tags/action/"/>
    
      <category term="refactoring" scheme="https://coderethinked.com/tags/refactoring/"/>
    
      <category term="callback functions" scheme="https://coderethinked.com/tags/callback-functions/"/>
    
      <category term="AutoDetectChangesEnabled" scheme="https://coderethinked.com/tags/autodetectchangesenabled/"/>
    
  </entry>
  
  <entry>
    <title>Data binding in blazor</title>
    <link href="https://coderethinked.com/data-binding-in-blazor/"/>
    <id>https://coderethinked.com/data-binding-in-blazor/</id>
    <published>2019-05-13T04:35:25.000Z</published>
    <updated>2019-08-17T02:24:04.510Z</updated>
    
    <content type="html"><![CDATA[<p>Blazor has 3 different ways of binding data on the client-side.</p><p>Here are the different data binding mechanisms in the client-side blazor framework.</p><ul><li>One-way data binding</li><li>Two-way data binding</li><li>Component parameters<a id="more"></a></li></ul><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="One-way-data-binding"><a href="#One-way-data-binding" class="headerlink" title="One-way data binding"></a>One-way data binding</h3><p>This is the common data binding we’ll see in many of the client-side frameworks. </p><p>one-way data binding means binding the data from the model to view. </p><p>Unlike many client-side frameworks, we need no <code>bind-</code> properties here to get the data in the field and bind to HTML.</p><p>You can use the <code>bind</code> attribute on any element to bind the value.</p><p>In blazor, we’ll have a property assigned some value in the <code>functions</code> and use the property in the HTML template. </p><p>Let’s get this done.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>One-way data binding<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line">color is : <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>@color<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">@functions&#123;</span><br><span class="line">    private string color = "red";</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>So, when we run the app, the label tag will display “red” as a text in the label.</p><p>Notice how the <code>@color</code> property is used in HTML from the <code>@functions</code>. We must use the <code>@</code> symbol when accessing the properties/functions declared. If you’ve worked with razor files (.cshtml) this shouldn’t be a new thing.</p><p>Let’s make this little interesting by having a div with background and toggling that background color with a button.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>One-way data binding<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line">color is : <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>@color<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"background-color: @color; padding: 50px;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-dark"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"@ToggleBackGround"</span>&gt;</span>Toggle background color<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@functions&#123;</span><br><span class="line">    private string color = "red";</span><br><span class="line">    private void ToggleBackGround(UIMouseEventArgs eventArgs)</span><br><span class="line">    &#123;</span><br><span class="line">        color = color == "red" ? "green" : "red";</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When the button is clicked, the background color is changed from red to green and vice-versa and the content in the HTML is also changed accordingly.</p><img src="/data-binding-in-blazor/one-way-data-binding-coderethinkedcom.gif" title="one-way data binding in blazor: coderethinked.com"><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="Two-way-data-binding"><a href="#Two-way-data-binding" class="headerlink" title="Two-way data binding"></a>Two-way data binding</h3><p>Two-way data binding is the synchronization of data between the model and the view. In Blazor, this is like synchronization between the properties in the functions and the HTML.</p><h4 id="1-bind-value-oninput-attribute"><a href="#1-bind-value-oninput-attribute" class="headerlink" title="1. bind-value-oninput attribute"></a>1. <code>bind-value-oninput</code> attribute</h4><p>For the two-way binding, in blazor, we have a dedicated <code>bind-value-oninput</code> attribute.</p><p>Let’s have a label and a text box for greeting the person who entered text.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Two-way data binding<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Hello @labelText !!<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"input-group-text"</span> <span class="hljs-attr">bind-value-oninput</span>=<span class="hljs-string">"@labelText"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">@functions&#123;</span><br><span class="line">    private string labelText = "Karthik";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So, the <code>oninput</code> bind attribute will fire for every character entered in the textbox.</p><img src="/data-binding-in-blazor/two-way-data-binding-oninput-coderethinkedcom.gif" title="two-way data binding in blazor with on input listener: coderethinked.com"><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h4 id="2-bind-value-onchange-attribute"><a href="#2-bind-value-onchange-attribute" class="headerlink" title="2. bind-value-onchange attribute"></a>2. <code>bind-value-onchange</code> attribute</h4><p>The <code>bind-value-onchange</code> directive will work like a blur event in jQuery. After entering the text in the textbox and focusing out, it will update the value of the property in DOM.</p><p>I’ve tried replacing the <code>bind-value-oninput</code> with the <code>bind-value-onchange</code> directive in the above example.</p><img src="/data-binding-in-blazor/two-way-data-binding-onchanged-coderethinkedcom.gif" title="two-way data binding in blazor with the onchange listener: coderethinked.com"><h3 id="Component-parameters"><a href="#Component-parameters" class="headerlink" title="Component parameters"></a>Component parameters</h3><p>Components in blazor can pass the parameters from parent to child component. </p><p>This is like passing the model values to a partial view in ASP.NET MVC except that we don’t have events in the child component to get notified when the values are updated in the parent component.</p><p>Let’s have a year increment function in the parent component and pass that year parameter to child component. In the child component, we will check if the year supplied is a leap year or not.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Component parameters<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Year: @Year<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-outline-dark"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"@IncrementYear"</span>&gt;</span>Increment Year<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">LeapYear</span> <span class="hljs-attr">bind-Year</span>=<span class="hljs-string">"@Year"</span> /&gt;</span></span><br><span class="line">@functions&#123;</span><br><span class="line">    [Parameter]</span><br><span class="line">    private int Year &#123; get; set; &#125; = 2000;</span><br><span class="line">    private void IncrementYear()</span><br><span class="line">    &#123;</span><br><span class="line">        Year++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here’s the child component:</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"border: 2px dashed gray;"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Leap Year checker<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Year: @Year<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>@IsLeap<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@functions&#123;</span><br><span class="line">    [Parameter]</span><br><span class="line">    private int Year &#123; get; set; &#125;</span><br><span class="line">    private string IsLeap</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            if (((Year % 4 == 0) &amp;&amp; (Year % 100 != 0)) || (Year % 400 == 0))</span><br><span class="line">            &#123;</span><br><span class="line">                return Year + " is a leap year";</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                return Year + " is not a leap year";</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        set</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [Parameter]</span><br><span class="line">    private EventCallback<span class="hljs-tag">&lt;<span class="hljs-name">int</span>&gt;</span> YearChanged &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The parameters that are to be passed across the components should be decorated with <code>Parameter</code> attribute. This should be done in both parent and child components.</p><p>This child component binding happens with the <code>YearChanged</code> event in the child component as this matches the year parameter’s convention.</p><p>So, by convention the child component parameter should be</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">LeapYear</span> <span class="hljs-attr">bind-Year-YearChanged</span>=<span class="hljs-string">"@Year"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>but that is equivalent to </p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">LeapYear</span> <span class="hljs-attr">bind-Year</span>=<span class="hljs-string">"@Year"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>To check if the year is a leap year or not we’ll have an <code>IsLeap</code> property in the child component and it will check if the year is a leap or not.</p><img src="/data-binding-in-blazor/component-parameters-in-blazor-coderethinked.com.gif" title="component parameters in blazor: coderethinked.com"><p>That’s it for the data binding in client-side blazor framework.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p><h3 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h3><p><a href="https://github.com/karthikchintala1/Data-binding-in-Blazor" target="_blank" rel="noopener">Source code of data binding examples is on github</a>.</p><p>Note: You need visual studio 2019 Preview (as of this May 2019) and .NET Core 3+ to run the solution.</p><h3 id="Pic-Credits"><a href="#Pic-Credits" class="headerlink" title="Pic Credits"></a>Pic Credits</h3><ul><li>Featured image by <a href="https://unsplash.com/photos/Rs5BQj5zbf8" target="_blank" rel="noopener">Efe Kurnaz</a> on Unsplash.com</li></ul>]]></content>
    
    <summary type="html">
    
      data binding is what every client side framework does. In this post, I&#39;ll describe the different types of data binding and also demos of different data binding mechanisms in blazor framework. In the end, I&#39;ve the source code of the data binding in this post.
    
    </summary>
    
      <category term="blazor" scheme="https://coderethinked.com/categories/blazor/"/>
    
      <category term=".NET Core" scheme="https://coderethinked.com/categories/blazor/net-core/"/>
    
    
      <category term="one-way data binding" scheme="https://coderethinked.com/tags/one-way-data-binding/"/>
    
      <category term="two-way data binding" scheme="https://coderethinked.com/tags/two-way-data-binding/"/>
    
      <category term="component parameters" scheme="https://coderethinked.com/tags/component-parameters/"/>
    
      <category term="data binding" scheme="https://coderethinked.com/tags/data-binding/"/>
    
      <category term="blazor" scheme="https://coderethinked.com/tags/blazor/"/>
    
  </entry>
  
  <entry>
    <title>Unable to find debuggable browser tab in Blazor</title>
    <link href="https://coderethinked.com/unable-to-find-debuggable-browser-tab-in-blazor/"/>
    <id>https://coderethinked.com/unable-to-find-debuggable-browser-tab-in-blazor/</id>
    <published>2019-04-30T01:41:44.000Z</published>
    <updated>2019-08-17T02:24:04.588Z</updated>
    
    <content type="html"><![CDATA[<p>Debugging blazor applications is a little different from what we’ve been doing for years for debugging the JS files.</p><a id="more"></a><p>Microsoft team announced official preview of Blazor framework recently. I wanted to try the new Blazor framework so I’ve installed VS 2019 preview.</p><p>I ran the blazor application by following the setup instructions mentioned on <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/get-started?view=aspnetcore-3.0&amp;tabs=visual-studio" target="_blank" rel="noopener">Microsoft docs</a>.</p><p>After running the application, I just opened the developer tools in chrome to debug the Counter function that came up with default blazor template. Unfortunately, I couldn’t see any of the counter files.</p><p>And I saw the following console message</p><blockquote><p>Debugging hotkey: Shift+Alt+D (when application has focus)</p></blockquote><p>I press that hot key and I have the new tab opened in chrome with the following error message.</p><img src="/unable-to-find-debuggable-browser-tab-in-blazor/unable-to-find-debuggable-browser-tab.png" title="Unable to find debuggable browser tab in Blazor: coderethinked.com"><p>Although, there is a resolution mentioned in the above screenshot it will not work.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><blockquote><p><strong>close all the instances of chrome browser.</strong></p></blockquote><p>Once you close your browser window, make sure you also end the tasks of chrome.exe process from Task Manager.</p><p>The following are the google chrome processes which are still alive though you close google chrome.</p><img src="/unable-to-find-debuggable-browser-tab-in-blazor/chrome-processes-alive.jpg" title="chrome processes alive: blazor debugging"><p>Once you close all the instances of chrome, run the app again and press <code>Shift + Alt + D</code> with the focus on application. And here is the debugging window.</p><img src="/unable-to-find-debuggable-browser-tab-in-blazor/debugging-the-blazor-app.png" title="Solved Unable to find debuggable browser tab in Blazor: coderethinked.com"><p>That’s it for debugging.</p><h3 id="Where’s-the-Counter-razor-file"><a href="#Where’s-the-Counter-razor-file" class="headerlink" title="Where’s the Counter.razor file?"></a>Where’s the Counter.razor file?</h3><p>It’s in <code>yourapp.dll</code> folder in the <code>sources &gt;&gt; Page</code> folder.</p><img src="/unable-to-find-debuggable-browser-tab-in-blazor/razor_components_in_blazor_dll.png" title="razor components in blazor dll folder"><h3 id="Pic-Credits"><a href="#Pic-Credits" class="headerlink" title="Pic Credits"></a>Pic Credits</h3><ul><li>Featured Photo by <a href="https://unsplash.com/photos/jzTQVxCyKYs" target="_blank" rel="noopener">Sebastian Herrmann on Unsplash</a></li></ul>]]></content>
    
    <summary type="html">
    
      debugging blazor apps is different from normal apps. And &quot;Unable to find debuggable browser tab in Blazor error&quot; is the common error most of us face when debugging blazor apps. Here is the solution in the post.
    
    </summary>
    
      <category term="Blazor" scheme="https://coderethinked.com/categories/blazor/"/>
    
      <category term="ASP.NET Core" scheme="https://coderethinked.com/categories/blazor/asp-net-core/"/>
    
    
      <category term="blazor" scheme="https://coderethinked.com/tags/blazor/"/>
    
      <category term="debugging" scheme="https://coderethinked.com/tags/debugging/"/>
    
  </entry>
  
  <entry>
    <title>The strategy design pattern with an example</title>
    <link href="https://coderethinked.com/the-strategy-design-pattern-with-an-example/"/>
    <id>https://coderethinked.com/the-strategy-design-pattern-with-an-example/</id>
    <published>2019-04-18T01:17:52.000Z</published>
    <updated>2019-08-17T02:24:04.586Z</updated>
    
    <content type="html"><![CDATA[<p>A strategy design pattern is the most commonly used design pattern in computer programming.</p><p>In this post, we’ll start with a basic switch case statement and then we’ll modify the code into strategy design pattern.<br><a id="more"></a></p><h3 id="What-is-a-strategy-design-pattern"><a href="#What-is-a-strategy-design-pattern" class="headerlink" title="What is a strategy design pattern?"></a>What is a strategy design pattern?</h3><p>A strategy design pattern is one of the behavioral design patterns which will route to a specific algorithm based on the input.</p><p>Here’s the definition of strategy design pattern from Wikipedia</p><blockquote><p>In <a href="https://en.wikipedia.org/wiki/Computer_programming" target="_blank" rel="noopener">computer programming</a>, the <strong>strategy pattern</strong> (also known as the <strong>policy pattern</strong>) is a <a href="https://en.wikipedia.org/wiki/Behavioral_design_pattern" target="_blank" rel="noopener">behavioral</a> <a href="https://en.wikipedia.org/wiki/Design_pattern_(computer_science" target="_blank" rel="noopener">software design pattern</a>) that enables selecting an <a href="https://en.wikipedia.org/wiki/Algorithm" target="_blank" rel="noopener">algorithm</a> at runtime. Instead of implementing a single algorithm directly, code receives run-time instructions as to which in a family of algorithms to use.</p></blockquote><p>here’s another from dofactory.com</p><blockquote><p>Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.</p></blockquote><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="When-to-use"><a href="#When-to-use" class="headerlink" title="When to use?"></a>When to use?</h3><p>When we have a method that behaves differently based on the different inputs supplied then we can make use of the strategy design pattern.</p><p>In particular, if we have different business rules for different operations then we can use this strategy design pattern to have different logic for each of the operation (s).</p><p>So, if you see too many if/else blocks in a method and they vary differently based on different rules or when we have a switch case that is growing with the feature requests then we can apply the strategy design pattern.</p><h3 id="Strategy-design-pattern-diagram"><a href="#Strategy-design-pattern-diagram" class="headerlink" title="Strategy design pattern diagram"></a>Strategy design pattern diagram</h3><img src="/the-strategy-design-pattern-with-an-example/strategydesignpattern.jpg" title="Strategy design pattern diagram: coderethinked.com"><ul><li>Abstract the method in an interface. (Strategy interface)</li><li>Create separate classes for each algorithm by implementing the interface. (concrete strategy classes)</li><li>Have a strategy class that handles calling each of these strategy classes dynamically based on the input arguments. (Context class).</li></ul><h3 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h3><ul><li><strong>The Open/Closed principle</strong>: By implementing the concrete strategies for the strategy interface, we’ll cover this principle. When creating the new strategies we will not worry about changing the existing implementations.</li><li><strong>Reduced coupling</strong>: By using if/else or switch statements our code is tied to the implementation. So, changing is hard. By using this strategy, the only coupling is to the interface of the strategy. So, when changing one strategy you’d only need to change the concrete strategy you wish.</li><li><strong>Testability</strong>: The if/else blocks in methods are not easily testable. The cyclomatic complexity for the if/else blocks will be increased in the future if more code flows into the method. Testing the method would require you to write many tests for a single method and should cover all the control flow branches. With the strategy design pattern, as classes would just have one single method it is easier to test.</li></ul><h3 id="Use-case"><a href="#Use-case" class="headerlink" title="Use case"></a>Use case</h3><p>For this article, we’ll assume that if a person walks into the room, he needs to get cool air from any source (Fan, Cooler or A.C.). It is up to the person to turn on what he needs of the day. After turning on any of those available sources we will also output what turned on.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p><h3 id="Existing-design"><a href="#Existing-design" class="headerlink" title="Existing design"></a>Existing design</h3><p>When the user requests for an appropriate cooling strategy we’ll just output which option user has opted for. </p><p>We can do this with a switch-case statement.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintSelectedCoolingSystem</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> collingType</span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">switch</span> (collingType)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">case</span> (<span class="hljs-keyword">int</span>)CoolingSystem.Fan:</span><br><span class="line">            Console.Write(<span class="hljs-string">"Fan is turned on!"</span>);</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-keyword">case</span> (<span class="hljs-keyword">int</span>)CoolingSystem.Cooler:</span><br><span class="line">            Console.Write(<span class="hljs-string">"Cooler is turned on!"</span>);</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-keyword">case</span> (<span class="hljs-keyword">int</span>)CoolingSystem.AC:</span><br><span class="line">            Console.Write(<span class="hljs-string">"A.C. is turned on!"</span>);</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-keyword">default</span>:</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is basic with hard-coded text that just prints what turned on based on passed input.</p><h3 id="Replacing-case-statements-logic-with-concrete-classes"><a href="#Replacing-case-statements-logic-with-concrete-classes" class="headerlink" title="Replacing case statements logic with concrete classes"></a>Replacing case statements logic with concrete classes</h3><p>Let’s modify the above code by creating different classes for each of these cooling systems. First up, here’s the cooling system interface.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ICoolingSystem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span>(<span class="hljs-params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And here are the concrete class implementations for <code>ICoolingSystem</code> interface.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Fan</span> : <span class="hljs-title">ICoolingSystem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Print</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        Console.Write(<span class="hljs-string">"Fan is turned on!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Cooler</span> : <span class="hljs-title">ICoolingSystem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Print</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        Console.Write(<span class="hljs-string">"Cooler is turned on!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AC</span> : <span class="hljs-title">ICoolingSystem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Print</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        Console.Write(<span class="hljs-string">"A.C. is turned on!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With these concrete classes created let’s modify our <code>PrintSelectedCoolingSystem</code> method.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintSelectedCoolingSystem</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> collingType</span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    ICoolingSystem coolingStrategy = <span class="hljs-literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">switch</span> (collingType)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">case</span> (<span class="hljs-keyword">int</span>)CoolingSystem.Fan:</span><br><span class="line">            coolingStrategy = <span class="hljs-keyword">new</span> Fan();</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-keyword">case</span> (<span class="hljs-keyword">int</span>)CoolingSystem.Cooler:</span><br><span class="line">            coolingStrategy = <span class="hljs-keyword">new</span> Cooler();</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-keyword">case</span> (<span class="hljs-keyword">int</span>)CoolingSystem.AC:</span><br><span class="line">            coolingStrategy = <span class="hljs-keyword">new</span> AC();</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    coolingStrategy?.Print();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We’ve changed our case statements by having the instances of the cooling strategies. And finally, we’ll call the <code>Print()</code> method of the cooling strategy interface to print out the result for us.</p><p>With this refactoring done we are already halfway through the strategy pattern. These classes(Fan, Cooler, AC) are our concrete implementations of the Strategy interface.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p><h3 id="The-Context-class"><a href="#The-Context-class" class="headerlink" title="The Context class"></a>The Context class</h3><p>The context class in the strategy pattern is to call a particular algorithm defined by the concrete strategies. Let’s call our context class as <code>CoolingContext</code>.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CoolingContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> ICoolingSystem _coolingSystem;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="hljs-comment"><span class="hljs-doctag">///</span> Set appropriate cooling strategy</span></span><br><span class="line">    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name="coolingSystem"&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetCoolingStrategy</span>(<span class="hljs-params">ICoolingSystem coolingSystem</span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        _coolingSystem = coolingSystem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="hljs-comment"><span class="hljs-doctag">///</span> Prints the strategy set</span></span><br><span class="line">    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Print</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        _coolingSystem?.Print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And here’s the <code>PrintSelectedCoolingSystem()</code> method again with the strategy pattern.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintSelectedCoolingSystem</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> collingType</span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    CoolingContext collingContext = <span class="hljs-keyword">new</span> CoolingContext();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">switch</span> (collingType)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">case</span> (<span class="hljs-keyword">int</span>)CoolingSystem.Fan:</span><br><span class="line">            collingContext.SetCoolingStrategy(<span class="hljs-keyword">new</span> Fan());</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-keyword">case</span> (<span class="hljs-keyword">int</span>)CoolingSystem.Cooler:</span><br><span class="line">            collingContext.SetCoolingStrategy(<span class="hljs-keyword">new</span> Cooler());</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-keyword">case</span> (<span class="hljs-keyword">int</span>)CoolingSystem.AC:</span><br><span class="line">            collingContext.SetCoolingStrategy(<span class="hljs-keyword">new</span> AC());</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    collingContext.Print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We must set the strategy first by using the <code>SetCoolingStrategy()</code> method so that the appropriate concrete strategy is set within the context class and we can call the <code>Print()</code> method to print the strategy we chose.</p><p>That’s it! This is the strategy design pattern.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p><h3 id="Strategy-design-pattern-complete-source-code"><a href="#Strategy-design-pattern-complete-source-code" class="headerlink" title="Strategy design pattern (complete source code):"></a>Strategy design pattern (complete source code):</h3><p>Here’s the complete source code of strategy design pattern.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">namespace</span> <span class="hljs-title">StrategyDesignPattern</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-comment">//The strategy interface</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ICoolingSystem</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span>(<span class="hljs-params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//concrete implementation for Fan</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Fan</span> : <span class="hljs-title">ICoolingSystem</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Print</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>        &#123;</span><br><span class="line">            Console.Write(<span class="hljs-string">"Fan is turned on!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//concrete implementation for Cooler</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Cooler</span> : <span class="hljs-title">ICoolingSystem</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Print</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>        &#123;</span><br><span class="line">            Console.Write(<span class="hljs-string">"Cooler is turned on!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//concrete implementation for A.C.</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AC</span> : <span class="hljs-title">ICoolingSystem</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Print</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">            Console.Write(<span class="hljs-string">"A.C. is turned on!"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">//Context class</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CoolingContext</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">private</span> ICoolingSystem _coolingSystem;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="hljs-comment"><span class="hljs-doctag">///</span> Set appropriate cooling strategy</span></span><br><span class="line">        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name="coolingSystem"&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetCoolingStrategy</span>(<span class="hljs-params">ICoolingSystem coolingSystem</span>)</span></span><br><span class="line"><span class="hljs-function"></span>        &#123;</span><br><span class="line">            _coolingSystem = coolingSystem;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="hljs-comment"><span class="hljs-doctag">///</span> Prints the strategy set</span></span><br><span class="line">        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Print</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>        &#123;</span><br><span class="line">            _coolingSystem?.Print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> CoolingSystem</span><br><span class="line">    &#123;</span><br><span class="line">         Fan = <span class="hljs-number">1</span>,</span><br><span class="line">         AC,</span><br><span class="line">         Cooler</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//main method</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="hljs-string">"Please select a colling system:"</span>);</span><br><span class="line">        <span class="hljs-keyword">int</span> input = <span class="hljs-keyword">int</span>.Parse(Console.ReadKey().KeyChar.ToString());</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">        PrintSelectedCoolingSystem(input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintSelectedCoolingSystem</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> collingType</span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        CoolingContext collingContext = <span class="hljs-keyword">new</span> CoolingContext();</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">switch</span> (collingType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">case</span> (<span class="hljs-keyword">int</span>)CoolingSystem.Fan:</span><br><span class="line">                collingContext.SetCoolingStrategy(<span class="hljs-keyword">new</span> Fan());</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            <span class="hljs-keyword">case</span> (<span class="hljs-keyword">int</span>)CoolingSystem.Cooler:</span><br><span class="line">                collingContext.SetCoolingStrategy(<span class="hljs-keyword">new</span> Cooler());</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            <span class="hljs-keyword">case</span> (<span class="hljs-keyword">int</span>)CoolingSystem.AC:</span><br><span class="line">                collingContext.SetCoolingStrategy(<span class="hljs-keyword">new</span> AC());</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        collingContext.Print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Recap"><a href="#Recap" class="headerlink" title="Recap"></a>Recap</h3><p>In this post, we took a switch case statement and refactored into the strategy design pattern.</p><ul><li>The first step is to have concrete strategy classes and move the case statement logic/implementation into these concrete strategies. Once done, plug the newly created concrete implementations in the existing code and run the app. Make sure everything works fine.</li><li>We’ll create a strategy interface/abstract class to abstract our method we’ll implement in concrete classes.</li><li>Context class calls the specific implementations at run-time. This class will have <code>SetStrategy</code> method that will take the Strategy type.</li><li>From the main method, we’ll set the strategy using context class <code>SetStrategy()</code> method and call the <code>Print()</code> method on the context object, which will then invoke concrete class print method.<ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://en.wikipedia.org/wiki/Strategy_pattern" target="_blank" rel="noopener">Strategy design pattern on Wikipedia.com</a></li><li><a href="https://www.dofactory.com/net/strategy-design-pattern" target="_blank" rel="noopener">Strategy design pattern on DoFactory.com</a></li></ul><h2 id="Featured-Image-Credit"><a href="#Featured-Image-Credit" class="headerlink" title="Featured Image Credit"></a>Featured Image Credit</h2><ul><li><a href="https://unsplash.com/photos/mE5MBZX5sko" target="_blank" rel="noopener">Photo by Providence Doucet</a> on Unsplash</li></ul>]]></content>
    
    <summary type="html">
    
      Strategy design pattern is the easiest pattern that you can implement in the code to have better design. In this post, I&#39;ll walk through the strategy design pattern step by step. At the end of this post you should be able to understand how we got into the strategy design.
    
    </summary>
    
      <category term="csharp" scheme="https://coderethinked.com/categories/csharp/"/>
    
      <category term="design patterns" scheme="https://coderethinked.com/categories/csharp/design-patterns/"/>
    
    
      <category term="csharp" scheme="https://coderethinked.com/tags/csharp/"/>
    
      <category term="strategy design pattern" scheme="https://coderethinked.com/tags/strategy-design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>Replacing existing entity framework code with Dapper</title>
    <link href="https://coderethinked.com/replacing-existing-entity-framework-code-with-dapper/"/>
    <id>https://coderethinked.com/replacing-existing-entity-framework-code-with-dapper/</id>
    <published>2019-03-31T02:10:56.000Z</published>
    <updated>2019-08-17T02:24:04.576Z</updated>
    
    <content type="html"><![CDATA[<p>Developers choose Entity framework ORM (EF) for better productivity when accessing the database. But, when the product is built that went from bare bones to very complex and heavy data access then comes the performance.</p><p>Sometimes its the Entity framework that kills the performance so the choice when searching for a better ORM than Entity framework is Dapper.</p><p>In this post, I’ll walk you through how we can replace the existing entity framework code with dapper.<br><a id="more"></a><br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p><h3 id="Entity-models-and-accessing-data-with-Entity-framework"><a href="#Entity-models-and-accessing-data-with-Entity-framework" class="headerlink" title="Entity models and accessing data with Entity framework"></a>Entity models and accessing data with Entity framework</h3><p>Here are our entity model classes for a simple Todo application.</p><figure class="highlight csharp hljs"><figcaption><span>Todo model classes</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ToDoItem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ToDoItem</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        Details = <span class="hljs-keyword">new</span> HashSet&lt;ToDoItemDetails&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="hljs-meta">Key</span>]</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Id &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> ToDoText &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">bool</span> IsCompleted &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Priority &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</span><br><span class="line">    <span class="hljs-keyword">public</span> ICollection&lt;ToDoItemDetails&gt; Details &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ToDoItemDetails</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="hljs-meta">Key</span>]</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Id &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> TodoItemId &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Notes &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</span><br><span class="line">    <span class="hljs-keyword">public</span> DateTime CreatedDate &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</span><br><span class="line">    <span class="hljs-keyword">public</span> ToDoItem TodoItem &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And here is our method to retrieve all todo items and its details using entity framework.</p><figure class="highlight csharp hljs"><figcaption><span>accessing with EF</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> IEnumerable <span class="hljs-title">GetAll</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> _context.TodoItem.Include(a =&gt; a.Details).ToList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The above code looks so minimal and maintainable. Let’s see how the same thing can be done with Dapper.</p><h3 id="Accessing-data-with-Dapper"><a href="#Accessing-data-with-Dapper" class="headerlink" title="Accessing data with Dapper"></a>Accessing data with Dapper</h3><p>For the purpose of the article, I’m making use of the entity models that are created for entity framework. In real time, we’d have to use the DTO or a simple view model to return the data from the repository.</p><figure class="highlight csharp hljs"><figcaption><span>accessing with Dapper</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> IDbConnection Connection</span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-keyword">get</span></span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SqlConnection(_configuration.GetConnectionString(“MyConnectionString”));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> IEnumerable <span class="hljs-title">GetAll</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">var</span> todoDictionary = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-keyword">int</span>, ToDoItem&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">string</span> query = “SELECT * FROM ToDoItems td JOIN TodoItemDetails details ON details.TodoItemId = td.Id”;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">using</span> (IDbConnection con = Connection)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> result = con.Query&lt;ToDoItem, ToDoItemDetails, ToDoItem&gt;(query, (todoItem, todoItemDetail) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">            ToDoItem todoEntry;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span>(!todoDictionary.TryGetValue(todoItem.Id, <span class="hljs-keyword">out</span> todoEntry))</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                todoEntry = todoItem;</span><br><span class="line"></span><br><span class="line">                todoEntry.Details = <span class="hljs-keyword">new</span> List();</span><br><span class="line"></span><br><span class="line">                todoDictionary.Add(todoEntry.Id, todoEntry);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            todoEntry.Details.Add(todoItemDetail);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">return</span> todoEntry;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p>The above code is a bit complex as we are dealing with multiple tables and we have to fill the details list object in the TodoItem class.</p><p>As you can see we have more work to do with Dapper. But, there isn’t anything special except that it looks like the ADO.NET style of having the query into a string and supplying arguments to the Query method to get the appropriate result which can be mapped to ToDoItem class.</p><h3 id="Design-considerations"><a href="#Design-considerations" class="headerlink" title="Design considerations"></a>Design considerations</h3><p>When modifying applications like the above one, it’s better to have an interface like repositories and when you implement these repositories you do it separately for entity framework access and separate for Dapper.</p><p>I recommend implementing a repository interface in a separate class for a specific ORM.</p><img src="/replacing-existing-entity-framework-code-with-dapper/separate_implementations.png" title="“different implementations for EF and Dapper”"><p>We already have EF in the repository implementation. If we want to have a method specific implementation as in our example GetAll() method is replaced with the existing EF code. Instead, it’s better to have a separate class for Dapper implementations. When you want to have the dapper implementation, call the dapper specific method in that class.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>As you can see we have removed the existing entity framework code with Dapper code for better performance. I have other methods in the repository that make use of entity framework for reading and writing to the database.</p><p>Writing code in LINQ to SQL is more productive than writing in Dapper. But, when it comes to performance dapper wins over entity framework.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><br>We can have both LINQ to SQL and entity framework code in the same class to access the database. But, this is not a good design consideration as we may be switching to a better performing ORM tomorrow.</p>]]></content>
    
    <summary type="html">
    
      This post is just to show how to replace the existing entity framework code with dapper ORM. Not only replacing the code but also how to choose when designing these applications.
    
    </summary>
    
      <category term="Entity Framework" scheme="https://coderethinked.com/categories/entity-framework/"/>
    
    
      <category term="linq" scheme="https://coderethinked.com/tags/linq/"/>
    
      <category term="entity framework" scheme="https://coderethinked.com/tags/entity-framework/"/>
    
      <category term="dapper" scheme="https://coderethinked.com/tags/dapper/"/>
    
  </entry>
  
  <entry>
    <title>Customizing automatic HTTP 400 error response in ASP.NET Core Web APIs</title>
    <link href="https://coderethinked.com/customizing-automatic-http-400-error-response-in-asp-net-core-web-apis/"/>
    <id>https://coderethinked.com/customizing-automatic-http-400-error-response-in-asp-net-core-web-apis/</id>
    <published>2019-03-11T01:12:44.000Z</published>
    <updated>2019-08-17T02:24:04.494Z</updated>
    
    <content type="html"><![CDATA[<p>Annotating the controllers with <code>ApiController</code> attribute in ASP.NET Core 2.1 or higher will enable the behavioral options for the API’s. These behavioral options include automatic HTTP 400 responses as well.<br>In this post, we’ll see how we can customize the default error response from the ASP.NET Core Web API.<br><a id="more"></a></p><h2 id="Default-error-response"><a href="#Default-error-response" class="headerlink" title="Default error response"></a>Default error response</h2><p>If you are creating a new default ASP.NET Core web API project, then you’d see the <code>ValuesController.cs</code> file in the project. Otherwise, create a Controller and create an action method to a parameter to test the automatic HTTP 400 responses.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><br>If you are creating a custom API for yourself you’d need to annotate the controller with <code>[ApiController]</code> attribute. Otherwise, the default 400 responses won’t work.</p><p>I’ll go with the default <code>ValuesController</code> for now. We already have the <code>Get</code> action with id passed in as the parameter. </p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// GET api/values/5</span></span><br><span class="line">[<span class="hljs-meta">HttpGet(“&#123;id&#125;”)</span>]</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult&lt;<span class="hljs-keyword">string</span>&gt; <span class="hljs-title">Get</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> id</span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> “<span class="hljs-keyword">value</span>”;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s try to pass in a string for the id parameter for the Get action through Postman.</p><img src="/customizing-automatic-http-400-error-response-in-asp-net-core-web-apis/default_HTTP_400_response.png" title="“Automatic 400 HTTP response in ASP.NET Core Web API”"><p>This is the default error response returned by the API. </p><p>Notice that we didn’t have the ModelState checking in our <code>Get</code> action method this is because ASP.NET Core did it for us as we have the <code>[ApiController]</code> attribute on top of our controller.</p><h2 id="Customizing-the-error-response"><a href="#Customizing-the-error-response" class="headerlink" title="Customizing the error response"></a>Customizing the error response</h2><p>To modify the error response we need to make use of the <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.apibehavioroptions.invalidmodelstateresponsefactory?view=aspnetcore-2.2#Microsoft_AspNetCore_Mvc_ApiBehaviorOptions_InvalidModelStateResponseFactory" target="_blank" rel="noopener">InvalidModelStateResponseFactory</a> property.</p><p><code>InvalidModelStateResponseFactory</code> is a delegate which will invoke the actions annotated with ApiControllerAttribute to convert invalid ModelStateDictionary into an IActionResult.</p><p>The default response type for HTTP 400 responses is <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.validationproblemdetails?view=aspnetcore-2.2" target="_blank" rel="noopener">ValidationProblemDetails</a> class. So, we will create a custom class which inherits <code>ValidationProblemDetails</code> class and define our custom error messages.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p><h2 id="CustomBadRequest-class"><a href="#CustomBadRequest-class" class="headerlink" title="CustomBadRequest class"></a>CustomBadRequest class</h2><p>Here is our <code>CustomBadRequest</code> class which assigns error properties in the constructor.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CustomBadRequest</span> : <span class="hljs-title">ValidationProblemDetails</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CustomBadRequest</span>(<span class="hljs-params">ActionContext context</span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        Title = “Invalid arguments to the API”;</span><br><span class="line">        Detail = “The inputs supplied to the API are invalid”;</span><br><span class="line">        Status = <span class="hljs-number">400</span>;</span><br><span class="line">        ConstructErrorMessages(context);</span><br><span class="line">        Type = context.HttpContext.TraceIdentifier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ConstructErrorMessages</span>(<span class="hljs-params">ActionContext context</span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> keyModelStatePair <span class="hljs-keyword">in</span> context.ModelState)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> key = keyModelStatePair.Key;</span><br><span class="line">            <span class="hljs-keyword">var</span> errors = keyModelStatePair.Value.Errors;</span><br><span class="line">            <span class="hljs-keyword">if</span> (errors != <span class="hljs-literal">null</span> &amp;&amp; errors.Count &gt; <span class="hljs-number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (errors.Count == <span class="hljs-number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-keyword">var</span> errorMessage = GetErrorMessage(errors[<span class="hljs-number">0</span>]);</span><br><span class="line">                    Errors.Add(key, <span class="hljs-keyword">new</span>[] &#123; errorMessage &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-keyword">var</span> errorMessages = <span class="hljs-keyword">new</span> <span class="hljs-keyword">string</span>[errors.Count];</span><br><span class="line">                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; errors.Count; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        errorMessages[i] = GetErrorMessage(errors[i]);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Errors.Add(key, errorMessages);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">string</span> <span class="hljs-title">GetErrorMessage</span>(<span class="hljs-params">ModelError error</span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">string</span>.IsNullOrEmpty(error.ErrorMessage) ?</span><br><span class="line">            “The input was not valid.” :</span><br><span class="line">            error.ErrorMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I’m using ActionContext as a constructor argument as we can have more information about the action. I’ve used the ActionContext as I’m using the <code>TraceIdentifier</code> from the <code>HttpContext</code>. The Action context will have route information, HttpContext, ModelState, ActionDescriptor. </p><p>You could pass in just the model state in the action context at least for this bad request customization. It is up to you.</p><h2 id="Plugging-the-CustomBadRequest-in-the-configuration"><a href="#Plugging-the-CustomBadRequest-in-the-configuration" class="headerlink" title="Plugging the CustomBadRequest in the configuration"></a>Plugging the CustomBadRequest in the configuration</h2><p>We can configure our newly created CustomBadRequest in Configure method in <code>Startup.cs</code> class in two different ways.</p><h3 id="using-ConfigureApiBehaviorOptions-off-AddMvc"><a href="#using-ConfigureApiBehaviorOptions-off-AddMvc" class="headerlink" title="using ConfigureApiBehaviorOptions off AddMvc()"></a>using ConfigureApiBehaviorOptions off AddMvc()</h3><p><code>ConfigureApiBehaviorOptions</code> is an extension method on <code>IMvcBuilder</code> interface. Any method that returns an <code>IMvcBuilder</code> can call the <code>ConfigureApiBehaviorOptions</code> method.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">        </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IMvcBuilder <span class="hljs-title">ConfigureApiBehaviorOptions</span>(<span class="hljs-params"><span class="hljs-keyword">this</span> IMvcBuilder builder, Action&lt;ApiBehaviorOptions&gt; setupAction</span>)</span>;</span><br></pre></td></tr></table></figure><p>The <code>AddMvc()</code> returns an <code>IMvcBuilder</code> and we will plug our custom bad request here.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">        </span><br><span class="line">services.AddMvc()</span><br><span class="line">        .SetCompatibilityVersion(CompatibilityVersion.Version_2_2)</span><br><span class="line">        .ConfigureApiBehaviorOptions(options =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            options.InvalidModelStateResponseFactory = context =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">var</span> problems = <span class="hljs-keyword">new</span> CustomBadRequest(context);</span><br><span class="line"></span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BadRequestObjectResult(problems);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="using-the-generic-Configure-method"><a href="#using-the-generic-Configure-method" class="headerlink" title="using the generic Configure method"></a>using the generic Configure method</h3><p>This will be convenient as we don’t chain the configuration here. We’ll be just using the generic configure method here.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">        </span><br><span class="line">services.Configure&lt;ApiBehaviorOptions&gt;(a =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    a.InvalidModelStateResponseFactory = context =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> problemDetails = <span class="hljs-keyword">new</span> CustomBadRequest(context);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BadRequestObjectResult(problemDetails)</span><br><span class="line">        &#123;</span><br><span class="line">            ContentTypes = &#123; “application/problem+json”, “application/problem+xml” &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Testing-the-custom-bad-request"><a href="#Testing-the-custom-bad-request" class="headerlink" title="Testing the custom bad request"></a>Testing the custom bad request</h2><p>That’s it for configuring the custom bad request, let’s run the app now.</p><img src="/customizing-automatic-http-400-error-response-in-asp-net-core-web-apis/customized_HTTP_400_resonse.png" title="“Custom 400 HTTP response in ASP.NET Core Web API”"><p>You can see the customized HTTP 400 error messages we’ve set in our custom bad request class showing up.</p><h2 id="Image-Credits"><a href="#Image-Credits" class="headerlink" title="Image Credits"></a>Image Credits</h2><ul><li><a href="https://unsplash.com/photos/7AYiNIx4374" target="_blank" rel="noopener">Featured Image</a> by <a href="https://unsplash.com/@sandrachile" target="_blank" rel="noopener">Sandrachile</a> from Unsplash.com</li></ul>]]></content>
    
    <summary type="html">
    
      ASP.NET Core provides automatic 400 error responses when the controllers are decorated with ApiController attribute. In this post, we&#39;ll see how we can customize the automatic 400 error responses.
    
    </summary>
    
      <category term="ASP.NET Core" scheme="https://coderethinked.com/categories/asp-net-core/"/>
    
    
      <category term="asp-net-core" scheme="https://coderethinked.com/tags/asp-net-core/"/>
    
      <category term="customizing 400 error response" scheme="https://coderethinked.com/tags/customizing-400-error-response/"/>
    
      <category term="model state validation" scheme="https://coderethinked.com/tags/model-state-validation/"/>
    
  </entry>
  
  <entry>
    <title>Exploring web api in asp.net core</title>
    <link href="https://coderethinked.com/writing-web-api-s-in-asp-net-core/"/>
    <id>https://coderethinked.com/writing-web-api-s-in-asp-net-core/</id>
    <published>2019-03-03T01:38:21.000Z</published>
    <updated>2019-08-17T02:24:04.727Z</updated>
    
    <content type="html"><![CDATA[<p>With the asp.net core modularity, the configuration and setup work for the asp.net core projects is more when compared to building apps with the .net framework.</p><p>In this post, we’ll explore how to build a web API and also look at the configuration options that we need to build a web API in asp.net core.</p><a id="more"></a><p>I have installed <a href="https://dotnet.microsoft.com/download/dotnet-core/2.2" target="_blank" rel="noopener">ASP.NET CORE 2.2</a> for this project. Make sure you install the .NET Core 2.2 SDK if you are running the sample project.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p><h3 id="File-gt-gt-New-Project"><a href="#File-gt-gt-New-Project" class="headerlink" title="File &gt;&gt; New Project"></a>File &gt;&gt; New Project</h3><p>Open Visual Studio and from the menu select <code>File &gt;&gt; New &gt;&gt; Project</code>. This should open a <code>New Project</code> wizard. </p><p>Select <code>.Net Core</code> from the left menu and select <code>ASP.NET Core Web Application</code>. That should bring another wizard with a good number of project templates. Choose <code>API</code> from that.</p><p>Once done with that you should see a brand new project.</p><h3 id="Exploring-the-files-created"><a href="#Exploring-the-files-created" class="headerlink" title="Exploring the files created"></a>Exploring the files created</h3><p>Solution explorer should look like this.</p><img src="/writing-web-api-s-in-asp-net-core/simple_web_api_solution_explorer.png" title="“ASP.NET CORE 2.2 solution explorer for API”"><p>The solution doesn’t have much of the boilerplate that you’d normally expect with the normal .net framework API with the default project.</p><h3 id="Looking-at-the-ValuesController"><a href="#Looking-at-the-ValuesController" class="headerlink" title="Looking at the ValuesController"></a>Looking at the ValuesController</h3><p>ValuesController is the file created by the API project template. </p><p>Unlike the normal .net framework API controllers which will be derived from ApiController class, the ValuesController in ASP.NET Core 2.2 is derived from ControllerBase class.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><br><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ValuesController</span> : <span class="hljs-title">ControllerBase</span></span><br></pre></td></tr></table></figure></p><p>The ControllerBase abstract class has the same things what the old ApiController class in the .net framework has. So, things like the ModelState, HttpContext, Url information and several methods which returns HttpResponses from the API’s.</p><h3 id="The-ApiController-annotation"><a href="#The-ApiController-annotation" class="headerlink" title="The ApiController annotation"></a>The ApiController annotation</h3><p>Apart from deriving the API from the <code>ControllerBase</code> class, we have our values controller API decorated with <code>[ApiController]</code>.</p><p>The ApiController annotation is not mandatory on the controllers. Your API still works if you don’t decorate with ApiController annotation. However, having the ApiController annotation has its advantages.</p><p>They derive this attribute from the ASP.NET MVC ControllerAttribute so using this on a class will make it available for the controller discovery process. Besides having implemented ControllerAttribute class, it also implements IApiBehaviorMetadata, which will provide some API-centric features.</p><p>ApiController annotation, when coupled with ControllerBase, will provide REST specific behavior for the controllers.</p><h3 id="Automatic-model-state-validation"><a href="#Automatic-model-state-validation" class="headerlink" title="Automatic model state validation"></a>Automatic model state validation</h3><p>Model state validations will automatically trigger an HTTP 400 response. So, writing the model state condition in every controller action isn’t necessary.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> (!ModelState.IsValid)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> BadRequest(ModelState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can customize the error message of the above 400 response by using <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.apibehavioroptions.invalidmodelstateresponsefactory?view=aspnetcore-2.2#Microsoft_AspNetCore_Mvc_ApiBehaviorOptions_InvalidModelStateResponseFactory" target="_blank" rel="noopener">InvalidModelStateResponseFactory</a><br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>If you are new to ASP.NET core consider reading the documentation from MSDN so you can get a good grip on the setup and configuration things in the startup.cs file. </p><p>Overall, the API seems to be the same old ASP.NET MVC Web API except for those configuration things in the Program.cs and Startup.cs files.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/web-api/?view=aspnetcore-2.2" target="_blank" rel="noopener">ASP.NET Core 2.2 Web API documentation</a>.</li></ul>]]></content>
    
    <summary type="html">
    
      In this post, I&#39;ll walkthrough what are the files created and what&#39;s in those newly created web API files in the new ASP.NET Core project.
    
    </summary>
    
      <category term="asp-net-core" scheme="https://coderethinked.com/categories/asp-net-core/"/>
    
    
      <category term="asp-net-core" scheme="https://coderethinked.com/tags/asp-net-core/"/>
    
      <category term="web api" scheme="https://coderethinked.com/tags/web-api/"/>
    
  </entry>
  
  <entry>
    <title>visualizing stack and heap with SharpLab</title>
    <link href="https://coderethinked.com/visualizing-stack-and-heap-with-sharplab-io/"/>
    <id>https://coderethinked.com/visualizing-stack-and-heap-with-sharplab-io/</id>
    <published>2019-02-21T05:49:42.000Z</published>
    <updated>2019-08-17T02:24:04.711Z</updated>
    
    <content type="html"><![CDATA[<p>When I wanted to look at the IL of the C# code I wrote I used to create a new console application in visual studio and write the code and build it and view the DLL with <a href="https://github.com/icsharpcode/ILSpy#ilspy-------" target="_blank" rel="noopener">ILSpy</a> or <a href="https://www.jetbrains.com/decompiler/" target="_blank" rel="noopener">dotPeek</a>.</p><p>These days I’m using LINQPad to view the IL quickly.</p><p>Here is the alternative to that hectic setup, <a href="https://sharplab.io" target="_blank" rel="noopener">Sharplab</a>.</p><p><a href="https://sharplab.io" target="_blank" rel="noopener">SharpLab</a> is developed by <a href="https://twitter.com/ashmind" target="_blank" rel="noopener">Andrey Shchekin</a>. SharpLab is a similar tool you can use to Run, De-compile (C#, IL, JIT Asm) and visualizing syntax trees. You can also switch the C# language to whatever you want in SharpLab.</p><p>And the good thing about SharpLab is that you don’t need any tools except a web browser.</p><a id="more"></a><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="Visualizing-stack-heap-and-boxing"><a href="#Visualizing-stack-heap-and-boxing" class="headerlink" title="Visualizing stack/heap and boxing"></a>Visualizing stack/heap and boxing</h3><p>Apart from viewing IL or viewing de-compiled C# code. SharpLab recently added a new feature to visualize .NET stack/heap and boxing.</p><p>Once done with writing or creating an object, you could just use <code>Inspect.MemoryGraph(obj)</code> statement to see if it is on stack/heap. You can also see the boxing happened on the objects.</p><p>This is how it looks like.</p><img src="/visualizing-stack-and-heap-with-sharplab-io/stack_heap_and_boxing_in_sharplab.io.png" title="“Visualizing stack/heap and boxing with SharpLab.io”"><h3 id="Viewing-structure-of-object-in-Memory-heap"><a href="#Viewing-structure-of-object-in-Memory-heap" class="headerlink" title="Viewing structure of object in Memory (heap)"></a>Viewing structure of object in Memory (heap)</h3><p>If you want to view the structure of an object in the memory, you can use <code>Inspect.Heap(object)</code> statement.</p><p>Let’s inspect a string value in the memory and <a href="https://sharplab.io/#gist:4b498c8c0ca542b11b83cbd7eda6dee7" target="_blank" rel="noopener">here it is</a>.</p><img src="/visualizing-stack-and-heap-with-sharplab-io/Hello_world_on_heap.png" title="“Visualizing object on the heap with SharpLab.io”"><h3 id="Viewing-structure-of-stack-value"><a href="#Viewing-structure-of-stack-value" class="headerlink" title="Viewing structure of stack value"></a>Viewing structure of stack value</h3><p>You can view structure of any stack value with <code>Inspect.Stack(value)</code> statement.</p><p>Lets <a href="https://sharplab.io/#gist:fa7e83532f8766cda7397476541e5f00" target="_blank" rel="noopener">view a value structure on stack</a></p><img src="/visualizing-stack-and-heap-with-sharplab-io/stack_in_memory.png" title="“Visualizing value on stack with SharpLab.io”"><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="value-Inspect"><a href="#value-Inspect" class="headerlink" title="value.Inspect()"></a>value.Inspect()</h3><p>This is an alternative to write Console.WriteLine to view a value in the output window in SharpLab. Try it out.</p>]]></content>
    
    <summary type="html">
    
      There are many tools that will let you view IL for C# code. But sharplab.io is a website which will just do the same thing in the browser. SharpLab will let you view IL, Decompiled c# and much more.
    
    </summary>
    
      <category term="tools" scheme="https://coderethinked.com/categories/tools/"/>
    
    
      <category term="tools" scheme="https://coderethinked.com/tags/tools/"/>
    
      <category term="sharplab" scheme="https://coderethinked.com/tags/sharplab/"/>
    
      <category term="stack" scheme="https://coderethinked.com/tags/stack/"/>
    
      <category term="heap" scheme="https://coderethinked.com/tags/heap/"/>
    
      <category term="boxing" scheme="https://coderethinked.com/tags/boxing/"/>
    
  </entry>
  
  <entry>
    <title>stopPropogation() vs preventDefault() in JavaScript</title>
    <link href="https://coderethinked.com/stoppropogation-vs-preventdefault-in-javascript/"/>
    <id>https://coderethinked.com/stoppropogation-vs-preventdefault-in-javascript/</id>
    <published>2019-02-10T06:11:45.000Z</published>
    <updated>2019-08-17T02:24:04.580Z</updated>
    
    <content type="html"><![CDATA[<p>In the <a href="http://coderethinked.com/event-bubbling">previous blog post</a>, we looked at what event bubbling is and how we can implement it.</p><p>In this article we’ll see what is the difference between stopPropogation() and preventDefault() methods in an event handler.<br><a id="more"></a></p><h2 id="e-stopPropagation"><a href="#e-stopPropagation" class="headerlink" title="e.stopPropagation()"></a>e.stopPropagation()</h2><p>The stopPropagation() on an event will stop bubbling until the event chain. </p><p>If you call the stopPropagation() on the event then the event won’t be bubbled up and the parent element will not receive the event triggers.</p><p>We’ll use the <a href="https://coderethinked.com/event-bubbling/">event bubbling</a> demo code here to stop propagating. In the event bubbling example, it will trigger all the events when we click on any of the TD element. Let’s stop the event bubbling when we click on any TD element.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><br>Let’s change the <code>TD</code> click event to have our stopPropogation.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">"td"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">  e.stopPropagation();</span><br><span class="line">  alert(<span class="hljs-string">"td click fired"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Once we did the above change, our events won’t be bubbled up top when the click event happens on the <code>TD</code> element. </p><p>Stopping the propagation/bubbling can be useful if we use event delegation to have a single event for all the nested elements (ex: a single event on a table element, which will take care of where it was clicked and what action it has to take).</p><p>Here is the jsFiddle demo with the propagation stopped on the td element.</p><script async src="//jsfiddle.net/mg4nLrkt/2/embed/js,html,result/"></script><p>Try clicking on any of the <code>TD</code> cells and you should only get one alert instead of getting multiple alerts.</p><h2 id="e-preventDefault"><a href="#e-preventDefault" class="headerlink" title="e.preventDefault()"></a>e.preventDefault()</h2><p>Unlike stopPropagation(), preventDefault() will prevent the default browser action on that event.</p><p>Let’s say we have an input field which is a postal code or PIN code. We don’t want the user to enter alphabets and special characters into the field. The field should only accept numbers.</p><p>One way to do is instead of having the input type as the text we can have the type as a number so that only numbers will be accepted but this will allow the user to decrement or increment the numbers in the input by using arrow keys (up/down).</p><p>So, let‘s wire up a keypress event on that element and call the preventDefault() on the event if the entered character is not a number.</p><p>Here is how it can be done.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">"#alpha"</span>).keypress(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (event.which != <span class="hljs-number">8</span> &amp;&amp; <span class="hljs-built_in">isNaN</span>(<span class="hljs-built_in">String</span>.fromCharCode(event.which))) &#123;</span><br><span class="line">    event.preventDefault(); <span class="hljs-comment">//prevents from being entered</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Here is the demo.</p><script async src="//jsfiddle.net/kcq4e5rx/1/embed/js,html,result/"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>Note that the `event.preventDefault()` will just prevent the event from happening for that specific event. So, if you have any keypress event registered on the on the parent element or ancestors, those will still be fired due to the bubbling effect. **e.preventDefault() will not stop the bubbling**.## returning false from the event handler in jQueryreturning false from an event in jQuery will have two effects. The `return false;` statement in a jQuery event listener does both the `e.stopPropagation()` and `e.preventDefault()`.Let's add a body keypress listener along with the keypress event on the input field.<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">"body"</span>).keypress(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="hljs-string">"body key press"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="hljs-string">"#alpha"</span>).keypress(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (event.which != <span class="hljs-number">8</span> &amp;&amp; <span class="hljs-built_in">isNaN</span>(<span class="hljs-built_in">String</span>.fromCharCode(event.which))) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>So, whenever we press a key in the text box, if the key is other than a number then the character won’t be inserted into the text box and we will present an alert to the user as we have key press event registered on the `body` tag.The alert will still be triggered though we enter a number as we are not stopping the propagation in the input field.Now, let's replace `event.preventDefault()` statement with a `return false` and try that in the [fiddler](http://jsfiddle.net/sq8rcyxf/).You can observe that the alert in body keypress will no longer be presented when we press any alphabet. This is because we are stopping the bubbling and preventing the default action on the event with return false statement.Here is the modified jsFiddle.<script async src="//jsfiddle.net/sq8rcyxf/embed/js,html,result/"></script><h2 id="best-place-to-handle-actions-on-the-event"><a href="#best-place-to-handle-actions-on-the-event" class="headerlink" title="best place to handle actions on the event"></a>best place to handle actions on the event</h2><p>We can stop the event actions anywhere in the event handler. </p><p>I’d recommend you to add these event actions at the beginning of the event handler function. This is because if you have the event action (say <code>e.stopPropagation()</code>) at the end of the function, and if your functional code has any run-time errors, then our <code>e.stopPropagation()</code> statement will not be reached and because of to the event bubbling effect, we might end up triggering the events up the hierarchy.</p><p>Example:<br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">"td"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">//functional code here</span></span><br><span class="line">  e.stopPropagation();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>As you can see from the above code if the function piece of code has any errors the rest of the lines won’t be executed and our e.stopPropagation() statement will not be considered.</p><p>Instead of having the e.stopPropagation() at the end of the handler, if we can have it at the beginning of the handler then though our functional code fails, the propagation will not happen (meaning e.stopPropagation() works).</p><p>Example:<br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">"td"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">  e.stopPropagation();</span><br><span class="line">  <span class="hljs-comment">//functional code here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p>]]></content>
    
    <summary type="html">
    
      understanding e.preventDefault() and e.stopPropagation() will help developers when dealing with events. This post explains preventDefault() and stopPropagation() and it also help you understand where to use them properly.
    
    </summary>
    
      <category term="javascript" scheme="https://coderethinked.com/categories/javascript/"/>
    
      <category term="jQuery" scheme="https://coderethinked.com/categories/javascript/jquery/"/>
    
    
      <category term="preventDefault" scheme="https://coderethinked.com/tags/preventdefault/"/>
    
      <category term="stopPropagation" scheme="https://coderethinked.com/tags/stoppropagation/"/>
    
      <category term="javascript" scheme="https://coderethinked.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>event bubbling</title>
    <link href="https://coderethinked.com/event-bubbling/"/>
    <id>https://coderethinked.com/event-bubbling/</id>
    <published>2019-01-14T11:49:50.000Z</published>
    <updated>2019-08-17T02:24:04.566Z</updated>
    
    <content type="html"><![CDATA[<p>Event bubbling concept is a way of propagating the events from the element clicked all the way to the ancestor. This is a beginner article so if you are already aware of this you can skip this article.<br><a id="more"></a><br><!--toc--></p><h2 id="What-is-event-bubbling"><a href="#What-is-event-bubbling" class="headerlink" title="What is event bubbling?"></a>What is event bubbling?</h2><p>The principle of event bubbling is fairly simple. Here it goes.</p><blockquote><p>When an event happens on an element, the respective handler is run and is bubbled on to the parent element, the parent element handles the event and the event is bubbled on to its ancestors (except when bubbling is stopped).</p></blockquote><h2 id="event-bubbling-With-an-example"><a href="#event-bubbling-With-an-example" class="headerlink" title="event bubbling With an example"></a>event bubbling With an example</h2><p>Let’s look at a sample HTML.<br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"grid"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 1 cell 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 1 cell 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 2 cell 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 2 cell 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 3 cell 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 3 cell 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!-- some other tr rows --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><br>If there is an event happening on any <code>TD</code> element in the above code, then the event handler for that <code>TD</code> element will be fired and executed, once the <code>TD</code> event handler completes its operation, then it’s parent event listener is fired (event bubbled here). So, the <code>TR</code> element handles the event and passes it to the <code>tbody</code>, the <code>tbody</code> handles its specific thing and passes it to the <code>table</code> and so on until the document object is reached.</p><p>To see this in action, let’s add event listeners for every HTML tag in the above HTML. Here’s is the demo in jsfiddle. Just try to click on any <code>td</code> cell and observe that all the listeners are fired all the way up to the document listener.</p><script async src="//jsfiddle.net/wxp75uas/1/embed/js,html,result/"></script><p>The requirement for this article is that for the above table whenever we click on any <code>TD</code> element we’ve to show the content in an alert (so, row x column y should be displayed).</p><p>To satisfy the requirement, we’d generally attach an event listener on the <code>TD</code> element and when the user clicks we’ll alert the text in that <code>TD</code> element.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="hljs-string">"td"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;</span><br><span class="line">      alert($(<span class="hljs-keyword">this</span>).text());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Now, the above code looks pretty obvious but imagine we have 100 rows and every row is having 5 columns, then the click event listener will bind to all the 500 (100 * 5) TD elements.</p><p>To solve this, we’ll just attach a listener on the grid and see if the click happened on the TD element and then take necessary action. This needs a little work, but it is just a single listener for the entire grid.</p><p>In our case, the logic should be pretty easy<br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="hljs-string">"#grid"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> cell= $(e.target); <span class="hljs-comment">//Get the cell</span></span><br><span class="line">        <span class="hljs-keyword">if</span>(cell.is(<span class="hljs-string">'TD'</span>))</span><br><span class="line">            alert(<span class="hljs-string">'Cell data: '</span> + cell.text());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>Well, the code works. But how does it work? Because of event bubbling. Yes, the TD element receives a click and there is no handler attached to it so bubbled up to tr, tbody these don’t have any listeners it bubbles up to the table element which has a click event handler and is fired.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><br>Note that once the event is handled in the table (grid) it doesn’t stop there it still bubbles up to the document object (because we didn’t stop the bubbling).</p><p>Event bubbling is the concept of bubbling the events up until the hierarchy so to catch the bubbling we can have a listener on the parent element so that we can take appropriate action based on the target element. When this is implemented, we will call it as event delegation.</p><h2 id="Javascript-solution-for-event-delegation"><a href="#Javascript-solution-for-event-delegation" class="headerlink" title="Javascript solution for event delegation"></a>Javascript solution for event delegation</h2><p>This is a javascript solution to event delegation. If you are using plain javascript, then you should remember one thing here. The <code>event.target</code> is always the element that is clicked on and not the element it is bubbled up to.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> table = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"grid"</span>);</span><br><span class="line">table.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">evt</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> td = evt.target.closest(<span class="hljs-string">"td"</span>); <span class="hljs-comment">//evt.target is the element that recieves the click</span></span><br><span class="line">    <span class="hljs-keyword">if</span>(!td) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//if the click happens on any other element we can ignore the handling</span></span><br><span class="line">    <span class="hljs-comment">//do something with the event or take necessary action</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jQuery-event-delegation"><a href="#jQuery-event-delegation" class="headerlink" title="jQuery event delegation"></a>jQuery event delegation</h2><p>Instead of verifying if the clicked element is TD or not, jQuery has support for event delegation. So, you can specify what element to listen on when a click happens on a grid.</p><h3 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h3><blockquote><p>Event delegation allows us to attach a single event listener, to a parent element, that will fire for all descendants matching a selector, whether those descendants exist now or are added in the future.- jQuery</p></blockquote><p>Here’s how we can achieve event delegation in jQuery.</p><figure class="highlight javascript hljs"><figcaption><span>eventdelegation</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="hljs-string">"#grid"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-string">"td"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">evt</span>) </span>&#123;</span><br><span class="line">        alert(<span class="hljs-string">" the td content is : "</span> + $(<span class="hljs-keyword">this</span>).text())</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>One might think that this is same as having the selector combined with the grid</p><figure class="highlight javascript hljs"><figcaption><span>notdelegated</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">"#grid td"</span>).on(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>This is not a delegated listener because we are attaching click event listeners for all the <code>td</code> elements in the <code>#grid</code>. Whereas, the delegated listener will listen on the grid and if the click happens on the <code>td</code> element then the listener will be fired.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>With event delegation, we can have some performance improvements on the page.</p><p>jQuery event delegation is good but if you have to stop/off the event delegation, then the answer is you can’t! Yes, you cannot stop the event delegation on a specific element inside a parent container.</p><p>I’d recommend stopping the bubbling(using <code>e.stopPropogation()</code>) if you have handled the specific event, otherwise it will fire the parent listeners if you have any.</p>]]></content>
    
    <summary type="html">
    
      what is event bubbling? How does event bubbles up? In this post, I&#39;ll explain how event bubbling happens and how to achieve event bubbling with JavaScript and jQuery using event delegation. Event delegation is the implementation of event bubbling.
    
    </summary>
    
      <category term="javascript" scheme="https://coderethinked.com/categories/javascript/"/>
    
      <category term="jQuery" scheme="https://coderethinked.com/categories/javascript/jquery/"/>
    
    
      <category term="event bubbling" scheme="https://coderethinked.com/tags/event-bubbling/"/>
    
      <category term="event delegation" scheme="https://coderethinked.com/tags/event-delegation/"/>
    
  </entry>
  
  <entry>
    <title>why func delegate is not translated to sql</title>
    <link href="https://coderethinked.com/why-func-delegate-is-not-translated-to-sql/"/>
    <id>https://coderethinked.com/why-func-delegate-is-not-translated-to-sql/</id>
    <published>2018-12-28T01:36:50.000Z</published>
    <updated>2019-08-17T02:24:04.727Z</updated>
    
    <content type="html"><![CDATA[<p>This post is a sequence for the <a href="http://coderethinked.com/don-t-use-func-delegate-on-the-ef-entities/">previous article</a> which shows why the Func delegate is not translated into the SQL statements.</p><a id="more"></a><p>Let’s investigate why our func delegate is not translated as we have expected in the <a href="http://coderethinked.com/don-t-use-func-delegate-on-the-ef-entities/">previous article</a>.</p><h3 id="Writing-the-queries-to-the-console"><a href="#Writing-the-queries-to-the-console" class="headerlink" title="Writing the queries to the console"></a>Writing the queries to the console</h3><p>We can see the query that will be translated for the queryables by writing out the <code>IQueryable</code> to the console. </p><p>Here it is</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Expression&lt;Func&lt;Customer, <span class="hljs-keyword">bool</span>&gt;&gt; exprPred = p =&gt; p.FirstName == <span class="hljs-string">"Design Engineer"</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> names = context.Customers.Where(exprPred);</span><br><span class="line">Console.Write(<span class="hljs-string">"Query : "</span> + names);</span><br><span class="line"><span class="hljs-comment">/*Query : SELECT</span></span><br><span class="line"><span class="hljs-comment">    [Extent1].[CustomerID] AS [CustomerID],</span></span><br><span class="line"><span class="hljs-comment">    [Extent1].[NameStyle] AS [NameStyle],</span></span><br><span class="line"><span class="hljs-comment">    [Extent1].[Title] AS [Title],</span></span><br><span class="line"><span class="hljs-comment">    [Extent1].[FirstName] AS [FirstName],</span></span><br><span class="line"><span class="hljs-comment">    [Extent1].[MiddleName] AS [MiddleName],</span></span><br><span class="line"><span class="hljs-comment">    [Extent1].[LastName] AS [LastName],</span></span><br><span class="line"><span class="hljs-comment">    [Extent1].[Suffix] AS [Suffix],</span></span><br><span class="line"><span class="hljs-comment">    [Extent1].[CompanyName] AS [CompanyName],</span></span><br><span class="line"><span class="hljs-comment">    [Extent1].[SalesPerson] AS [SalesPerson],</span></span><br><span class="line"><span class="hljs-comment">    [Extent1].[EmailAddress] AS [EmailAddress],</span></span><br><span class="line"><span class="hljs-comment">    [Extent1].[Phone] AS [Phone],</span></span><br><span class="line"><span class="hljs-comment">    [Extent1].[PasswordHash] AS [PasswordHash],</span></span><br><span class="line"><span class="hljs-comment">    [Extent1].[PasswordSalt] AS [PasswordSalt],</span></span><br><span class="line"><span class="hljs-comment">    [Extent1].[rowguid] AS [rowguid],</span></span><br><span class="line"><span class="hljs-comment">    [Extent1].[ModifiedDate] AS [ModifiedDate]</span></span><br><span class="line"><span class="hljs-comment">    FROM [SalesLT].[Customer] AS [Extent1]</span></span><br><span class="line"><span class="hljs-comment">    WHERE N'Design Engineer' = [Extent1].[FirstName]</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br></pre></td></tr></table></figure><p>We got the SQL query for the <code>IQueryable</code> here and it is what it was expected.</p><p>Now, let’s try the same thing for our Func delegate and see what it will output when we write it to console.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><br><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;Customer, <span class="hljs-keyword">bool</span>&gt; funcPred = p =&gt; p.FirstName == <span class="hljs-string">"Design Engineer"</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> names = context.Customers.Where(funcPred);</span><br><span class="line">Console.Write(<span class="hljs-string">"Query : "</span> + names);</span><br><span class="line"><span class="hljs-comment">//Query : System.Linq.Enumerable+WhereEnumerableIterator`1[QueryProviderImpl.Customer]</span></span><br></pre></td></tr></table></figure></p><p>The output is different here. This is making a call to <code>WhereEnumerableIterator</code> in Enumerable class.</p><h3 id="Where-method-in-Enumerable-class"><a href="#Where-method-in-Enumerable-class" class="headerlink" title="Where() method in Enumerable class"></a>Where() method in Enumerable class</h3><p>Let’s look at the <code>.Where()</code> method source code and <code>WhereEnumerableIterator</code> class from the Microsoft source.</p><figure class="highlight csharp hljs"><figcaption><span>Enumerable.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Enumerable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IEnumerable&lt;TSource&gt; Where&lt;TSource&gt;(<span class="hljs-keyword">this</span> IEnumerable&lt;TSource&gt; source, Func&lt;TSource, <span class="hljs-keyword">bool</span>&gt; predicate) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (source == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> Error.ArgumentNull(<span class="hljs-string">"source"</span>);</span><br><span class="line">        <span class="hljs-keyword">if</span> (predicate == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> Error.ArgumentNull(<span class="hljs-string">"predicate"</span>);</span><br><span class="line">        <span class="hljs-keyword">if</span> (source <span class="hljs-keyword">is</span> Iterator&lt;TSource&gt;) <span class="hljs-keyword">return</span> ((Iterator&lt;TSource&gt;)source).Where(predicate);</span><br><span class="line">        <span class="hljs-keyword">if</span> (source <span class="hljs-keyword">is</span> TSource[]) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WhereArrayIterator&lt;TSource&gt;((TSource[])source, predicate);</span><br><span class="line">        <span class="hljs-keyword">if</span> (source <span class="hljs-keyword">is</span> List&lt;TSource&gt;) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WhereListIterator&lt;TSource&gt;((List&lt;TSource&gt;)source, predicate);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WhereEnumerableIterator&lt;TSource&gt;(source, predicate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//... some other methods go here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As said in the previous post, there are overloads for <code>.Where</code> method. One for the Expression and the other for the Func. Now the above one called as we are passing a Func to the second parameter.</p><p>The <code>.Where()</code> Extension method on the Enumerable class is returning an instance of <code>WhereEnumerableIterator</code> class. </p><h3 id="WhereEnumerableIterator-class"><a href="#WhereEnumerableIterator-class" class="headerlink" title="WhereEnumerableIterator class"></a>WhereEnumerableIterator class</h3><p>Here is the implementation of WhereEnumerableIterator class.</p><figure class="highlight csharp hljs"><figcaption><span>WhereEnumerableIterator.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">class WhereEnumerableIterator&lt;TSource&gt; : Iterator&lt;TSource&gt;</span><br><span class="line">&#123;</span><br><span class="line">    IEnumerable&lt;TSource&gt; source;</span><br><span class="line">    Func&lt;TSource, <span class="hljs-keyword">bool</span>&gt; predicate;</span><br><span class="line">    IEnumerator&lt;TSource&gt; enumerator;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WhereEnumerableIterator</span>(<span class="hljs-params">IEnumerable&lt;TSource&gt; source, Func&lt;TSource, <span class="hljs-keyword">bool</span>&gt; predicate</span>)</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.source = source;</span><br><span class="line">        <span class="hljs-keyword">this</span>.predicate = predicate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> Iterator&lt;TSource&gt; <span class="hljs-title">Clone</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WhereEnumerableIterator&lt;TSource&gt;(source, predicate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Dispose</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (enumerator <span class="hljs-keyword">is</span> IDisposable) ((IDisposable)enumerator).Dispose();</span><br><span class="line">        enumerator = <span class="hljs-literal">null</span>;</span><br><span class="line">        <span class="hljs-keyword">base</span>.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">MoveNext</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">switch</span> (state) &#123;</span><br><span class="line">            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:</span><br><span class="line">                enumerator = source.GetEnumerator();</span><br><span class="line">                state = <span class="hljs-number">2</span>;</span><br><span class="line">                <span class="hljs-keyword">goto</span> <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>;</span><br><span class="line">            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:</span><br><span class="line">                <span class="hljs-keyword">while</span> (enumerator.MoveNext()) &#123;</span><br><span class="line">                    TSource item = enumerator.Current;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (predicate(item)) &#123;</span><br><span class="line">                        current = item;</span><br><span class="line">                        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Dispose();</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> IEnumerable&lt;TResult&gt; Select&lt;TResult&gt;(Func&lt;TSource, TResult&gt; selector) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WhereSelectEnumerableIterator&lt;TSource, TResult&gt;(source, predicate, selector);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> IEnumerable&lt;TSource&gt; <span class="hljs-title">Where</span>(<span class="hljs-params">Func&lt;TSource, <span class="hljs-keyword">bool</span>&gt; predicate</span>)</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WhereEnumerableIterator&lt;TSource&gt;(source, CombinePredicates(<span class="hljs-keyword">this</span>.predicate, predicate));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <a href="https://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,44b8532e11187695" target="_blank" rel="noopener">WhereEnumerableIterator</a> class will implement the <a href="https://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,00f3550fbfefd123" target="_blank" rel="noopener">Iterator</a> class. The <code>Iterator</code> is an abstract class which implements <code>IEnumerable</code> and <code>IEnumerator</code> interfaces except the <code>MoveNext()</code> method. So, our WhereEnumerableIterator class will implement the iterator pattern and has the <code>MoveNext()</code> method implemented.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p><h3 id="What-happened-to-our-func-and-its-execution"><a href="#What-happened-to-our-func-and-its-execution" class="headerlink" title="What happened to our func and its execution"></a>What happened to our func and its execution</h3><p>Let’s come back to our query on the Customers entity</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;Customer, <span class="hljs-keyword">bool</span>&gt; funcPred = p =&gt; p.FirstName == <span class="hljs-string">"Design Engineer"</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> names = context.Customers.Where(funcPredicate);</span><br></pre></td></tr></table></figure><p>Let me pull the <code>MoveNext()</code> method of <code>WhereEnumerableIterator</code> class so that it will be clear.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">MoveNext</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">switch</span> (state) &#123;</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:</span><br><span class="line">            enumerator = source.GetEnumerator();</span><br><span class="line">            state = <span class="hljs-number">2</span>;</span><br><span class="line">            <span class="hljs-keyword">goto</span> <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">while</span> (enumerator.MoveNext()) &#123;</span><br><span class="line">                TSource item = enumerator.Current;</span><br><span class="line">                <span class="hljs-keyword">if</span> (predicate(item)) &#123;</span><br><span class="line">                    current = item;</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Dispose();</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As we iterate the items in the <code>names</code> in a foreach or when .ToList() is called on the names, <strong>every item from the customer table is pulled from the database with the enumerator.Current and compared against the predicate(the func delegate in our case) that we pass in.</strong></p><h3 id="The-difference"><a href="#The-difference" class="headerlink" title="The difference?"></a>The difference?</h3><p>The difference in query execution is fairly large because expression trees and func delegates on the entities take a different approach in execution.</p><p>If we pass an expression tree to <code>.Where()</code> method then the execution will be different as the query is translated into an appropriate query based on the query provider (SQL statements for SQL Provider).</p><p>If we pass a func delegate to <code>.Where()</code> method then the appropriate records from the database are pulled and compared against the predicate and will return the result.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><br>Entity Framework implements a provider model for different databases such as SQL, Oracle, MySQL, PostgreSQL etc. These query providers will have to translate the IQueryables into SQL as the query for a database will be different for different databases.</p><p>The translation for the expression trees will be interesting as it involves providers, translations, expression visitors etc. As this is not a topic for this article I’m not pulling those topics.</p><p>If you are interested in finding how the expression tree translation works look at the references section.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://putridparrot.com/blog/creating-a-custom-linq-provider/" target="_blank" rel="noopener">http://putridparrot.com/blog/creating-a-custom-linq-provider/</a></li><li><a href="https://weblogs.asp.net/dixin/understanding-linq-to-sql-10-implementing-linq-to-sql-provider" target="_blank" rel="noopener">https://weblogs.asp.net/dixin/understanding-linq-to-sql-10-implementing-linq-to-sql-provider</a></li><li><a href="https://referencesource.microsoft.com/#System.Data.Linq/SqlClient/SqlProvider.cs" target="_blank" rel="noopener">https://referencesource.microsoft.com/#System.Data.Linq/SqlClient/SqlProvider.cs</a></li><li><a href="https://blogs.msdn.microsoft.com/mattwar/2007/07/30/linq-building-an-iqueryable-provider-part-i/" target="_blank" rel="noopener">https://blogs.msdn.microsoft.com/mattwar/2007/07/30/linq-building-an-iqueryable-provider-part-i/</a></li><li><a href="https://blogs.msdn.microsoft.com/mattwar/2007/07/31/linq-building-an-iqueryable-provider-part-ii/" target="_blank" rel="noopener">https://blogs.msdn.microsoft.com/mattwar/2007/07/31/linq-building-an-iqueryable-provider-part-ii/</a></li></ul>]]></content>
    
    <summary type="html">
    
      Func delegates will not be translated to SQL statements. In this post, we will explore  why the func delegate is not translated to SQL and what is the difference that for a Func and an Expression tree.
    
    </summary>
    
      <category term="csharp" scheme="https://coderethinked.com/categories/csharp/"/>
    
      <category term="linq" scheme="https://coderethinked.com/categories/csharp/linq/"/>
    
    
      <category term="csharp" scheme="https://coderethinked.com/tags/csharp/"/>
    
      <category term="linq" scheme="https://coderethinked.com/tags/linq/"/>
    
      <category term="expression trees" scheme="https://coderethinked.com/tags/expression-trees/"/>
    
      <category term="func" scheme="https://coderethinked.com/tags/func/"/>
    
  </entry>
  
  <entry>
    <title>Unit tests for private methods?</title>
    <link href="https://coderethinked.com/unit-tests-for-private-methods/"/>
    <id>https://coderethinked.com/unit-tests-for-private-methods/</id>
    <published>2018-12-04T01:30:39.000Z</published>
    <updated>2019-08-17T02:24:04.711Z</updated>
    
    <content type="html"><![CDATA[<p>This post as you read from the title is about unit testing for private methods. Do we really need to test the private methods in the unit tests?<br><a id="more"></a></p><h3 id="Unit-testing-private-methods"><a href="#Unit-testing-private-methods" class="headerlink" title="Unit testing private methods"></a>Unit testing private methods</h3><p>Private methods are used to have the abstraction in classes and some times created for code resuability purposes.</p><p>If you are writing MS Tests for unit testing, then Microsoft provides a <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.testtools.unittesting.privateobject?redirectedfrom=MSDN&amp;view=mstest-net-1.2.0" target="_blank" rel="noopener">Private Object</a> class through which you can test the private methods. But, I don’t think this is a good idea.</p><p>If you want to test the private methods and achieve code coverage for the lines of code in the private methods the only way I see is to write more tests for the public API which utilizes the private method. </p><p>But, the output of the public API method can be different from the output of the private methods, in that case, we will have to assert only the value returned from the public API method.</p><h3 id="Too-much-logic-in-the-private-methods"><a href="#Too-much-logic-in-the-private-methods" class="headerlink" title="Too much logic in the private methods"></a>Too much logic in the private methods</h3><p>What if we had too much logic in the private method? Well, you could write many tests for your public API. This is not a bad idea. But, don’t you see a hidden class in the private method (refactor the private method logic to have a separate class).</p><p>Extract that private method logic to a class and test the class instead of writing too many tests for the public API method.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p><h3 id="The-code-base-is-too-old-and-NO-TESTS-yet"><a href="#The-code-base-is-too-old-and-NO-TESTS-yet" class="headerlink" title="The code base is too old and NO TESTS yet"></a>The code base is too old and NO TESTS yet</h3><p>Okay, this might be a special case. Think that the code base is old and is not having any unit tests until now. But the management now wants to have unit tests for the bug fix. The code is also not clean. The methods have too many lines of code and have some business logic to modify the fields and save it to the database.</p><p>As you figured out the fix and it is in the middle of that very long method. Also, we need to write unit tests for the fix, so we create a new private method for our fix and that should be tested or you could include your code code to make it even harder to read.</p><p>If we begin writing tests for the method, it would certainly take a very long time to write tests and pass them.</p><p>We can deal with the above problem in two ways</p><ol><li>Stub the portions of the code into a public method so that you can mock them in your tests and you can validate your fix alone in the unit tests.</li><li>Writing tests for the entire method. </li></ol><p>The first approach is damn easy! All you have to do is create some methods and make them public. But isn’t this bad way of doing things? You are exposing the inner workings of your algorithm/program through an interface just for the purpose of writing unit tests.</p><p>Now, for the second approach of writing tests for the complete method, it involves you to understand the method and then write tests or mock the objects accordingly. </p><p>Instead of writing tests for the existing method, I think it is better to have a separate class (if you see the class hidden in a method) because you know the functionality/business logic of the code. So, if you can write everything in a separate method then you can just write tests for your class instead of testing the public API.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Writing unit tests is a good thing but if we have a private method I think making it public is a bad idea as it breaks the abstraction that we wanted in our code.</p><p>Private methods are not that bad, it signals that you are missing an abstraction.</p><ul><li>Don’t aim to unit test the private methods just test the public API.</li><li>If you think there’s more logic in the private methods that need to be tested, write it in a separate class file.<ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></li></ul>]]></content>
    
    <summary type="html">
    
      Writing unit tests for private methods? Do we really need to private methods? What can be an alternative to writing unit tests for private methods?
    
    </summary>
    
      <category term="unit testing" scheme="https://coderethinked.com/categories/unit-testing/"/>
    
    
      <category term="csharp" scheme="https://coderethinked.com/tags/csharp/"/>
    
      <category term="unit testing" scheme="https://coderethinked.com/tags/unit-testing/"/>
    
      <category term="private methods" scheme="https://coderethinked.com/tags/private-methods/"/>
    
  </entry>
  
  <entry>
    <title>Don&#39;t use Func delegate on the Entity Framework entities</title>
    <link href="https://coderethinked.com/don-t-use-func-delegate-on-the-ef-entities/"/>
    <id>https://coderethinked.com/don-t-use-func-delegate-on-the-ef-entities/</id>
    <published>2018-11-03T02:24:59.000Z</published>
    <updated>2019-08-17T02:24:04.556Z</updated>
    
    <content type="html"><![CDATA[<p>In this post, I’ll show you what happens when you use a func delegate on the Entity Framework entities.<br><a id="more"></a><br>I have seen a case where a developer wrote a LINQ query with Func delegate which will get the data from the database and returns back to the UI.</p><p>The query was working fine but it needs performance tuning as it is taking more time for a simple query.</p><h3 id="Example-LINQ-Query"><a href="#Example-LINQ-Query" class="headerlink" title="Example: LINQ Query"></a>Example: LINQ Query</h3><p>This is the LINQ query that we are interested in.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    Func&lt;Employee, <span class="hljs-keyword">bool</span>&gt; dynamicFilter = GetDynamicQuery();</span><br><span class="line">    <span class="hljs-keyword">var</span> results = EmployeeContext.Employee.Where(dynamicFilter).Count();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Func&lt;Employee, <span class="hljs-keyword">bool</span>&gt; <span class="hljs-title">GetDynamicQuery</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    Func&lt;Employee, <span class="hljs-keyword">bool</span>&gt; e;</span><br><span class="line">    <span class="hljs-comment">//the lambda expressions set to the result "e" are dynamically obtained.</span></span><br><span class="line">    <span class="hljs-comment">//For the purpose here, let's assume we are getting the following</span></span><br><span class="line">    <span class="hljs-comment">//lambda expression</span></span><br><span class="line">    e = p =&gt; p.JobTitle == <span class="hljs-string">"Design Engineer"</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above code will execute and will return the employees whose have the designation as “Design Engineer” (it is actually dynamic based on few other conditions).<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><br><em><a href="http://coderethinked.com/building-dynamic-linq-queries-using-expression-trees-and-func">Check out this article if you are interested in writing dynamic queries with Expression Trees</a></em></p><p>If you don’t know what will happen under the hood then you will fail to refactor this and will certainly write a stored procedure to improve the performance.</p><h3 id="Background-on-LINQ-query-execution"><a href="#Background-on-LINQ-query-execution" class="headerlink" title="Background on LINQ query execution"></a>Background on LINQ query execution</h3><p>When a LINQ query is executed, it finds the Expressions in the query and will translate into appropriate SQL queries and will be submitted to the server. This gives us the result.</p><h3 id="Ok-why-it-took-more-time"><a href="#Ok-why-it-took-more-time" class="headerlink" title="Ok, why it took more time"></a>Ok, why it took more time</h3><p>Now, let’s understand why it took more time to return the result.</p><p>The <code>.Where</code> extension method has two overloads. One that implements <code>IQueryable</code>, which takes <code>Expression</code> parameter and the other that implements <code>IEnumerable</code>, which takes a <code>Func</code>.</p><ul><li>The <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.queryable.where?view=netframework-4.7.2#System_Linq_Queryable_Where__1_System_Linq_IQueryable___0__System_Linq_Expressions_Expression_System_Func___0_System_Int32_System_Boolean___" target="_blank" rel="noopener">IQueryable overload</a> of Where</li></ul><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IQueryable&lt;TSource&gt; Where&lt;TSource&gt; (<span class="hljs-keyword">this</span> IQueryable&lt;TSource&gt; source, Expression&lt;Func&lt;TSource,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">bool</span>&gt;&gt; predicate);</span><br></pre></td></tr></table></figure><ul><li>The <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.where?view=netframework-4.7.2#System_Linq_Enumerable_Where__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32_System_Boolean__" target="_blank" rel="noopener">IEnumerable overload</a> of Where</li></ul><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (<span class="hljs-keyword">this</span> IEnumerable&lt;TSource&gt; source, Func&lt;TSource,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">bool</span>&gt; predicate);</span><br></pre></td></tr></table></figure><p>Now, in our case, the predicate here is a <code>Func</code>. So, the second version of the <code>.Where</code> that implements <code>IEnumerable</code> will be used.</p><p>One important thing to note here is that Entity Framework will consider only IQueryable’s to translate into SQL. So, if we use the IEnumerable extension for the entities that will not be translated.</p><p>With that in mind, let’s examine our Query on the Employee entity.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;Employee, <span class="hljs-keyword">bool</span>&gt; dynamicFilter = p =&gt; p.JobTitle == <span class="hljs-string">"Design Engineer"</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> results = EmployeeContext.Employee.Where(dynamicFilter);</span><br></pre></td></tr></table></figure><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p>If you can check the output of the operation you can see that we are getting correct results.</p><p>But, the fact is that our <em>Func delegate is not translated into SQL</em>. So, only the <code>EmployeeContext.Employee</code> is translated into appropriate SQL query and will be sent to SQL server.</p><p>That will fetch all the records of the employee table and load into memory and will perform an IEnumerable where filter on the whole collection to find the appropriate employee whose designation is “Design Engineer”.</p><p>If the <code>Employee</code> table is huge then the query will take more time to fetch the records.</p><p>Let’s see this in action with <a href="https://www.linqpad.net/" target="_blank" rel="noopener">LINQPad</a>.</p><p>For the purpose of this article, I’ve restored <code>AdventureWorks2014</code> database on my machine.</p><figure class="highlight csharp hljs"><figcaption><span>with func delegate</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;Employee, <span class="hljs-keyword">bool</span>&gt; funcPred  = p =&gt; p.JobTitle == <span class="hljs-string">"Design Engineer"</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> total = Employees.Where(funcPred).Count();</span><br></pre></td></tr></table></figure><figure class="highlight sql hljs"><figcaption><span>SQL query generated for Func in LINQPad</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> [t0].[BusinessEntityID], [t0].[NationalIDNumber], [t0].[LoginID], [t0].[OrganizationNode], [t0].[OrganizationLevel], [t0].[JobTitle], [t0].[BirthDate], [t0].[MaritalStatus], [t0].[Gender], [t0].[HireDate], [t0].[SalariedFlag], [t0].[VacationHours], [t0].[SickLeaveHours], [t0].[CurrentFlag], [t0].[rowguid] <span class="hljs-keyword">AS</span> [Rowguid], [t0].[ModifiedDate]</span><br><span class="line"><span class="hljs-keyword">FROM</span> [HumanResources].[Employee] <span class="hljs-keyword">AS</span> [t0]</span><br></pre></td></tr></table></figure><p>Look at the SQL generated for the above code, it just pulled everything from the Employee table. And, once we get the entire table to in-memory, LINQ will perform the filter on the entire list of employees and returns the result.</p><p>The solution to this problem is to wrap the Func with Expression.</p><h3 id="Solution-Go-for-Expression-lt-Func-gt"><a href="#Solution-Go-for-Expression-lt-Func-gt" class="headerlink" title="Solution: Go for Expression&lt;Func&gt;"></a>Solution: Go for Expression&lt;Func<t>&gt;</t></h3><p>Let’s wrap Expression around Func and see the results.</p><figure class="highlight csharp hljs"><figcaption><span>With expression wrapped around func</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Expression&lt;Func&lt;Employee, <span class="hljs-keyword">bool</span>&gt;&gt; funcPred  = p =&gt; p.JobTitle == <span class="hljs-string">"Design Engineer"</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> total = Employees.Where(funcPred).Count();</span><br></pre></td></tr></table></figure><p>The sql generated for the above code is<br><figure class="highlight sql hljs"><figcaption><span>SQL query generated for Expression in LINQPad</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">DECLARE</span> @p0 <span class="hljs-keyword">NVarChar</span>(<span class="hljs-number">1000</span>) = <span class="hljs-string">'Design Engineer'</span></span><br><span class="line"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">AS</span> [<span class="hljs-keyword">value</span>]</span><br><span class="line"><span class="hljs-keyword">FROM</span> [HumanResources].[Employee] <span class="hljs-keyword">AS</span> [t0]</span><br><span class="line"><span class="hljs-keyword">WHERE</span> [t0].[JobTitle] = @p0</span><br></pre></td></tr></table></figure><br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><br>As you can see we have got the exact SQL query for the LINQ query we wrote. The above query doesn’t take much time as the query directly returns the result instead of returning everything in the tables.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>If we mix these Func delegates in C# with the Entity framework entities then this would happen.</p><p>If you don’t understand the inner workings of the LINQ to SQL translation, you will end up querying the entire table in LINQ. More importantly, you will get the result but the query is slow.</p>]]></content>
    
    <summary type="html">
    
      Why LINQ query is slow. Func delegate on Entity framework causes performance issue. In this post, I&#39;ll talk about how the func delegate causes performance implications on Entity framework entities.
    
    </summary>
    
      <category term="csharp" scheme="https://coderethinked.com/categories/csharp/"/>
    
      <category term="performance" scheme="https://coderethinked.com/categories/csharp/performance/"/>
    
    
      <category term="csharp" scheme="https://coderethinked.com/tags/csharp/"/>
    
      <category term="linq" scheme="https://coderethinked.com/tags/linq/"/>
    
      <category term="func" scheme="https://coderethinked.com/tags/func/"/>
    
      <category term="performance" scheme="https://coderethinked.com/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>Building dynamic LINQ queries using Expression Trees and Func</title>
    <link href="https://coderethinked.com/building-dynamic-linq-queries-using-expression-trees-and-func/"/>
    <id>https://coderethinked.com/building-dynamic-linq-queries-using-expression-trees-and-func/</id>
    <published>2018-10-25T04:56:48.000Z</published>
    <updated>2019-08-17T02:24:04.494Z</updated>
    
    <content type="html"><![CDATA[<p>Filtering an item from a list of items is easy but if the item to filter is not known at compile time then filtering a list will be little complicated.<br><a id="more"></a><br>Instead of writing dynamic filtering in C#, one might go for a <code>Stored Procedure</code> and write a dynamic query based on the input column name and execute the dynamic SQL statement.</p><p>In this post, we will see how to build the dynamic LINQ queries. Building dynamic LINQ expressions is easy but you need to have an idea on <a href="https://docs.microsoft.com/en-us/dotnet/api/system.func-2?view=netframework-4.7.2" target="_blank" rel="noopener">Func&lt;T, TResult&gt;</a> and <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/expression-trees/" target="_blank" rel="noopener">Expression Trees</a> before we begin.</p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="The-User-class"><a href="#The-User-class" class="headerlink" title="The User class"></a>The User class</h3><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> ID &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> FirstName &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> LastName &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Querying-on-Seed-data"><a href="#Querying-on-Seed-data" class="headerlink" title="Querying on Seed data"></a>Querying on Seed data</h3><p>For the purpose of the article, we will have the following list of user data.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;User&gt; <span class="hljs-title">UserDataSeed</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> List&lt;User&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">new</span> User&#123; ID = <span class="hljs-number">1</span>, FirstName = <span class="hljs-string">"Kevin"</span>, LastName = <span class="hljs-string">"Garnett"</span>&#125;,</span><br><span class="line">        <span class="hljs-keyword">new</span> User&#123; ID = <span class="hljs-number">2</span>, FirstName = <span class="hljs-string">"Stephen"</span>, LastName = <span class="hljs-string">"Curry"</span>&#125;,</span><br><span class="line">        <span class="hljs-keyword">new</span> User&#123; ID = <span class="hljs-number">3</span>, FirstName = <span class="hljs-string">"Kevin"</span>, LastName = <span class="hljs-string">"Durant"</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="What-is-a-Func-delegate"><a href="#What-is-a-Func-delegate" class="headerlink" title="What is a Func delegate?"></a>What is a Func delegate?</h3><blockquote><p>Encapsulates a method that has one parameter and returns a value of the type specified by the TResult parameter. - from MSDN</p></blockquote><p>Func<t> is a delegate type for a method that returns the value of the type T. You can use Func to reference a method.</t></p><p>For example, if we want to multiply two numbers, then with Func delegate we can write the following code</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//Func will take two integers as arguments to multiply</span></span><br><span class="line"><span class="hljs-comment">//and will return the output as integers</span></span><br><span class="line">Func&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; multiply = (num1, num2) =&gt; num1 * num2;</span><br><span class="line">Console.WriteLine(multiply(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>));</span><br></pre></td></tr></table></figure><p>Back to our original dynamic LINQ, we’ll use Func delegate to have dynamic LINQ queries.</p><h3 id="Dynamic-Querying-with-Func"><a href="#Dynamic-Querying-with-Func" class="headerlink" title="Dynamic Querying with Func"></a>Dynamic Querying with Func</h3><p>If we want to get the specific ID of the user in a list of users then we will write the following LINQ on the list of users for different properties on the User model.</p><p>For filtering the ID property:</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userData.Where(d =&gt; d.ID == val).ToList();</span><br></pre></td></tr></table></figure><p>For FirstName?<br><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userData.Where(d =&gt; d.FirstName == val).ToList();</span><br></pre></td></tr></table></figure></p><p>Last name?<br><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userData.Where(d =&gt; d.LastName == val).ToList();</span><br></pre></td></tr></table></figure></p><p>From our console app, we will supply a <code>property name</code> to filter on. So, can we have a switch statement to do this? (I know some of you don’t like the switch-case statement).</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Func&lt;User, <span class="hljs-keyword">bool</span>&gt; <span class="hljs-title">GetDynamicQueryWithFunc</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> propName, <span class="hljs-keyword">object</span> val</span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    Func&lt;User, <span class="hljs-keyword">bool</span>&gt; exp = (t) =&gt; <span class="hljs-literal">true</span>;</span><br><span class="line">    <span class="hljs-keyword">switch</span> (propName)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-string">"ID"</span>:</span><br><span class="line">            exp = d =&gt; d.ID == Convert.ToInt32(val);</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-string">"FirstName"</span>:</span><br><span class="line">            exp = f =&gt; f.FirstName == Convert.ToString(val);</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-string">"LastName"</span>:</span><br><span class="line">            exp = l =&gt; l.LastName == Convert.ToString(val);</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-keyword">default</span>:</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> exp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the above code snippet, we declared a Func delegate (exp) at the top and based on the property name we will assign the necessary lambda expression to the func delegate and return the delegate back to the caller.</p><p>Once we get the Func delegate from the method, we will apply that delegate on a list of user data.<br><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> dynamicExpression = GetDynamicQueryWithFunc(propertyName, <span class="hljs-keyword">value</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> output = userData.Where(dynamicExpression).ToList();</span><br></pre></td></tr></table></figure></p><p>I don’t like the above solution, although it solves the problem. Because, the code violates <a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle" target="_blank" rel="noopener">Open-Closed principle</a> and the code use switch-case statement.</p><p>Let’s do the real dynamic LINQ querying with Expression trees.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p><h3 id="What-is-an-Expression-Tree"><a href="#What-is-an-Expression-Tree" class="headerlink" title="What is an Expression Tree?"></a>What is an Expression Tree?</h3><p>An expression tree is a binary tree that will represent expressions. So, we have to build the expressions for the tree.</p><p>In C#, the expression trees concept is used to translate code into data.</p><p>With expression trees, we produce a data structure that represents your code.</p><p>Why do we need the expression trees now? We’ll use the expression trees to build our code as a data structure and we compile the expression tree to get a func delegate which can be used to filter the items.</p><p>Please read <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/expression-trees/" target="_blank" rel="noopener">expresson trees from msdn</a></p><h3 id="Building-dynamically-with-Expression-trees"><a href="#Building-dynamically-with-Expression-trees" class="headerlink" title="Building dynamically with Expression trees"></a>Building dynamically with Expression trees</h3><p>To represent <code>x =&gt; x.LastName == &quot;Curry&quot;</code> in expression trees, we have to write the following code.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Func&lt;User, <span class="hljs-keyword">bool</span>&gt; <span class="hljs-title">GetDynamicQueryWithExpresionTrees</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> propertyName, <span class="hljs-keyword">string</span> val</span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-comment">//x =&gt;</span></span><br><span class="line">    <span class="hljs-keyword">var</span> param = Expression.Parameter(<span class="hljs-keyword">typeof</span>(User), <span class="hljs-string">"x"</span>);</span><br><span class="line">    <span class="hljs-comment">//val ("Curry")</span></span><br><span class="line">    <span class="hljs-keyword">var</span> valExpression = Expression.Constant(val, <span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">string</span>));</span><br><span class="line">    <span class="hljs-comment">//x.LastName == "Curry"</span></span><br><span class="line">    Expression body = Expression.Equal(member, valExpression);</span><br><span class="line">    <span class="hljs-comment">//x =&gt; x.LastName == "Curry"</span></span><br><span class="line">    <span class="hljs-keyword">var</span> final = Expression.Lambda&lt;Func&lt;User, <span class="hljs-keyword">bool</span>&gt;&gt;(body: body, parameters: param);</span><br><span class="line">    <span class="hljs-comment">//compiles the expression tree to a func delegate</span></span><br><span class="line">    <span class="hljs-keyword">return</span> final.Compile();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the above code we have the following line<br><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> valExpression = Expression.Constant(val, <span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">string</span>));</span><br></pre></td></tr></table></figure></p><p>This makes the constant expression of type string but what if we give ID as the input to the program and run it. Well, it breaks with the following exception.</p><blockquote><p>System.InvalidOperationException: ‘The binary operator Equal is not defined for the types ‘System.Int32’ and ‘System.String’.’</p></blockquote><p>To fix this we have to get rid of that line and we will use the <code>TypeDescriptor</code> to convert our value to the appropriate type.</p><p>As said, the following code will convert from a string to its own type of data.<br><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> param = Expression.Parameter(<span class="hljs-keyword">typeof</span>(User), <span class="hljs-string">"x"</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> member = Expression.Property(param, propertyName);</span><br><span class="line"><span class="hljs-keyword">var</span> propertyType = ((PropertyInfo)member.Member).PropertyType;</span><br><span class="line"><span class="hljs-keyword">var</span> converter = TypeDescriptor.GetConverter(propertyType);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (!converter.CanConvertFrom(<span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">string</span>)))</span><br><span class="line">    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotSupportedException();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//will give the integer value if the string is integer</span></span><br><span class="line"><span class="hljs-keyword">var</span> propertyValue = converter.ConvertFromInvariantString(val); </span><br><span class="line"><span class="hljs-keyword">var</span> constant = Expression.Constant(propertyValue);</span><br></pre></td></tr></table></figure></p><p>You can also use <code>int.TryParse</code> to test if the string is an integer. If we chose this approach then we have to use if/else or switch-case statements to make that constant expression and also have to handle the value expression.</p><p>With the <code>TypeDescriptor</code> now in place let’s see the entire code.</p><figure class="highlight csharp hljs"><figcaption><span>DynamicLambdas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="hljs-string">"Specify the property to filter"</span>);</span><br><span class="line">    <span class="hljs-keyword">string</span> propertyName = Console.ReadLine();</span><br><span class="line">    Console.WriteLine(<span class="hljs-string">"Value to search against: "</span> + propertyName);</span><br><span class="line">    <span class="hljs-keyword">string</span> <span class="hljs-keyword">value</span> = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//1: With Func delegate</span></span><br><span class="line">    <span class="hljs-comment">//var dynamicExpression = GetDynamicQueryWithFunc(propertyName, value);</span></span><br><span class="line">    <span class="hljs-comment">//var output = userData.Where(dynamicExpression).ToList();</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//2: With Expression trees that generate Func and handles dynamic types with TypeDescriptor</span></span><br><span class="line">    <span class="hljs-keyword">var</span> dn = GetDynamicQueryWithExpresionTrees(propertyName, <span class="hljs-keyword">value</span>);</span><br><span class="line">    <span class="hljs-keyword">var</span> output = userData.Where(dn).ToList();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> output)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="hljs-string">"Filtered result:"</span>);</span><br><span class="line">        Console.WriteLine(<span class="hljs-string">$"\t ID: <span class="hljs-subst">&#123;item.ID&#125;</span>"</span>);</span><br><span class="line">        Console.WriteLine(<span class="hljs-string">$"\t First Name: <span class="hljs-subst">&#123;item.FirstName&#125;</span>"</span>);</span><br><span class="line">        Console.WriteLine(<span class="hljs-string">$"\t Last Name: <span class="hljs-subst">&#123;item.LastName&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//USER DATA SEED</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;User&gt; <span class="hljs-title">UserDataSeed</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> List&lt;User&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">new</span> User&#123; ID = <span class="hljs-number">1</span>, FirstName = <span class="hljs-string">"Kevin"</span>, LastName = <span class="hljs-string">"Garnett"</span>&#125;,</span><br><span class="line">        <span class="hljs-keyword">new</span> User&#123; ID = <span class="hljs-number">2</span>, FirstName = <span class="hljs-string">"Stephen"</span>, LastName = <span class="hljs-string">"Curry"</span>&#125;,</span><br><span class="line">        <span class="hljs-keyword">new</span> User&#123; ID = <span class="hljs-number">3</span>, FirstName = <span class="hljs-string">"Kevin"</span>, LastName = <span class="hljs-string">"Durant"</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Func&lt;User, <span class="hljs-keyword">bool</span>&gt; <span class="hljs-title">GetDynamicQueryWithExpresionTrees</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> propertyName, <span class="hljs-keyword">string</span> val</span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> param = Expression.Parameter(<span class="hljs-keyword">typeof</span>(User), <span class="hljs-string">"x"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">#<span class="hljs-meta-keyword">region</span> Convert to specific data type</span></span><br><span class="line">    MemberExpression member = Expression.Property(param, propertyName);</span><br><span class="line">    UnaryExpression valueExpression = GetValueExpression(propertyName, val, param);</span><br><span class="line">    <span class="hljs-meta">#<span class="hljs-meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    Expression body = Expression.Equal(member, valueExpression);</span><br><span class="line">    <span class="hljs-keyword">var</span> final = Expression.Lambda&lt;Func&lt;User, <span class="hljs-keyword">bool</span>&gt;&gt;(body: body, parameters: param);</span><br><span class="line">    <span class="hljs-keyword">return</span> final.Compile();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> UnaryExpression <span class="hljs-title">GetValueExpression</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> propertyName, <span class="hljs-keyword">string</span> val, ParameterExpression param</span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> member = Expression.Property(param, propertyName);</span><br><span class="line">    <span class="hljs-keyword">var</span> propertyType = ((PropertyInfo)member.Member).PropertyType;</span><br><span class="line">    <span class="hljs-keyword">var</span> converter = TypeDescriptor.GetConverter(propertyType);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!converter.CanConvertFrom(<span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">string</span>)))</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotSupportedException();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">var</span> propertyValue = converter.ConvertFromInvariantString(val);</span><br><span class="line">    <span class="hljs-keyword">var</span> constant = Expression.Constant(propertyValue);</span><br><span class="line">    <span class="hljs-keyword">return</span> Expression.Convert(constant, propertyType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above code blocks is a tabbed content check the second tab for the dynamic LINQ generation using Expression Trees.</p><p>Let’s try the code in dotnet fiddle and see it in action.</p><iframe width="100%" height="400" src="https://dotnetfiddle.net/Widget?Languages=CSharp&CSharp_FiddleId=AJ9AHL" frameborder="0"></iframe><p>In the output window of the dotnet fiddle, try with ID property with the value within 1, 2, 3 or FirstName/LastName with the names “Kevin”/“Curry”.</p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="Cases-not-handled-in-the-code"><a href="#Cases-not-handled-in-the-code" class="headerlink" title="Cases not handled in the code"></a>Cases not handled in the code</h3><p>Note that the following cases were not handled in the above code.</p><ul><li>Giving property names with spaces will cause the program to throw an exception as the property with names(ex: First name) is not in the User model.</li><li>Providing a value that is not in the user seed data will cause the program to end without providing any result.</li></ul><h3 id="Source-Code-on-GitLab"><a href="#Source-Code-on-GitLab" class="headerlink" title="Source Code on GitLab"></a>Source Code on GitLab</h3><p>The source code of the above example snippets and demo in the dotnetfiddle <a href="https://gitlab.com/karthikreddy509/dynamiclambdas" target="_blank" rel="noopener">is available on GitLab</a>.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>The old way of doing things dynamic is to write a stored procedure with a ton of IF statements and build a raw SQL query and then execute it at the end.</p><p>Instead of writing the dynamic SQL queries it is better to build the Expression Trees or Func<t> and then use it against the data to filter the result so that we can test the code.</t></p><p>One might argue that we can filter a list of item dynamically with reflection, but reflection will be slow if the model class (in our case the <code>User</code> class) has too many properties.</p>]]></content>
    
    <summary type="html">
    
      Building dynamic SQL statements is cumbersome. In this post, we will see how to build the dynamic LINQ queries without using reflection. Building dynamic LINQ expressions is easy but you need to have an idea on Func&lt;T, TResult&gt; and Expression Trees.
    
    </summary>
    
      <category term="csharp" scheme="https://coderethinked.com/categories/csharp/"/>
    
      <category term="expression trees" scheme="https://coderethinked.com/categories/csharp/expression-trees/"/>
    
      <category term="linq" scheme="https://coderethinked.com/categories/csharp/expression-trees/linq/"/>
    
    
      <category term="csharp" scheme="https://coderethinked.com/tags/csharp/"/>
    
      <category term="linq" scheme="https://coderethinked.com/tags/linq/"/>
    
      <category term="expression trees" scheme="https://coderethinked.com/tags/expression-trees/"/>
    
      <category term="func" scheme="https://coderethinked.com/tags/func/"/>
    
      <category term="switch case" scheme="https://coderethinked.com/tags/switch-case/"/>
    
  </entry>
  
  <entry>
    <title>Creating custom tag helpers in ASP.NET Core</title>
    <link href="https://coderethinked.com/creating-custom-tag-helpers-in-asp-net-core/"/>
    <id>https://coderethinked.com/creating-custom-tag-helpers-in-asp-net-core/</id>
    <published>2018-10-02T00:30:40.000Z</published>
    <updated>2019-08-17T02:24:04.494Z</updated>
    
    <content type="html"><![CDATA[<p>In this post, we’ll see how to create a custom tag helper in ASP.NET Core project.</p><p>Custom tag helpers can be created by implementing TagHelper class. The Tag helper class has two methods that can be overridden.<br><a id="more"></a></p><h3 id="Tag-Helper-class"><a href="#Tag-Helper-class" class="headerlink" title="Tag Helper class:"></a>Tag Helper class:</h3><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public abstract class TagHelper : Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper &#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="Methods-of-Tag-helper-class"><a href="#Methods-of-Tag-helper-class" class="headerlink" title="Methods of Tag helper class:"></a>Methods of Tag helper class:</h3><table><thead><tr><th>Method name</th><th>Summary</th></tr></thead><tbody><tr><td>Init(Tag Helper Context)</td><td>Initializes the ITagHelper with the given context. Additions to  Items should be done within this method to ensure they’re added prior to executing the children.</td></tr><tr><td>Process(Tag Helper Context, Tag Helper Output)</td><td>Synchronously executes the TagHelper with the given context and output.</td></tr><tr><td>Process Async(Tag Helper Context, Tag Helper Output)</td><td>Asynchronously executes the TagHelper with the given context and output.</td></tr></tbody></table><p>For the purpose of this post, we’ll override the <code>Process</code> method to synchronously execute the tag helper with the context and output our <code>HTML</code>.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p><h3 id="Use-Case"><a href="#Use-Case" class="headerlink" title="Use Case"></a>Use Case</h3><p>In this article, we’ll create a label with color by default. So, the user can supply the color by providing <code>color</code> as an attribute to the <code>colorlabel</code>.</p><p>Ex:</p><figure class="highlight plain hljs"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;color-label color=&quot;red&quot;&gt;red color&lt;/color-label&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The above custom tag should output the label in red color.</p><h3 id="Implementing-TagHelper-class"><a href="#Implementing-TagHelper-class" class="headerlink" title="Implementing TagHelper class"></a>Implementing TagHelper class</h3><p>We’ll create a new <code>ColorLabelTagHelper</code> class and let’s inherit from TagHelper class which is in <code>Microsoft.AspNetCore.Razor.TagHelpers</code> namespace.</p><p>Note that <code>TagHelper</code> at the end of the class name is just a convention. We can omit the convention and just have the name directly.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">using</span> Microsoft.AspNetCore.Razor.TagHelpers;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">namespace</span> <span class="hljs-title">CustomTagHelpers.TagHelpers</span></span><br><span class="line">&#123;</span><br><span class="line">​    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ColorLabelTagHelper</span> : <span class="hljs-title">TagHelper</span></span><br><span class="line">​    &#123;</span><br><span class="line">​        <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Color &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</span><br><span class="line">​        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Process</span>(<span class="hljs-params">TagHelperContext context, TagHelperOutput output</span>)</span></span><br><span class="line"><span class="hljs-function">​</span>        &#123;</span><br><span class="line">​            output.TagName = <span class="hljs-string">"coloredlabel"</span>;</span><br><span class="line">​            <span class="hljs-keyword">var</span> colorStyle = <span class="hljs-string">$"color:<span class="hljs-subst">&#123;Color&#125;</span>"</span>;</span><br><span class="line">​            output.Attributes.SetAttribute(<span class="hljs-string">"style"</span>, colorStyle);</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The <code>Color</code> property in the above class will act as an attribute to the <code>coloredlabel</code>. So, you can set color from the HTML.</p><p>Observe how we are setting the attributes for the tag using <code>output.Attributes.SetAttribute</code>. We can set all the necessary html attributes that the element can support.</p><h3 id="Access-custom-tag-helper-in-views"><a href="#Access-custom-tag-helper-in-views" class="headerlink" title="Access custom tag helper in views"></a>Access custom tag helper in views</h3><p>Once we’ve done that we need to use this tag helper in our views with the <code>@addTagHelper</code> directive. Now, goto <code>_ViewImports.cshtml</code> file in the views folder and add the following line<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><br><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@addTagHelper *, CustomTagHelpers</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>You could specify just the namespace of our custom tag helper but here I’m adding everything in the assembly.</p><h3 id="Using-the-custom-tag-helper-in-Views"><a href="#Using-the-custom-tag-helper-in-Views" class="headerlink" title="Using the custom tag helper in Views"></a>Using the custom tag helper in Views</h3><p>Let’s go ahead and try to get our custom tag helper working.</p><p>For the purpose of this article, I’ll clear all the existing HTML tags in the <code>Index.cshtml</code> file and add our awesome <code>colorlabel</code> custom tag.</p><p>Here is how the <code>Index.cshtml</code> looks after adding the custom tag.</p><figure class="highlight plain hljs"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@&#123;</span><br><span class="line">​    ViewData[&quot;Title&quot;] = &quot;Index&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;Index&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;colorlabel color=&quot;red&quot;&gt;the red color&lt;/colorlabel&gt;</span><br></pre></td></tr></table></figure><p>Here is the output. Yay</p><img src="/creating-custom-tag-helpers-in-asp-net-core/no_color.png" title="failed markup in custom tag helper"><p>Note that we didn’t get the red color that we’ve expected. This is because we have the wrong syntax of custom tag helper in place.</p><h3 id="custom-tag-helpers-properties-to-Kebab-case"><a href="#custom-tag-helpers-properties-to-Kebab-case" class="headerlink" title="custom tag helpers properties to Kebab case"></a>custom tag helpers properties to Kebab case</h3><p>The Pascal-cased class and the property names of the tag helpers will be translated into their lower kebab case. So, in order to use our custom helper class and property, we need to use <code>&lt;color-label color=&quot;red&quot;&gt;the red color&lt;/color-label&gt;</code>.</p><p>Let’s try that in our Index.cshtml page and see it.</p><img src="/creating-custom-tag-helpers-in-asp-net-core/with_red.png" title="custom tag helper working"><p>We got our custom tag helpers working now.</p><p>Let’s take a look at the HTML generated</p><figure class="highlight plain hljs"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;coloredlabel style=&quot;color:red&quot;&gt;the red color&lt;/coloredlabel&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>We have the new tag in the HTML i.e., <code>coloredlabel</code> this is because we’ve specified the output tag name to be <code>coloredlabel</code>.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output.TagName = <span class="hljs-string">"coloredlabel"</span>;</span><br></pre></td></tr></table></figure><p>And the style attribute will be generated as any normal HTML tag would generate.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p><h3 id="Set-Content"><a href="#Set-Content" class="headerlink" title="Set Content"></a>Set Content</h3><p>The <code>SetContent</code> method will set the content of the HTML tag. Note that this method just sets the content and not the HTML.</p><p>Let’s modify our coloredlabel class to facilitate the Set content method.</p><figure class="highlight plain hljs"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;color-label color=&quot;red&quot;&gt;Should output red&lt;/color-label&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Process</span>(<span class="hljs-params">TagHelperContext context, TagHelperOutput output</span>)</span></span><br><span class="line"><span class="hljs-function">​</span>        &#123;</span><br><span class="line">​            output.TagName = <span class="hljs-string">"coloredlabel"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">var</span> colorStyle = <span class="hljs-string">$"color:<span class="hljs-subst">&#123;Color&#125;</span>"</span>;</span><br><span class="line">            output.Attributes.SetAttribute(<span class="hljs-string">"style"</span>, colorStyle);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> (Color == <span class="hljs-string">"red"</span>)</span><br><span class="line">                output.Content.SetContent(<span class="hljs-string">"Text from custom helper"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>This will just modify only the contents of the tags with red color. So, our color label will output as <strong>Text from custom helper</strong> (in red color).</p><h3 id="Pre-Content-and-Post-Content"><a href="#Pre-Content-and-Post-Content" class="headerlink" title="Pre Content and Post Content"></a>Pre Content and Post Content</h3><p>Pre content and Post content can modify the head and tail of the custom tag helper. We can modify the contents of the tag.</p><p>Let’s see how to append the content at the beginning and at the end.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">output.PreContent.Append(<span class="hljs-string">"Start: "</span>);</span><br><span class="line">output.PostContent.Append(<span class="hljs-string">" :end"</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>When the above code is executed it will output like this:</p><blockquote><p>Start: Text from custom helper :end (in red)</p></blockquote><p>Let’s try to wrap our custom tag helper content with a <em>div that has a 2px border and blue color</em>.</p><p>We’ve to add HTML content around our custom tag helper.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Process</span>(<span class="hljs-params">TagHelperContext context, TagHelperOutput output</span>)</span></span><br><span class="line"><span class="hljs-function">​</span>        &#123;</span><br><span class="line">​            output.TagName = <span class="hljs-string">"coloredlabel"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">var</span> colorStyle = <span class="hljs-string">$"color:<span class="hljs-subst">&#123;Color&#125;</span>"</span>;</span><br><span class="line">            output.Attributes.SetAttribute(<span class="hljs-string">"style"</span>, colorStyle);</span><br><span class="line"></span><br><span class="line">            output.PreContent.SetHtmlContent(<span class="hljs-string">"&lt;div style='border: 2px solid blue; padding: 5px'&gt;"</span>);</span><br><span class="line">            output.PostContent.SetHtmlContent(<span class="hljs-string">"&lt;/div&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p>Notice how we are ending the div tag with <code>PostContent</code>.</p><p>This is how it looks like</p><img src="/creating-custom-tag-helpers-in-asp-net-core/with_border.png" title="Custom tag helpers with border"><p>Let’s examine the generated HTML for the above code.</p><figure class="highlight plain hljs"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;coloredlabel style=&quot;color:red&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=&quot;border: 2px solid blue; padding: 5px&quot;&gt;Should output red&lt;/div&gt;&lt;/coloredlabel&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>So, we got our <code>&lt;div&gt;</code> element inside of <code>coloredlabel</code> tag because we’ve used PreContent and Postcontent. As the word says, it just the content that is going to wrap not the HTML.</p><h3 id="How-to-wrap-up-the-custom-helper-PreElement-PostElement"><a href="#How-to-wrap-up-the-custom-helper-PreElement-PostElement" class="headerlink" title="How to wrap up the custom helper? (PreElement, PostElement)"></a>How to wrap up the custom helper? (PreElement, PostElement)</h3><p>The <code>PreElement</code> and the <code>PostElement</code> will wrap the custom helper inside the element that we supply.</p><p>Let’s try the same example of wrapping our custom tag helper with a div that has 2px border.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Process</span>(<span class="hljs-params">TagHelperContext context, TagHelperOutput output</span>)</span></span><br><span class="line"><span class="hljs-function">​</span>        &#123;</span><br><span class="line">​            output.TagName = <span class="hljs-string">"coloredlabel"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">var</span> colorStyle = <span class="hljs-string">$"color:<span class="hljs-subst">&#123;Color&#125;</span>"</span>;</span><br><span class="line">            output.Attributes.SetAttribute(<span class="hljs-string">"style"</span>, colorStyle);</span><br><span class="line"></span><br><span class="line">            output.PreElement.SetHtmlContent(<span class="hljs-string">"&lt;div style='border: 2px solid blue; padding: 5px'&gt;"</span>);</span><br><span class="line">            output.PostElement.SetHtmlContent(<span class="hljs-string">"&lt;/div&gt;"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>we’ve just replaced PreContent and PostContent in the previous example with PreElement and PostElement. Let’s see the output</p><img src="/creating-custom-tag-helpers-in-asp-net-core/with_border.png" title="Custom Tag helper with PreElement and PostElement"><p>Now, the output is the same as <code>PreContent</code> and <code>PostContent</code>. But, the HTML should vary. Let’s see the HTML generated.</p><figure class="highlight plain hljs"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div style=&quot;border: 2px solid blue; padding: 5px&quot;&gt;</span><br><span class="line">    &lt;coloredlabel style=&quot;color:red&quot;&gt;Should output red&lt;/coloredlabel&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Did you see the difference here? The <code>&lt;div&gt;</code> tag wrapped around custom tag helper in this case.</p><p>So, it is up to the developer whether to use Pre/Post Content or to use Pre/Post Element.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Custom tag helpers allow us to customize the content of the HTML by providing some useful methods to tweak the HTML and render the content dynamically.</p><ul><li><p>Tag helpers were added with an intension to make the UI developers life easy to mitigate with the HTML. If the markup is modified with PostContent, PreContent or with PreElement, PostElement the UI developer will have a hard time figuring out how the element is generated/added</p></li><li><p>Though the PreContent, PostContent behaved same as PreElement, PostElement. It is up to you to decide what markup you need.</p></li><li><p>If we gave the wrong styles or wrong HTML, the markup will be rejected and only the plain HTML will be displayed. This is a good thing. Try it yourself.</p></li></ul><p>Thanks for reading.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.razor.taghelpers.taghelper?view=aspnetcore-2.1" target="_blank" rel="noopener">Tag helper class from msdn</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this post, we’ll see how to create a custom tag helper in ASP.NET Core project.&lt;/p&gt;
&lt;p&gt;Custom tag helpers can be created by implementing TagHelper class. The Tag helper class has two methods that can be overridden.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ASP.NET Core" scheme="https://coderethinked.com/categories/asp-net-core/"/>
    
    
      <category term="asp-net-core" scheme="https://coderethinked.com/tags/asp-net-core/"/>
    
      <category term="taghelpers" scheme="https://coderethinked.com/tags/taghelpers/"/>
    
      <category term="custom" scheme="https://coderethinked.com/tags/custom/"/>
    
  </entry>
  
  <entry>
    <title>Shortest word in a string with LINQ</title>
    <link href="https://coderethinked.com/shortest-word-in-a-string-with-linq/"/>
    <id>https://coderethinked.com/shortest-word-in-a-string-with-linq/</id>
    <published>2018-09-28T01:07:48.000Z</published>
    <updated>2019-08-17T02:24:04.579Z</updated>
    
    <content type="html"><![CDATA[<p>In this post, we’ll try to find the shortest word in a string using LINQ.</p><a id="more"></a><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a string of words, return the length of the shortest word in the string.</p><p>Forget the edge cases of handling (empty or null).</p><blockquote><p>Ex: “The shortest string” =&gt; should output 3 for “The”</p></blockquote><h3 id="Initial-thoughts"><a href="#Initial-thoughts" class="headerlink" title="Initial thoughts"></a>Initial thoughts</h3><p>So there will be a string which contains words. First, we’ll split that string with empty space so that we’ll get all the words in a string.</p><p>Now, we can sort the list of strings by length so that our shortest word will be in the first place and then we can perform a <code>FirstOrDefault</code> on it.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><br><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ShortestWord</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> s</span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">​    <span class="hljs-keyword">return</span> s.Split(<span class="hljs-string">' '</span>).OrderBy(x =&gt; x.Length).FirstOrDefault().Length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>or we can do an orderby and then do a select the length and return the first item.<br><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">return</span> s.Split(<span class="hljs-string">' '</span>).OrderBy(i =&gt; i.Length).Select(i=&gt;i.Length).First();</span><br></pre></td></tr></table></figure></p><p>There can be many solutions like this.</p><p>Okay, we’ll see what’s the best or the clever solution</p><h3 id="Best-Solution"><a href="#Best-Solution" class="headerlink" title="Best Solution"></a>Best Solution</h3><p>We have the <code>.Min</code> extension method in LINQ. That should be sufficient to return the minimum length of the word.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ShortestWord</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> s</span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">​    <span class="hljs-keyword">return</span> s.Split(<span class="hljs-string">' '</span>).Min(x =&gt; x.Length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p>That’s it! That will return the minimum length of a word in a string.</p>]]></content>
    
    <summary type="html">
    
      In this post we will see how to find the shortest word in a string using LINQ with C#.
    
    </summary>
    
      <category term="csharp" scheme="https://coderethinked.com/categories/csharp/"/>
    
      <category term="linq" scheme="https://coderethinked.com/categories/csharp/linq/"/>
    
    
      <category term="csharp" scheme="https://coderethinked.com/tags/csharp/"/>
    
      <category term="linq" scheme="https://coderethinked.com/tags/linq/"/>
    
  </entry>
  
  <entry>
    <title>Tag Helpers in ASP.NET Core</title>
    <link href="https://coderethinked.com/tag-helpers-in-asp-net-core/"/>
    <id>https://coderethinked.com/tag-helpers-in-asp-net-core/</id>
    <published>2018-09-20T00:33:14.000Z</published>
    <updated>2019-08-17T02:24:04.585Z</updated>
    
    <content type="html"><![CDATA[<p>In this post, we’ll see how to use the tag helpers inside razor files in ASP.NET Core application.<br><a id="more"></a></p><h3 id="Key-Takeaways"><a href="#Key-Takeaways" class="headerlink" title="Key Takeaways:"></a>Key Takeaways:</h3><ul><li>What are Tag Helpers in ASP.NET core and why use Tag Helpers.</li><li>Using tag Helpers.</li><li>How to add/remove/opt-out of tag helpers.</li><li>Tag helpers scope.</li></ul><h3 id="What-are-Tag-Helpers-in-ASP-NET-Core"><a href="#What-are-Tag-Helpers-in-ASP-NET-Core" class="headerlink" title="What are Tag Helpers in ASP.NET Core?"></a>What are Tag Helpers in ASP.NET Core?</h3><p>Unlike normal <a href="https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions-1/views/creating-custom-html-helpers-cs" target="_blank" rel="noopener">HTML Helpers in MVC</a>, the Tag Helpers in ASP.NET Core allow us to have server-side code to customize the HTML elements in razor files.</p><h3 id="Why-use-Tag-Helpers"><a href="#Why-use-Tag-Helpers" class="headerlink" title="Why use Tag Helpers?"></a>Why use Tag Helpers?</h3><ul><li>Enables HTML friendly development experience</li><li>Provides intellisense for using server-side properties</li></ul><h3 id="Using-the-Tag-Helpers"><a href="#Using-the-Tag-Helpers" class="headerlink" title="Using the Tag Helpers"></a>Using the Tag Helpers</h3><p>We’ll use the input element <code>asp-for</code> attribute and see how the tag helpers work. So, we’ve got a Post Model class here.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PostModel</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="hljs-meta">Display(Name = <span class="hljs-meta-string">"Post ID"</span>)</span>]</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> PostID &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="hljs-meta">Required</span>]</span><br><span class="line">    [<span class="hljs-meta">Display(Name = <span class="hljs-meta-string">"Post Name"</span>)</span>]</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> PostName &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p>Now, go to the <code>Views/_ViewImports.cshtml</code> file and add the following</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@addTagHelper *, &lt;your assembly name&gt;</span><br></pre></td></tr></table></figure><p>Now in our <code>Index.html</code> file, we’ll just try to get the names of the PostModel into our Razor.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@model CoreTagHelpers.Models.PostModel</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">asp-for</span>=<span class="hljs-string">"PostName"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>That should generate the following HTML with the <code>PostName</code> in the <code>id</code> and <code>name</code> attributes. And, it also generated <code>data-val</code>, <code>data-val-required</code> attributes as we have the <code>[Required]</code> data annotation decorated to the <code>Post name</code> property in our model class.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">data-val</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">data-val-required</span>=<span class="hljs-string">"The Post Name field is required."</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"PostName"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"PostName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Hello"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The value for the input <code>Hello</code> is generated as I’ve created an object of PostModel in the controller action and passed it to the view.</p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> IActionResult <span class="hljs-title">Index</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> data = <span class="hljs-keyword">new</span> PostModel &#123; PostID = <span class="hljs-number">1</span>, PostName = <span class="hljs-string">"Hello"</span> &#125;;</span><br><span class="line">    <span class="hljs-keyword">return</span> View(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="addTagHelper"><a href="#addTagHelper" class="headerlink" title="@addTagHelper"></a>@addTagHelper</h3><p><code>@addTagHelper</code> directive makes the necessary tag helpers available to the view.</p><p>In the above input tag helper case, I’ve used a wildcard (*) to get all the model classes but you could use specific model classes only available to the view by giving a fully qualified name.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@addTagHelper CoreTagHelpers.Models.EmailTagHelper, CoreTagHelpers</span><br></pre></td></tr></table></figure><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="removeTagHelper"><a href="#removeTagHelper" class="headerlink" title="@removeTagHelper"></a>@removeT<ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>agHelper</h3><p>This directive will remove the tag helper which was added. We can ignore a tag helper from <code>_ViewImports.cshtml</code> by adding @removeTagHelper in the view.</p><p>Adding @removeTagHelper in the <code>Views\_ViewImports.cshtml</code> will remove the tag helper from all the views.</p><h3 id="Opt-out-of-tag-helpers"><a href="#Opt-out-of-tag-helpers" class="headerlink" title="Opt out of tag helpers (!)"></a>Opt out of tag helpers (!)</h3><p>The opt-out character (“!”) is used to disable the Tag Helper at the element level.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">!label</span> <span class="hljs-attr">asp-for</span>=<span class="hljs-string">"PostID"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">!label</span>&gt;</span></span><br></pre></td></tr></table></figure><p>With the opt-out character, the HTML will not be generated for the label tag in the above case. We can use this opt-out character if we want to conditionally control rendering of the HTML elements.</p><h3 id="The-scope-of-Tag-helpers"><a href="#The-scope-of-Tag-helpers" class="headerlink" title="The scope of Tag helpers"></a>The scope of Tag helpers</h3><p>We can add <code>_ViewImports.cshtml</code> to any view folder, and the view engine applies the directives from both the view folder and from the <code>Views\_ViewImports.cshtml</code>.</p><p>We can limit the Tag helper scope to specific view folder by adding a <code>_ViewImports.cshtml</code> inside the view folder. If we want to control it in a Home folder then adding <code>Views/Home/_ViewImports.cshtml</code> will make the view imports available within that folder itself.</p><h3 id="Default-Tag-helpers"><a href="#Default-Tag-helpers" class="headerlink" title="Default Tag helpers"></a>Default Tag helpers</h3><p>There are many <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.taghelpers?view=aspnetcore-2.0" target="_blank" rel="noopener">tag helpers created by Microsoft</a>, which are included by default if you’ve created a dot net core project.</p><h3 id="Intellisense-support-for-Tag-helpers"><a href="#Intellisense-support-for-Tag-helpers" class="headerlink" title="Intellisense support for Tag helpers"></a>Intellisense support for Tag helpers</h3><p>Once you start writing any HTML element the icon for the HTML tag displays like this.</p><img src="/tag-helpers-in-asp-net-core/taghelpersymbol.png" title="Tag Helpers in ASP.NET Core: Tag helper intellisense"><p>This indicates that the element is targeted by Tag Helpers. Normal HTML elements will just display the “&lt;&gt;” icon.</p><p>Once you add the <code>asp-for</code> attribute to the HTML element the color of the HTML element will be changed to purple.</p><img src="/tag-helpers-in-asp-net-core/labelaspfor2.png" title="Tag Helpers in ASP.NET Core: Tag helper symbol"><p>So, you can distinguish between a normal HTML tag and a tag helper tag.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>With the HTML helpers in ASP.NET MVC projects, it’s hard for the front-end designer to HTML attributes to the elements in the file.</p><p>Tag helpers offer the server side code into the HTML elements while keeping the original HTML markup.</p>]]></content>
    
    <summary type="html">
    
      how to use the tag helpers inside razor files in ASP.NET Core application
    
    </summary>
    
      <category term="ASP.NET Core" scheme="https://coderethinked.com/categories/asp-net-core/"/>
    
    
      <category term="asp-net-core" scheme="https://coderethinked.com/tags/asp-net-core/"/>
    
      <category term="taghelpers" scheme="https://coderethinked.com/tags/taghelpers/"/>
    
  </entry>
  
  <entry>
    <title>Get only specific types from List in C#</title>
    <link href="https://coderethinked.com/get-only-specific-types-from-list/"/>
    <id>https://coderethinked.com/get-only-specific-types-from-list/</id>
    <published>2018-09-10T12:19:20.000Z</published>
    <updated>2019-08-17T02:24:04.570Z</updated>
    
    <content type="html"><![CDATA[<p>This is a post to get the specific type of items from a mixed list of items. I have tried couple of solutions for the problem but it looks like there’s more elegant solution than my solution.<br><a id="more"></a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>There will be a list of objects from which we have to extract only integers from it.</p><p>Ex:<br><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="hljs-keyword">object</span>&gt; listOfObjects = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-keyword">object</span>&gt;&#123; <span class="hljs-string">"tada"</span>, <span class="hljs-number">10</span>, <span class="hljs-string">"123"</span>, <span class="hljs-number">22.0</span> <span class="hljs-string">"sttring"</span>, <span class="hljs-number">1</span>&#125;;</span><br><span class="line">IEnumerable&lt;<span class="hljs-keyword">int</span>&gt; result = GetOnlyInts(listOfObjects); <span class="hljs-comment">//the result should b 10, 1</span></span><br></pre></td></tr></table></figure></p><p>We’ve to implement the solution in <code>GetOnlyInts()</code> method so as to return only integers from it.</p><h3 id="A-Draft-thought"><a href="#A-Draft-thought" class="headerlink" title="A Draft thought"></a>A Draft thought</h3><p>Once you are given that problem, we tend to loop over the content and try to find out the type of each item and store that in another list and return that back.</p><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h4><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IEnumerable&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">GetOnlyInts</span>(<span class="hljs-params">List&lt;<span class="hljs-keyword">object</span>&gt; listOfObjects</span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-keyword">int</span>&gt;();</span><br><span class="line">    <span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> listOfObjects)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (item <span class="hljs-keyword">is</span> <span class="hljs-keyword">int</span>)</span><br><span class="line">          result.Add((<span class="hljs-keyword">int</span>)item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But as we think through, the <code>listOfObjects</code> is a List. So, there’s no need of the for loop and add it to result variable. We’ll fine tune here using LINQ.</p><p>Ignore the method signature.<br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script></p><h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h4><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">return</span> listOfObjects.Select(a =&gt; &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> &#123; success = a <span class="hljs-keyword">is</span> <span class="hljs-keyword">int</span>, val = a &#125;;</span><br><span class="line">      &#125;)</span><br><span class="line">      .Where(a =&gt; a.success) <span class="hljs-comment">//filter only successful integers</span></span><br><span class="line">      .Select(v =&gt; (<span class="hljs-keyword">int</span>)v.val).ToList(); <span class="hljs-comment">//return to a list of integers</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>This is a good solution and observe how we eliminated the failed cases in the where clause filter.</p><h3 id="Best-Short-solution"><a href="#Best-Short-solution" class="headerlink" title="Best/Short solution"></a>Best/Short solution</h3><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IEnumerable&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">GetOnlyInts</span>(<span class="hljs-params">List&lt;<span class="hljs-keyword">object</span>&gt; listOfObjects</span>)</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> listOfObjects.OfType&lt;<span class="hljs-keyword">int</span>&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The ‘OfType’ extension method only the specific type of item that is requested on.</p><p>Let’s examine the source code of OfType extension method to see what it has.</p><h3 id="OfType-source-code"><a href="#OfType-source-code" class="headerlink" title="OfType() source code"></a>OfType() source code</h3><p><a href="https://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,4ba4a3f8a5530e33" target="_blank" rel="noopener">Source code link to OfType extension method</a></p><figure class="highlight csharp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IEnumerable&lt;TResult&gt; OfType&lt;TResult&gt;(<span class="hljs-keyword">this</span> IEnumerable source) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (source == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> Error.ArgumentNull(<span class="hljs-string">"source"</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> OfTypeIterator&lt;TResult&gt;(source);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">static</span> IEnumerable&lt;TResult&gt; OfTypeIterator&lt;TResult&gt;(IEnumerable source) &#123;</span><br><span class="line">    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">object</span> obj <span class="hljs-keyword">in</span> source) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">is</span> TResult) <span class="hljs-function"><span class="hljs-keyword">yield</span> <span class="hljs-title">return</span> (<span class="hljs-params">TResult</span>)obj</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-1873760810392013" data-ad-slot="4571563695"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p>As you can see from the above source code of <code>OfType</code> method, it has the same old foreach statement on the <code>IEnumerable</code>. But it yield returns the values.</p><p>If the type of the object is <code>TResult</code>, then the value is returned by casting it to <code>TResult</code>.</p>]]></content>
    
    <summary type="html">
    
      How to get only specific data type of items from list in C#. We&#39;ll solve this problem by using .OfType (a LINQ method).
    
    </summary>
    
      <category term="csharp" scheme="https://coderethinked.com/categories/csharp/"/>
    
      <category term="linq" scheme="https://coderethinked.com/categories/csharp/linq/"/>
    
    
      <category term="linq" scheme="https://coderethinked.com/tags/linq/"/>
    
      <category term="filter" scheme="https://coderethinked.com/tags/filter/"/>
    
      <category term="list" scheme="https://coderethinked.com/tags/list/"/>
    
      <category term="oftype" scheme="https://coderethinked.com/tags/oftype/"/>
    
  </entry>
  
</feed>
