{"pages":[{"title":"About Me","text":"Hello, my name is Karthik Chintala. I’m a senior software engineer working in Hyderabad, India. I work on ASP.NET MVC/Web API most of the time. Apart from that, I’ll be active in the csharp community on Reddit and sometimes I write answers to the questions in stackoverflow.com. All the views expressed on this site are my own and do not represent the opinions of any entity or organization. DisclaimerLast updated: May 01, 2019 The information contained on http://www.coderethinked.com website (the “Service”) is for general information purposes only. Code Rethinked assumes no responsibility for errors or omissions in the contents on the Service. In no event shall Code Rethinked be liable for any special, direct, indirect, consequential, or incidental damages or any damages whatsoever, whether in an action of contract, negligence or other tort, arising out of or in connection with the use of the Service or the contents of the Service. Code Rethinked reserves the right to make additions, deletions, or modification to the contents on the Service at any time without prior notice. This Disclaimer for Code Rethinked has been created with the help of TermsFeed Disclaimer Generator. Code Rethinked does not warrant that the website is free of viruses or other harmful components. Adsense DisclaimerThis website uses Google adsense to display ads on the website. My Social Links: Twitter profile LinkedIn profile Featured Images: Most of the featured images of my posts are from unsplash web site.","link":"/about/index.html"}],"posts":[{"title":"Building dynamic LINQ queries using Expression Trees and Func","text":"Filtering an item from a list of items is easy but if the item to filter is not known at compile time then filtering a list will be little complicated.Instead of writing dynamic filtering in C#, one might go for a Stored Procedure and write a dynamic query based on the input column name and execute the dynamic SQL statement. In this post, we will see how to build the dynamic LINQ queries. Building dynamic LINQ expressions is easy but you need to have an idea on Func&lt;T, TResult&gt; and Expression Trees before we begin. (adsbygoogle = window.adsbygoogle || []).push({}); The User class123456public class User{ public int ID { get; set; } public string FirstName { get; set; } public string LastName { get; set; }} Querying on Seed dataFor the purpose of the article, we will have the following list of user data. 123456789private static List&lt;User&gt; UserDataSeed(){ return new List&lt;User&gt; { new User{ ID = 1, FirstName = \"Kevin\", LastName = \"Garnett\"}, new User{ ID = 2, FirstName = \"Stephen\", LastName = \"Curry\"}, new User{ ID = 3, FirstName = \"Kevin\", LastName = \"Durant\"} };} What is a Func delegate? Encapsulates a method that has one parameter and returns a value of the type specified by the TResult parameter. - from MSDN Func is a delegate type for a method that returns the value of the type T. You can use Func to reference a method. For example, if we want to multiply two numbers, then with Func delegate we can write the following code 1234//Func will take two integers as arguments to multiply//and will return the output as integersFunc&lt;int, int, int&gt; multiply = (num1, num2) =&gt; num1 * num2;Console.WriteLine(multiply(2, 3)); Back to our original dynamic LINQ, we’ll use Func delegate to have dynamic LINQ queries. Dynamic Querying with FuncIf we want to get the specific ID of the user in a list of users then we will write the following LINQ on the list of users for different properties on the User model. For filtering the ID property: 1userData.Where(d =&gt; d.ID == val).ToList(); For FirstName?1userData.Where(d =&gt; d.FirstName == val).ToList(); Last name?1userData.Where(d =&gt; d.LastName == val).ToList(); From our console app, we will supply a property name to filter on. So, can we have a switch statement to do this? (I know some of you don’t like the switch-case statement). 12345678910111213141516171819private static Func&lt;User, bool&gt; GetDynamicQueryWithFunc(string propName, object val){ Func&lt;User, bool&gt; exp = (t) =&gt; true; switch (propName) { case \"ID\": exp = d =&gt; d.ID == Convert.ToInt32(val); break; case \"FirstName\": exp = f =&gt; f.FirstName == Convert.ToString(val); break; case \"LastName\": exp = l =&gt; l.LastName == Convert.ToString(val); break; default: break; } return exp;} In the above code snippet, we declared a Func delegate (exp) at the top and based on the property name we will assign the necessary lambda expression to the func delegate and return the delegate back to the caller. Once we get the Func delegate from the method, we will apply that delegate on a list of user data.12var dynamicExpression = GetDynamicQueryWithFunc(propertyName, value);var output = userData.Where(dynamicExpression).ToList(); I don’t like the above solution, although it solves the problem. Because, the code violates Open-Closed principle and the code use switch-case statement. Let’s do the real dynamic LINQ querying with Expression trees. (adsbygoogle = window.adsbygoogle || []).push({}); What is an Expression Tree?An expression tree is a binary tree that will represent expressions. So, we have to build the expressions for the tree. In C#, the expression trees concept is used to translate code into data. With expression trees, we produce a data structure that represents your code. Why do we need the expression trees now? We’ll use the expression trees to build our code as a data structure and we compile the expression tree to get a func delegate which can be used to filter the items. Please read expresson trees from msdn Building dynamically with Expression treesTo represent x =&gt; x.LastName == &quot;Curry&quot; in expression trees, we have to write the following code. 12345678910111213private static Func&lt;User, bool&gt; GetDynamicQueryWithExpresionTrees(string propertyName, string val){ //x =&gt; var param = Expression.Parameter(typeof(User), \"x\"); //val (\"Curry\") var valExpression = Expression.Constant(val, typeof(string)); //x.LastName == \"Curry\" Expression body = Expression.Equal(member, valExpression); //x =&gt; x.LastName == \"Curry\" var final = Expression.Lambda&lt;Func&lt;User, bool&gt;&gt;(body: body, parameters: param); //compiles the expression tree to a func delegate return final.Compile();} In the above code we have the following line1var valExpression = Expression.Constant(val, typeof(string)); This makes the constant expression of type string but what if we give ID as the input to the program and run it. Well, it breaks with the following exception. System.InvalidOperationException: ‘The binary operator Equal is not defined for the types ‘System.Int32’ and ‘System.String’.’ To fix this we have to get rid of that line and we will use the TypeDescriptor to convert our value to the appropriate type. As said, the following code will convert from a string to its own type of data.1234567891011var param = Expression.Parameter(typeof(User), \"x\");var member = Expression.Property(param, propertyName);var propertyType = ((PropertyInfo)member.Member).PropertyType;var converter = TypeDescriptor.GetConverter(propertyType);if (!converter.CanConvertFrom(typeof(string))) throw new NotSupportedException();//will give the integer value if the string is integervar propertyValue = converter.ConvertFromInvariantString(val); var constant = Expression.Constant(propertyValue); You can also use int.TryParse to test if the string is an integer. If we chose this approach then we have to use if/else or switch-case statements to make that constant expression and also have to handle the value expression. With the TypeDescriptor now in place let’s see the entire code. DynamicLambdas12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061static void Main(string[] args){ Console.WriteLine(\"Specify the property to filter\"); string propertyName = Console.ReadLine(); Console.WriteLine(\"Value to search against: \" + propertyName); string value = Console.ReadLine(); //1: With Func delegate //var dynamicExpression = GetDynamicQueryWithFunc(propertyName, value); //var output = userData.Where(dynamicExpression).ToList(); //2: With Expression trees that generate Func and handles dynamic types with TypeDescriptor var dn = GetDynamicQueryWithExpresionTrees(propertyName, value); var output = userData.Where(dn).ToList(); foreach (var item in output) { Console.WriteLine(\"Filtered result:\"); Console.WriteLine($\"\\t ID: {item.ID}\"); Console.WriteLine($\"\\t First Name: {item.FirstName}\"); Console.WriteLine($\"\\t Last Name: {item.LastName}\"); }}//USER DATA SEEDprivate static List&lt;User&gt; UserDataSeed(){ return new List&lt;User&gt; { new User{ ID = 1, FirstName = \"Kevin\", LastName = \"Garnett\"}, new User{ ID = 2, FirstName = \"Stephen\", LastName = \"Curry\"}, new User{ ID = 3, FirstName = \"Kevin\", LastName = \"Durant\"} };}private static Func&lt;User, bool&gt; GetDynamicQueryWithExpresionTrees(string propertyName, string val){ var param = Expression.Parameter(typeof(User), \"x\"); #region Convert to specific data type MemberExpression member = Expression.Property(param, propertyName); UnaryExpression valueExpression = GetValueExpression(propertyName, val, param); #endregion Expression body = Expression.Equal(member, valueExpression); var final = Expression.Lambda&lt;Func&lt;User, bool&gt;&gt;(body: body, parameters: param); return final.Compile();}private static UnaryExpression GetValueExpression(string propertyName, string val, ParameterExpression param){ var member = Expression.Property(param, propertyName); var propertyType = ((PropertyInfo)member.Member).PropertyType; var converter = TypeDescriptor.GetConverter(propertyType); if (!converter.CanConvertFrom(typeof(string))) throw new NotSupportedException(); var propertyValue = converter.ConvertFromInvariantString(val); var constant = Expression.Constant(propertyValue); return Expression.Convert(constant, propertyType);} The above code blocks is a tabbed content check the second tab for the dynamic LINQ generation using Expression Trees. Let’s try the code in dotnet fiddle and see it in action. In the output window of the dotnet fiddle, try with ID property with the value within 1, 2, 3 or FirstName/LastName with the names “Kevin”/“Curry”. (adsbygoogle = window.adsbygoogle || []).push({}); Cases not handled in the codeNote that the following cases were not handled in the above code. Giving property names with spaces will cause the program to throw an exception as the property with names(ex: First name) is not in the User model. Providing a value that is not in the user seed data will cause the program to end without providing any result. Source Code on GitLabThe source code of the above example snippets and demo in the dotnetfiddle is available on GitLab. ConclusionThe old way of doing things dynamic is to write a stored procedure with a ton of IF statements and build a raw SQL query and then execute it at the end. Instead of writing the dynamic SQL queries it is better to build the Expression Trees or Func and then use it against the data to filter the result so that we can test the code. One might argue that we can filter a list of item dynamically with reflection, but reflection will be slow if the model class (in our case the User class) has too many properties.","link":"/building-dynamic-linq-queries-using-expression-trees-and-func/"},{"title":"ASP.NET Core and Benefits","text":"ASP.NET Core is the new web framework for the Microsoft technologies. We’ll see the benefits of using the framework. How did the name ASP.NET Core come? Originally deemed ASP.NET vNext, the framework was going to be called ASP.NET 5 when ready. However, in order to avoid implying it is an update to the existing ASP.NET framework, Microsoft later changed the name to ASP.NET Core at the 1.0 release - From Wikipedia Benefits of ASP.NET CORE Cross-platform development and deployment Performance is the main focus A simplified hosting model Open source (community requested features) Modular framework distributed as NuGet packages Integrates with popular client-side development frameworks All the previous versions of .net and visual studio are Windows-specific. As everybody is aware of the news that Visual Studio for Mac and Linux is released. So, the Visual studio became cross-platform. As with visual studio being open source, the compiler of the C# is also becoming open source and is hosted on GitHub the same story is for the .net core as well. (adsbygoogle = window.adsbygoogle || []).push({}); Drawback of ASP.NETThe hosting model for the ASP.NET is tied to Windows IIS. So, IIS has to handle the request and invokes specific global.asax methods. Kestrel web serverKestrel is a lightweight HTTP server that handles ASP.NET Core applications request pipeline. With ASP.NET core, there is a Kestrel web server within the asp.net core application which handles the request. So, the IIS will hand off the request to the Kestrel web server and kestrel processes the request. Now, how is this an open source? Yes, it is open source. Instead of IIS, for Mac users, they can have Nginx/Apache as a server to handle the requests and send it to kestrel. LTS Support for .NET Core 2.1.NET Core 2.1 will be a Long-term support(LTS) release. Meaning that this is supported for 3 years. So, it is recommended that we make .NET Core 2.1 as the new standard for .NET Core. Contributions from Open SourceMost of the performance improvements were made to Kestrel HTTP Server. Many of the contributions to performance improvements are from contributors to open source project on GitHub. So, developing on Open source means we should certainly see fixes and features would be way faster to production environments. ModularityThe modularity is achieved as everything on the ASP.NET Core is decoupled from the underlying .NET platform. The web framework (ASP.NET Core) is implemented as modular NuGet packages. So, you can customize, update to whatever you want. Integrations with client-side frameworksClient-side frameworks these days are getting way popular than the enterprise software. ASP.NET Core integrates with popular client-side frameworks and libraries, including Angular, React, and Bootstrap (adsbygoogle = window.adsbygoogle || []).push({}); ConclusionAs one might argue that the Microsoft team is mimicking the node js style of operation in its modularity. Yes, but Microsoft is trying to build better software to make it better by identifying the drawbacks of the existing applications. So, the heavy frameworks are being modularized. Back in the day of .NET Core 1.0 initial releases, it was not production ready but as .NET Core 2.1 is LTS release, enterprise products could get support from Microsoft.","link":"/asp-net-core-and-benefits/"},{"title":"Awaiting A Method Vs Awaiting A Task","text":"What is the difference between awaiting a method vs await a task in c#. In this post, we’ll explore the major difference between awaiting a method and awaiting a Task.Most developers just await on methods instead of awaiting on Tasks returned by the awaiter. An awaiter is something that is returned by the method that is awaited.In this post, we’ll examine what happens when we await on methods instead of a task when we have multiple awaits in the method. Use Case:We’ve two awaitable methods in the calling code which can process individually. This means the second awaitable call can happen while the first await is happening. It’s little confusing with all the awaiters and awaitables. If you don’t understand the statement, read it again. Let’s Code (adsbygoogle = window.adsbygoogle || []).push({}); For the purpose of this article, I’ll test this in a Console application. Here goes our AwaitTest class. AwaitTest.cs12345678910111213141516171819public class AwaitTest { public async Task DoSomeThingAsync() { var time = Stopwatch.StartNew(); //a database call which takes 5 seconds to run await Task.Delay(5000); await PerformCalculationsAsync(); Console.WriteLine(\"time taken : \" + time.Elapsed); } private async Task&lt;int&gt; PerformCalculationsAsync() { await Task.Delay(2000); //This can be some operation which takes 2 sec. return 30; } } So, our DoSomethingAsync() has two awaitables here. One that takes 5 seconds to execute and the other takes 2 seconds to execute. Now, we’ll call this in the Main method of our app and see how this goes. Here is how we call our async method in the Main method of the application. 123456789public class Program { static void Main(string[] args) { AwaitTest at = new AwaitTest(); at.DoSomeThingAsync().GetAwaiter().GetResult(); } } With the above code in DoSomeThingAsync() method, can you guess the timing of the operation?Well, the time taken for DoSomeThingAsync() to complete the operation is Time taken : 00:00:07.0079634 (adsbygoogle = window.adsbygoogle || []).push({}); So, what happened when we’ve awaited on the methods?It’s essentially what it is but we need to understand how it works. So, when a method is awaited it waits for the method to complete its operation.Our first awaiter in the DoSomeThingAsync() method await Task.Delay(5000); The above line just waits for 5 seconds to complete its operation. After it has completed its operation the next awaiter will be executed. await PerformCalculations(); The above line takes 2 seconds to complete its operation. So the complete time for this operation is 07.0079634. I’d recommend trying this by yourself just place a debugger in DoSomeThingAsync() method and watch what it is doing. Now with this above approach, it just looks like synchronous operation as only one thing is executed at a time. So, we don’t get the benefit of async-await here. Ok, what would have been better?Instead of awaiting the method directly, we’ll await on the Task instead of the methods. I’ll modify the DoSomeThingAsync() method here so that we’ll await on Task 12345678910111213141516public async Task DoSomeThingAsync() { var time = Stopwatch.StartNew(); //a database call which takes 5 seconds to run //await Task.Delay(5000); //await PerformCalculationsAsync(); Task t1 = Task.Delay(5000); Task t2 = PerformCalculationsAsync(); await t1; await t2; Console.WriteLine(\"time taken : \" + time.Elapsed); } (adsbygoogle = window.adsbygoogle || []).push({}); Now, guess the timing. Here’s the output, time taken : 00:00:05.0080029 What changed the timing now? Let’s see what happened in the code. 12Task t1 = Task.Delay(5000); Task t2 = PerformCalculationsAsync(); The above two lines just return immediately when debugged (it doesn’t mean that the operation of those two is not completed). Instead, t1 and t2 will have their own Tasks returned. 12await t1; await t2; When the first await t1; is executed it returns a Task and then the second await t2; will begin its execution. So, by the time the first task is completed the second task will be completed as the second task takes 2 seconds while the first task takes 5 seconds to complete. So, our total time taken for execution will be 5 seconds. Take awayIf we have multiple awaiting methods to execute in the method it’s better to have them as Tasks instead of awaiting for one. Consider sorting the order of execution of the methods so that we could save some time for the other operation. It could be just 2 seconds in this article but in real world cases 2 seconds is a huge time and there will be a performance consideration. (adsbygoogle = window.adsbygoogle || []).push({}); Alternatively, you could use Task.WhenAll method to wait for all the awaitable’s to complete its operation. Thanks for reading.","link":"/awaiting-a-method-vs-awaiting-a-task/"},{"title":"Creating custom tag helpers in ASP.NET Core","text":"In this post, we’ll see how to create a custom tag helper in ASP.NET Core project. Custom tag helpers can be created by implementing TagHelper class. The Tag helper class has two methods that can be overridden. Tag Helper class:1public abstract class TagHelper : Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper { } Methods of Tag helper class: Method name Summary Init(Tag Helper Context) Initializes the ITagHelper with the given context. Additions to Items should be done within this method to ensure they’re added prior to executing the children. Process(Tag Helper Context, Tag Helper Output) Synchronously executes the TagHelper with the given context and output. Process Async(Tag Helper Context, Tag Helper Output) Asynchronously executes the TagHelper with the given context and output. For the purpose of this post, we’ll override the Process method to synchronously execute the tag helper with the context and output our HTML. (adsbygoogle = window.adsbygoogle || []).push({}); Use CaseIn this article, we’ll create a label with color by default. So, the user can supply the color by providing color as an attribute to the colorlabel. Ex: html123&lt;color-label color=&quot;red&quot;&gt;red color&lt;/color-label&gt; The above custom tag should output the label in red color. Implementing TagHelper classWe’ll create a new ColorLabelTagHelper class and let’s inherit from TagHelper class which is in Microsoft.AspNetCore.Razor.TagHelpers namespace. Note that TagHelper at the end of the class name is just a convention. We can omit the convention and just have the name directly. 1234567891011121314151617using Microsoft.AspNetCore.Razor.TagHelpers;namespace CustomTagHelpers.TagHelpers{​ public class ColorLabelTagHelper : TagHelper​ {​ public string Color { get; set; }​ public override void Process(TagHelperContext context, TagHelperOutput output)​ {​ output.TagName = \"coloredlabel\";​ var colorStyle = $\"color:{Color}\";​ output.Attributes.SetAttribute(\"style\", colorStyle);​ }​ }} The Color property in the above class will act as an attribute to the coloredlabel. So, you can set color from the HTML. Observe how we are setting the attributes for the tag using output.Attributes.SetAttribute. We can set all the necessary html attributes that the element can support. Access custom tag helper in viewsOnce we’ve done that we need to use this tag helper in our views with the @addTagHelper directive. Now, goto _ViewImports.cshtml file in the views folder and add the following line (adsbygoogle = window.adsbygoogle || []).push({}); 123@addTagHelper *, CustomTagHelpers You could specify just the namespace of our custom tag helper but here I’m adding everything in the assembly. Using the custom tag helper in ViewsLet’s go ahead and try to get our custom tag helper working. For the purpose of this article, I’ll clear all the existing HTML tags in the Index.cshtml file and add our awesome colorlabel custom tag. Here is how the Index.cshtml looks after adding the custom tag. html1234567@{​ ViewData[&quot;Title&quot;] = &quot;Index&quot;;}&lt;h2&gt;Index&lt;/h2&gt;&lt;colorlabel color=&quot;red&quot;&gt;the red color&lt;/colorlabel&gt; Here is the output. Yay Note that we didn’t get the red color that we’ve expected. This is because we have the wrong syntax of custom tag helper in place. custom tag helpers properties to Kebab caseThe Pascal-cased class and the property names of the tag helpers will be translated into their lower kebab case. So, in order to use our custom helper class and property, we need to use &lt;color-label color=&quot;red&quot;&gt;the red color&lt;/color-label&gt;. Let’s try that in our Index.cshtml page and see it. We got our custom tag helpers working now. Let’s take a look at the HTML generated html123&lt;coloredlabel style=&quot;color:red&quot;&gt;the red color&lt;/coloredlabel&gt; We have the new tag in the HTML i.e., coloredlabel this is because we’ve specified the output tag name to be coloredlabel. 1output.TagName = \"coloredlabel\"; And the style attribute will be generated as any normal HTML tag would generate. (adsbygoogle = window.adsbygoogle || []).push({}); Set ContentThe SetContent method will set the content of the HTML tag. Note that this method just sets the content and not the HTML. Let’s modify our coloredlabel class to facilitate the Set content method. html123&lt;color-label color=&quot;red&quot;&gt;Should output red&lt;/color-label&gt; 12345678910public override void Process(TagHelperContext context, TagHelperOutput output)​ {​ output.TagName = \"coloredlabel\"; var colorStyle = $\"color:{Color}\"; output.Attributes.SetAttribute(\"style\", colorStyle); if (Color == \"red\") output.Content.SetContent(\"Text from custom helper\"); } This will just modify only the contents of the tags with red color. So, our color label will output as Text from custom helper (in red color). Pre Content and Post ContentPre content and Post content can modify the head and tail of the custom tag helper. We can modify the contents of the tag. Let’s see how to append the content at the beginning and at the end. 1234output.PreContent.Append(\"Start: \");output.PostContent.Append(\" :end\"); When the above code is executed it will output like this: Start: Text from custom helper :end (in red) Let’s try to wrap our custom tag helper content with a div that has a 2px border and blue color. We’ve to add HTML content around our custom tag helper. 123456789101112public override void Process(TagHelperContext context, TagHelperOutput output)​ {​ output.TagName = \"coloredlabel\"; var colorStyle = $\"color:{Color}\"; output.Attributes.SetAttribute(\"style\", colorStyle); output.PreContent.SetHtmlContent(\"&lt;div style='border: 2px solid blue; padding: 5px'&gt;\"); output.PostContent.SetHtmlContent(\"&lt;/div&gt;\"); } (adsbygoogle = window.adsbygoogle || []).push({}); Notice how we are ending the div tag with PostContent. This is how it looks like Let’s examine the generated HTML for the above code. html12345&lt;coloredlabel style=&quot;color:red&quot;&gt;&lt;div style=&quot;border: 2px solid blue; padding: 5px&quot;&gt;Should output red&lt;/div&gt;&lt;/coloredlabel&gt; So, we got our &lt;div&gt; element inside of coloredlabel tag because we’ve used PreContent and Postcontent. As the word says, it just the content that is going to wrap not the HTML. How to wrap up the custom helper? (PreElement, PostElement)The PreElement and the PostElement will wrap the custom helper inside the element that we supply. Let’s try the same example of wrapping our custom tag helper with a div that has 2px border. 1234567891011public override void Process(TagHelperContext context, TagHelperOutput output)​ {​ output.TagName = \"coloredlabel\"; var colorStyle = $\"color:{Color}\"; output.Attributes.SetAttribute(\"style\", colorStyle); output.PreElement.SetHtmlContent(\"&lt;div style='border: 2px solid blue; padding: 5px'&gt;\"); output.PostElement.SetHtmlContent(\"&lt;/div&gt;\"); } we’ve just replaced PreContent and PostContent in the previous example with PreElement and PostElement. Let’s see the output Now, the output is the same as PreContent and PostContent. But, the HTML should vary. Let’s see the HTML generated. html12345&lt;div style=&quot;border: 2px solid blue; padding: 5px&quot;&gt; &lt;coloredlabel style=&quot;color:red&quot;&gt;Should output red&lt;/coloredlabel&gt;&lt;/div&gt; Did you see the difference here? The &lt;div&gt; tag wrapped around custom tag helper in this case. So, it is up to the developer whether to use Pre/Post Content or to use Pre/Post Element. ConclusionCustom tag helpers allow us to customize the content of the HTML by providing some useful methods to tweak the HTML and render the content dynamically. Tag helpers were added with an intension to make the UI developers life easy to mitigate with the HTML. If the markup is modified with PostContent, PreContent or with PreElement, PostElement the UI developer will have a hard time figuring out how the element is generated/added Though the PreContent, PostContent behaved same as PreElement, PostElement. It is up to you to decide what markup you need. If we gave the wrong styles or wrong HTML, the markup will be rejected and only the plain HTML will be displayed. This is a good thing. Try it yourself. Thanks for reading. (adsbygoogle = window.adsbygoogle || []).push({}); ReferencesTag helper class from msdn.","link":"/creating-custom-tag-helpers-in-asp-net-core/"},{"title":"Data binding in blazor","text":"Blazor has 3 different ways of binding data on the client-side. Here are the different data binding mechanisms in the client-side blazor framework. One-way data binding Two-way data binding Component parameters (adsbygoogle = window.adsbygoogle || []).push({}); One-way data bindingThis is the common data binding we’ll see in many of the client-side frameworks. one-way data binding means binding the data from the model to view. Unlike many client-side frameworks, we need no bind- properties here to get the data in the field and bind to HTML. You can use the bind attribute on any element to bind the value. In blazor, we’ll have a property assigned some value in the functions and use the property in the HTML template. Let’s get this done. 123456&lt;h3&gt;One-way data binding&lt;/h3&gt;color is : &lt;label&gt;@color&lt;/label&gt;@functions{ private string color = \"red\";}``` So, when we run the app, the label tag will display “red” as a text in the label. Notice how the @color property is used in HTML from the @functions. We must use the @ symbol when accessing the properties/functions declared. If you’ve worked with razor files (.cshtml) this shouldn’t be a new thing. Let’s make this little interesting by having a div with background and toggling that background color with a button. 123456789101112&lt;h3&gt;One-way data binding&lt;/h3&gt;color is : &lt;label&gt;@color&lt;/label&gt;&lt;div style=\"background-color: @color; padding: 50px;\"&gt;&lt;/div&gt;&lt;button class=\"btn btn-dark\" onclick=\"@ToggleBackGround\"&gt;Toggle background color&lt;/button&gt;@functions{ private string color = \"red\"; private void ToggleBackGround(UIMouseEventArgs eventArgs) { color = color == \"red\" ? \"green\" : \"red\"; }} When the button is clicked, the background color is changed from red to green and vice-versa and the content in the HTML is also changed accordingly. (adsbygoogle = window.adsbygoogle || []).push({}); Two-way data bindingTwo-way data binding is the synchronization of data between the model and the view. In Blazor, this is like synchronization between the properties in the functions and the HTML. 1. bind-value-oninput attributeFor the two-way binding, in blazor, we have a dedicated bind-value-oninput attribute. Let’s have a label and a text box for greeting the person who entered text. 1234567&lt;h3&gt;Two-way data binding&lt;/h3&gt;&lt;label&gt;Hello @labelText !!&lt;/label&gt;&lt;br/&gt;&lt;input class=\"input-group-text\" bind-value-oninput=\"@labelText\"/&gt;@functions{ private string labelText = \"Karthik\";} So, the oninput bind attribute will fire for every character entered in the textbox. (adsbygoogle = window.adsbygoogle || []).push({}); 2. bind-value-onchange attributeThe bind-value-onchange directive will work like a blur event in jQuery. After entering the text in the textbox and focusing out, it will update the value of the property in DOM. I’ve tried replacing the bind-value-oninput with the bind-value-onchange directive in the above example. Component parametersComponents in blazor can pass the parameters from parent to child component. This is like passing the model values to a partial view in ASP.NET MVC except that we don’t have events in the child component to get notified when the values are updated in the parent component. Let’s have a year increment function in the parent component and pass that year parameter to child component. In the child component, we will check if the year supplied is a leap year or not. 1234567891011121314&lt;h3&gt;Component parameters&lt;/h3&gt;&lt;p&gt;Year: @Year&lt;/p&gt;&lt;br /&gt;&lt;button class=\"btn btn-outline-dark\" onclick=\"@IncrementYear\"&gt;Increment Year&lt;/button&gt;&lt;br /&gt;&lt;LeapYear bind-Year=\"@Year\" /&gt;@functions{ [Parameter] private int Year { get; set; } = 2000; private void IncrementYear() { Year++; }} Here’s the child component: 1234567891011121314151617181920212223242526272829303132&lt;div style=\"border: 2px dashed gray;\"&gt; &lt;h2&gt;Leap Year checker&lt;/h2&gt; &lt;hr /&gt; &lt;h3&gt;Year: @Year&lt;/h3&gt; &lt;h3&gt;@IsLeap&lt;/h3&gt;&lt;/div&gt;@functions{ [Parameter] private int Year { get; set; } private string IsLeap { get { if (((Year % 4 == 0) &amp;&amp; (Year % 100 != 0)) || (Year % 400 == 0)) { return Year + \" is a leap year\"; } else { return Year + \" is not a leap year\"; } } set { } } [Parameter] private EventCallback&lt;int&gt; YearChanged { get; set; }} The parameters that are to be passed across the components should be decorated with Parameter attribute. This should be done in both parent and child components. This child component binding happens with the YearChanged event in the child component as this matches the year parameter’s convention. So, by convention the child component parameter should be 1&lt;LeapYear bind-Year-YearChanged=\"@Year\" /&gt; but that is equivalent to 1&lt;LeapYear bind-Year=\"@Year\" /&gt; To check if the year is a leap year or not we’ll have an IsLeap property in the child component and it will check if the year is a leap or not. That’s it for the data binding in client-side blazor framework. (adsbygoogle = window.adsbygoogle || []).push({}); Source codeSource code of data binding examples is on github. Note: You need visual studio 2019 Preview (as of this May 2019) and .NET Core 3+ to run the solution. Pic Credits Featured image by Efe Kurnaz on Unsplash.com","link":"/data-binding-in-blazor/"},{"title":"Delegates as callback functions in csharp","text":"To update many records in entity framework, it is good to use the .Attach method of the db context instead of looping through every record and fetching the data through EF and updating it.So, I sat down and wrote the attaching part of the code to update the records. But, the .Attach method isn’t efficient when you are not turning off the entity tracker on the data context. So, before updating the records I’ve to turn off AutoDetectChangesEnabled property. Once completed, we will turn on AutoDetectChangesEnabled. Here’s the code, anyway. (adsbygoogle = window.adsbygoogle || []).push({}); 123456789101112131415161718192021222324252627282930313233343536public static void UpdateTodos(IDataContext context) { try { ((DbContext)context).Configuration.AutoDetectChangesEnabled = false; var items = context.TodoItems; foreach (var item in items) { context.TodoItems.Attach(item); item.TodoText = “updating with dummy content”; item.ModifiedDate = DateTime.Now; } } finally { ((DbContext)context).ChangeTracker.DetectChanges(); } } public static void UpdateDetails(IDataContext context) { try { ((DbContext)context).Configuration.AutoDetectChangesEnabled = false; var items = context.Details; foreach (var item in items) { context.Details.Attach(item); item.Notes = item.Notes + Convert.ToString(item.ID * 10); item.ModifiedDate = DateTime.Now; } } finally { ((DbContext)context).ChangeTracker.DetectChanges(); } } We see the calls to change tracking are being turned off and on in both the methods. To make the code look less lines of code, we could move the toggle part of detect changes to separate methods for turning on and off but that still leaves with duplicated method calls. What if we could wrap the change tracking thing to a method, which will also execute our method after detect we turn detect changes off and after executing our method it turns off change detection? This is something like the callback functions in javascript. So, in JavaScript here’s how we write callback functions for the above scenario. 12345678910111213141516var config = { //assuming this as DataContext configuration detectChanges: true }; function SurroundWithDetectChanges (callback) { try { config.detectChanges = false; callback(); } catch () { } finally { config.detectChanges = true; } } SurroundWithDetectChanges(function() { //code to update the table records goes here. }); Similarly, we’ve to leverage the same thing in c# side with the callback functions. (adsbygoogle = window.adsbygoogle || []).push({}); Delegates as callback functionsThere are several advantages of delegates. One of them is their callback ability. Let’s write an extension method which turns the AutoDetectChangesEnabled to off/on as needed and also takes a callback (similar to what we’ve done in JavaScript). 12345678910111213141516 public static class Ext { public static void FastUpdate(IDataContext context, Action&lt;IDataContext&gt; callBack) { try { ((DbContext)context).Configuration.AutoDetectChangesEnabled = false; callBack(context); } finally { ((DbContext)context).Configuration.AutoDetectChangesEnabled = true; ((DbContext)context).ChangeTracker.DetectChanges(); } } } So, the above method turns OFF the detect changes mechanism and calls our callback method we’ll supply to this method. After completing the callback, then we’ll turn ON the detect changes in the finally block of the FastUpdate method. Here’s how to call the above extension method.123456789 Ext.FastUpdate(context, (ctx) =&gt; { var items = ctx.TodoItems; foreach (var item in items) { ctx.TodoItems.Attach(item); item.TodoText = “with auto detect changes”; } }); The second parameter to the FastUpdate method is our callback method. To make it clear, let me rewrite the above call to FastUpdate method. (adsbygoogle = window.adsbygoogle || []).push({}); 123456789101112//call the extension method with callback function Ext.FastUpdate(context, (ctx) =&gt; UpdateTodoItems(ctx)) //callback function private static void UpdateTodoItems(IDataContext ctx) { var items = ctx.TodoItems; foreach (var item in items) { ctx.TodoItems.Attach(item); item.TodoText = “with auto detect changes”; } } This callback(UpdateTodoItems) method, invoked from the FastUpdate method return nothing. It just updates the items on the data context. This looks good but if we want to return something from the callback method, then we‘d have to go for Func delegate. Action delegate is for void callbacks, Func delegate is for returning something to the caller.Let’s write a callback function that returns the result. Func delegates to return valuesLet me take a simple example to return data from the method. Say, we’ve to compute the sum of even numbers.Here’s our sum of even numbers method.1234public static int SumOfEvens(IEnumerable&lt;int&gt; listOfItems) { return listOfItems.Where(a =&gt; a % 2 == 0).Sum(); } This method takes a list of items as input and returns the even numbers sum. Here’s the delegate to call the above method.12 Func&lt;IEnumerable&lt;int&gt;, int&gt; sum = new Func&lt;IEnumerable&lt;int&gt;, int&gt;(SumOfEvens); The sum variable above is our delegate to which we must supply the list of items to get the sum of evens in the list of values. 12var listItems = Enumerable.Range(1, 10); Console.WriteLine(sum(listItems)); That should print us the result. If we were to log the information before calculating the sum of even number we must tweak the delegate assignment here. Here’s the Func delegate declaration with logging information before and after executing the SumOfEvens method. 123456789101112 Func&lt;IEnumerable&lt;int&gt;, int&gt; sum = new Func&lt;IEnumerable&lt;int&gt;, int&gt;(a =&gt; { Log($\"-- About to calculate the even sum for {a.Count()} items ---“); var result = SumOfEvens(a); Log($”-- sum of the even numbers is: {result} ---“); return result; }); public void Log(string message) { Console.WriteLine(message); } In the above code, we’ll log the number of items to print before calculating the sum. Once we get the sum, we’ll print the sum using Log extension method. And at the end, we’ll just return the result. (adsbygoogle = window.adsbygoogle || []).push({});","link":"/delegates-as-callback-functions-in-csharp/"},{"title":"Customizing automatic HTTP 400 error response in ASP.NET Core Web APIs","text":"Annotating the controllers with ApiController attribute in ASP.NET Core 2.1 or higher will enable the behavioral options for the API’s. These behavioral options include automatic HTTP 400 responses as well.In this post, we’ll see how we can customize the default error response from the ASP.NET Core Web API. Default error responseIf you are creating a new default ASP.NET Core web API project, then you’d see the ValuesController.cs file in the project. Otherwise, create a Controller and create an action method to a parameter to test the automatic HTTP 400 responses. (adsbygoogle = window.adsbygoogle || []).push({}); If you are creating a custom API for yourself you’d need to annotate the controller with [ApiController] attribute. Otherwise, the default 400 responses won’t work. I’ll go with the default ValuesController for now. We already have the Get action with id passed in as the parameter. 123456// GET api/values/5[HttpGet(“{id}”)]public ActionResult&lt;string&gt; Get(int id){ return “value”;} Let’s try to pass in a string for the id parameter for the Get action through Postman. This is the default error response returned by the API. Notice that we didn’t have the ModelState checking in our Get action method this is because ASP.NET Core did it for us as we have the [ApiController] attribute on top of our controller. Customizing the error responseTo modify the error response we need to make use of the InvalidModelStateResponseFactory property. InvalidModelStateResponseFactory is a delegate which will invoke the actions annotated with ApiControllerAttribute to convert invalid ModelStateDictionary into an IActionResult. The default response type for HTTP 400 responses is ValidationProblemDetails class. So, we will create a custom class which inherits ValidationProblemDetails class and define our custom error messages. (adsbygoogle = window.adsbygoogle || []).push({}); CustomBadRequest classHere is our CustomBadRequest class which assigns error properties in the constructor. 123456789101112131415161718192021222324252627282930313233343536373839404142434445public class CustomBadRequest : ValidationProblemDetails{ public CustomBadRequest(ActionContext context) { Title = “Invalid arguments to the API”; Detail = “The inputs supplied to the API are invalid”; Status = 400; ConstructErrorMessages(context); Type = context.HttpContext.TraceIdentifier; } private void ConstructErrorMessages(ActionContext context) { foreach (var keyModelStatePair in context.ModelState) { var key = keyModelStatePair.Key; var errors = keyModelStatePair.Value.Errors; if (errors != null &amp;&amp; errors.Count &gt; 0) { if (errors.Count == 1) { var errorMessage = GetErrorMessage(errors[0]); Errors.Add(key, new[] { errorMessage }); } else { var errorMessages = new string[errors.Count]; for (var i = 0; i &lt; errors.Count; i++) { errorMessages[i] = GetErrorMessage(errors[i]); } Errors.Add(key, errorMessages); } } } } string GetErrorMessage(ModelError error) { return string.IsNullOrEmpty(error.ErrorMessage) ? “The input was not valid.” : error.ErrorMessage; }} I’m using ActionContext as a constructor argument as we can have more information about the action. I’ve used the ActionContext as I’m using the TraceIdentifier from the HttpContext. The Action context will have route information, HttpContext, ModelState, ActionDescriptor. You could pass in just the model state in the action context at least for this bad request customization. It is up to you. Plugging the CustomBadRequest in the configurationWe can configure our newly created CustomBadRequest in Configure method in Startup.cs class in two different ways. using ConfigureApiBehaviorOptions off AddMvc()ConfigureApiBehaviorOptions is an extension method on IMvcBuilder interface. Any method that returns an IMvcBuilder can call the ConfigureApiBehaviorOptions method. 12 public static IMvcBuilder ConfigureApiBehaviorOptions(this IMvcBuilder builder, Action&lt;ApiBehaviorOptions&gt; setupAction); The AddMvc() returns an IMvcBuilder and we will plug our custom bad request here. 123456789101112 services.AddMvc() .SetCompatibilityVersion(CompatibilityVersion.Version_2_2) .ConfigureApiBehaviorOptions(options =&gt; { options.InvalidModelStateResponseFactory = context =&gt; { var problems = new CustomBadRequest(context); return new BadRequestObjectResult(problems); }; }); (adsbygoogle = window.adsbygoogle || []).push({}); using the generic Configure methodThis will be convenient as we don’t chain the configuration here. We’ll be just using the generic configure method here. 12345678910111213 services.Configure&lt;ApiBehaviorOptions&gt;(a =&gt;{ a.InvalidModelStateResponseFactory = context =&gt; { var problemDetails = new CustomBadRequest(context); return new BadRequestObjectResult(problemDetails) { ContentTypes = { “application/problem+json”, “application/problem+xml” } }; };}); Testing the custom bad requestThat’s it for configuring the custom bad request, let’s run the app now. You can see the customized HTTP 400 error messages we’ve set in our custom bad request class showing up. Image Credits Featured Image by Sandrachile from Unsplash.com","link":"/customizing-automatic-http-400-error-response-in-asp-net-core-web-apis/"},{"title":"How c# compiler looks at switch case statements","text":"Every developer writes a switch case statement at least once in their life of programming but as he/she understands the switch is no longer maintainable they tend to look for patterns and do refactoring. In this post, we’ll see what’s actually inside of a switch case statement. The switch-case statementHere is the snippet of the code 1234567891011121314public void M(string x) { switch(x) { case \"a\": Console.WriteLine(\"a value\"); break; case \"b\": Console.WriteLine(\"b value\"); break; case \"c\": Console.WriteLine(\"c value\"); break; } } IL of the switch case statementthe IL for the above code 1234567891011121314151617181920212223242526272829303132333435363738.method public hidebysig instance void M ( string x ) cil managed { // Method begins at RVA 0x2050 // Code size 73 (0x49) .maxstack 2 IL_0000: ldarg.1 IL_0001: ldstr \"a\" IL_0006: call bool [mscorlib]System.String::op_Equality(string, string) IL_000b: brtrue.s IL_0028 IL_000d: ldarg.1 IL_000e: ldstr \"b\" IL_0013: call bool [mscorlib]System.String::op_Equality(string, string) IL_0018: brtrue.s IL_0033 IL_001a: ldarg.1 IL_001b: ldstr \"c\" IL_0020: call bool [mscorlib]System.String::op_Equality(string, string) IL_0025: brtrue.s IL_003e IL_0027: ret IL_0028: ldstr \"a value\" IL_002d: call void [mscorlib]System.Console::WriteLine(string) IL_0032: ret IL_0033: ldstr \"b value\" IL_0038: call void [mscorlib]System.Console::WriteLine(string) IL_003d: ret IL_003e: ldstr \"c value\" IL_0043: call void [mscorlib]System.Console::WriteLine(string) IL_0048: ret } // end of method C::M (adsbygoogle = window.adsbygoogle || []).push({}); What’s in the IL?I’ll walk through this IL, at Line 12 in the IL there’s a string equality checking which checks for the case statement to match once it is matched at Line 18 a brtrue.s IL_0028(a branch to target if the value is non-zero) is issued, this will check the result of the above line (the equality comparison). Let’s consider our best case to match “a” so the control is now transferred to IL_0028 this is where our write line statement at. So, we’ll print that out. What the IL looks like?So, to give a glimpse of that IL in C# it is like this 123456789101112131415161718192021public void M(string x){ if (!(x == \"a\")) { if (!(x == \"b\")) { if (x == \"c\") { Console.WriteLine(\"c value\"); } } else { Console.WriteLine(\"b value\"); } } else { Console.WriteLine(\"a value\"); }} You might be refactoring the above if statements for a cleaner switch case statement but you’d end up with the above code when the compiler transforms the switch. Wrapping upIf you ever refactor an if-else chain to a simple switch case statement then it is not so good but will be clean as compiler generates the if-else chain for you instead you ending up in tangled between if-else chain. (adsbygoogle = window.adsbygoogle || []).push({}); One tip for those who refactor these if-else statements to switch is that run code metrics tools to see if there is any improvement on the maintainability index. I’m sure there won’t be if the code metric tool really sees this IL stuff. But, the switch is also not a good thing to do if you think from the design perspective of the application. That is why people tend to introduce the polymorphism instead of switch design or use dictionary patterns. Thanks for reading.","link":"/How-c-compiler-looks-at-switch-case-statements/"},{"title":"event bubbling","text":"Event bubbling concept is a way of propagating the events from the element clicked all the way to the ancestor. This is a beginner article so if you are already aware of this you can skip this article. What is event bubbling?The principle of event bubbling is fairly simple. Here it goes. When an event happens on an element, the respective handler is run and is bubbled on to the parent element, the parent element handles the event and the event is bubbled on to its ancestors (except when bubbling is stopped). event bubbling With an exampleLet’s look at a sample HTML.123456789101112131415161718&lt;table id=\"grid\"&gt; &lt;thead&gt;&lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;row 1 cell 1&lt;/td&gt; &lt;td&gt;row 1 cell 2&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;row 2 cell 1&lt;/td&gt; &lt;td&gt;row 2 cell 2&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;row 3 cell 1&lt;/td&gt; &lt;td&gt;row 3 cell 2&lt;/td&gt; &lt;/tr&gt; &lt;!-- some other tr rows --&gt; &lt;/tbody&gt;&lt;/table&gt; (adsbygoogle = window.adsbygoogle || []).push({}); If there is an event happening on any TD element in the above code, then the event handler for that TD element will be fired and executed, once the TD event handler completes its operation, then it’s parent event listener is fired (event bubbled here). So, the TR element handles the event and passes it to the tbody, the tbody handles its specific thing and passes it to the table and so on until the document object is reached. To see this in action, let’s add event listeners for every HTML tag in the above HTML. Here’s is the demo in jsfiddle. Just try to click on any td cell and observe that all the listeners are fired all the way up to the document listener. The requirement for this article is that for the above table whenever we click on any TD element we’ve to show the content in an alert (so, row x column y should be displayed). To satisfy the requirement, we’d generally attach an event listener on the TD element and when the user clicks we’ll alert the text in that TD element. 12345$(function(){ $(\"td\").on(\"click\", function(e){ alert($(this).text()); });}); Now, the above code looks pretty obvious but imagine we have 100 rows and every row is having 5 columns, then the click event listener will bind to all the 500 (100 * 5) TD elements. To solve this, we’ll just attach a listener on the grid and see if the click happened on the TD element and then take necessary action. This needs a little work, but it is just a single listener for the entire grid. In our case, the logic should be pretty easy1234567$(function(){ $(\"#grid\").on(\"click\", function(e){ var cell= $(e.target); //Get the cell if(cell.is('TD')) alert('Cell data: ' + cell.text()); });}); Well, the code works. But how does it work? Because of event bubbling. Yes, the TD element receives a click and there is no handler attached to it so bubbled up to tr, tbody these don’t have any listeners it bubbles up to the table element which has a click event handler and is fired. (adsbygoogle = window.adsbygoogle || []).push({}); Note that once the event is handled in the table (grid) it doesn’t stop there it still bubbles up to the document object (because we didn’t stop the bubbling). Event bubbling is the concept of bubbling the events up until the hierarchy so to catch the bubbling we can have a listener on the parent element so that we can take appropriate action based on the target element. When this is implemented, we will call it as event delegation. Javascript solution for event delegationThis is a javascript solution to event delegation. If you are using plain javascript, then you should remember one thing here. The event.target is always the element that is clicked on and not the element it is bubbled up to. 123456var table = document.getElementById(\"grid\");table.onclick = function (evt) { var td = evt.target.closest(\"td\"); //evt.target is the element that recieves the click if(!td) return; //if the click happens on any other element we can ignore the handling //do something with the event or take necessary action} jQuery event delegationInstead of verifying if the clicked element is TD or not, jQuery has support for event delegation. So, you can specify what element to listen on when a click happens on a grid. definition Event delegation allows us to attach a single event listener, to a parent element, that will fire for all descendants matching a selector, whether those descendants exist now or are added in the future.- jQuery Here’s how we can achieve event delegation in jQuery. eventdelegation12345$(function(){ $(\"#grid\").on(\"click\", \"td\", function(evt) { alert(\" the td content is : \" + $(this).text()) });}); One might think that this is same as having the selector combined with the grid notdelegated1$(\"#grid td\").on(\"click\", function() {}); This is not a delegated listener because we are attaching click event listeners for all the td elements in the #grid. Whereas, the delegated listener will listen on the grid and if the click happens on the td element then the listener will be fired. (adsbygoogle = window.adsbygoogle || []).push({}); ConclusionWith event delegation, we can have some performance improvements on the page. jQuery event delegation is good but if you have to stop/off the event delegation, then the answer is you can’t! Yes, you cannot stop the event delegation on a specific element inside a parent container. I’d recommend stopping the bubbling(using e.stopPropogation()) if you have handled the specific event, otherwise it will fire the parent listeners if you have any.","link":"/event-bubbling/"},{"title":"Don't use Func delegate on the Entity Framework entities","text":"In this post, I’ll show you what happens when you use a func delegate on the Entity Framework entities.I have seen a case where a developer wrote a LINQ query with Func delegate which will get the data from the database and returns back to the UI. The query was working fine but it needs performance tuning as it is taking more time for a simple query. Example: LINQ QueryThis is the LINQ query that we are interested in. 123456789101112131415public static void Main(string[] args){ Func&lt;Employee, bool&gt; dynamicFilter = GetDynamicQuery(); var results = EmployeeContext.Employee.Where(dynamicFilter).Count();}public static Func&lt;Employee, bool&gt; GetDynamicQuery(){ Func&lt;Employee, bool&gt; e; //the lambda expressions set to the result \"e\" are dynamically obtained. //For the purpose here, let's assume we are getting the following //lambda expression e = p =&gt; p.JobTitle == \"Design Engineer\"; return e;} The above code will execute and will return the employees whose have the designation as “Design Engineer” (it is actually dynamic based on few other conditions). (adsbygoogle = window.adsbygoogle || []).push({}); Check out this article if you are interested in writing dynamic queries with Expression Trees If you don’t know what will happen under the hood then you will fail to refactor this and will certainly write a stored procedure to improve the performance. Background on LINQ query executionWhen a LINQ query is executed, it finds the Expressions in the query and will translate into appropriate SQL queries and will be submitted to the server. This gives us the result. Ok, why it took more timeNow, let’s understand why it took more time to return the result. The .Where extension method has two overloads. One that implements IQueryable, which takes Expression parameter and the other that implements IEnumerable, which takes a Func. The IQueryable overload of Where 1public static IQueryable&lt;TSource&gt; Where&lt;TSource&gt; (this IQueryable&lt;TSource&gt; source, Expression&lt;Func&lt;TSource,int,bool&gt;&gt; predicate); The IEnumerable overload of Where 1public static IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate); Now, in our case, the predicate here is a Func. So, the second version of the .Where that implements IEnumerable will be used. One important thing to note here is that Entity Framework will consider only IQueryable’s to translate into SQL. So, if we use the IEnumerable extension for the entities that will not be translated. With that in mind, let’s examine our Query on the Employee entity. 12Func&lt;Employee, bool&gt; dynamicFilter = p =&gt; p.JobTitle == \"Design Engineer\";var results = EmployeeContext.Employee.Where(dynamicFilter); (adsbygoogle = window.adsbygoogle || []).push({}); If you can check the output of the operation you can see that we are getting correct results. But, the fact is that our Func delegate is not translated into SQL. So, only the EmployeeContext.Employee is translated into appropriate SQL query and will be sent to SQL server. That will fetch all the records of the employee table and load into memory and will perform an IEnumerable where filter on the whole collection to find the appropriate employee whose designation is “Design Engineer”. If the Employee table is huge then the query will take more time to fetch the records. Let’s see this in action with LINQPad. For the purpose of this article, I’ve restored AdventureWorks2014 database on my machine. with func delegate12Func&lt;Employee, bool&gt; funcPred = p =&gt; p.JobTitle == \"Design Engineer\";var total = Employees.Where(funcPred).Count(); SQL query generated for Func in LINQPad12SELECT [t0].[BusinessEntityID], [t0].[NationalIDNumber], [t0].[LoginID], [t0].[OrganizationNode], [t0].[OrganizationLevel], [t0].[JobTitle], [t0].[BirthDate], [t0].[MaritalStatus], [t0].[Gender], [t0].[HireDate], [t0].[SalariedFlag], [t0].[VacationHours], [t0].[SickLeaveHours], [t0].[CurrentFlag], [t0].[rowguid] AS [Rowguid], [t0].[ModifiedDate]FROM [HumanResources].[Employee] AS [t0] Look at the SQL generated for the above code, it just pulled everything from the Employee table. And, once we get the entire table to in-memory, LINQ will perform the filter on the entire list of employees and returns the result. The solution to this problem is to wrap the Func with Expression. Solution: Go for Expression&lt;Func&gt;Let’s wrap Expression around Func and see the results. With expression wrapped around func12Expression&lt;Func&lt;Employee, bool&gt;&gt; funcPred = p =&gt; p.JobTitle == \"Design Engineer\";var total = Employees.Where(funcPred).Count(); The sql generated for the above code isSQL query generated for Expression in LINQPad1234DECLARE @p0 NVarChar(1000) = 'Design Engineer'SELECT COUNT(*) AS [value]FROM [HumanResources].[Employee] AS [t0]WHERE [t0].[JobTitle] = @p0 (adsbygoogle = window.adsbygoogle || []).push({}); As you can see we have got the exact SQL query for the LINQ query we wrote. The above query doesn’t take much time as the query directly returns the result instead of returning everything in the tables. ConclusionIf we mix these Func delegates in C# with the Entity framework entities then this would happen. If you don’t understand the inner workings of the LINQ to SQL translation, you will end up querying the entire table in LINQ. More importantly, you will get the result but the query is slow.","link":"/don-t-use-func-delegate-on-the-ef-entities/"},{"title":"Generating Sequence Numbers In LINQ Query","text":"In this post, we’ll see how to generate sequence numbers along with the data that we need in LINQ C#. Generating sequence numbers in SQLIn general, we can write a stored procedure something like this in SQL and then map this to a DTO or a ViewModel in C# so that we can get the sequence numbers along with the data. 12345SELECT ROW_NUMBER() OVER (ORDER BY Column1) AS SeqNo, DataColumn1, DataColumn2 FROM TestTable WHERE IsActive = 1 But, this isn’t any good if we are using Entity Framework. Let’s see what we can do to generate the sequence numbers in C#. Generating sequence numbers in C# LINQFirst, we’ll write our query with DB context to fetch the data we want. 123456var data = DbContext.TestTable .Where(a =&gt; a.IsActive) .Select(a =&gt; new { DataColumn1 = a.DataColumn1, DataColumn2 = a.DataColumn2 }); The above LINQ query just pulls Datacolumn1, Datacolumn2 from TestTable if executed. Now, to get another column with sequence number, we’ll just enumerate the results of the above LINQ query so that we’ll get the columns we want. Luckily, the IEnumerable interface provides an overload of SELECT which can do this.Here is the SELECT overload definition. (adsbygoogle = window.adsbygoogle || []).push({}); 1234public static IEnumerable&lt;TResult&gt; Select&lt;TSource, TResult&gt;( this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, int, TResult&gt; selector )So, we’ll see how it’s done. 123456var withSequence = data.AsEnumerable() .Select((a, index) =&gt; new { a.DataColumn1, a.DataColumn2, SequenceNo = index + 1 }); As you can see in Line 01, we’ve enumerated the results from the LINQ to Entities and then we performed a .Select() on the enumerated set.The index will have a starting value of zero so we’ll increment it to make the indexing start from 1. It’s up to you.Here is the result. Why didn’t we do it on the first LINQ query?The first LINQ query is IQueryable and it doesn’t have the overload of .Select() that has an index. So, we have to enumerate the results and then add sequence. So, in order to do it, we’ve to first make the IQueryable result to and IEnumerable result (as we did this in our second query using .AsEnumerable()). Thanks for reading. (adsbygoogle = window.adsbygoogle || []).push({});","link":"/generating-sequence-numbers-in-linq-query/"},{"title":"Get only specific types from List in C#","text":"This is a post to get the specific type of items from a mixed list of items. I have tried couple of solutions for the problem but it looks like there’s more elegant solution than my solution. ProblemThere will be a list of objects from which we have to extract only integers from it. Ex:12List&lt;object&gt; listOfObjects = new List&lt;object&gt;{ \"tada\", 10, \"123\", 22.0 \"sttring\", 1};IEnumerable&lt;int&gt; result = GetOnlyInts(listOfObjects); //the result should b 10, 1 We’ve to implement the solution in GetOnlyInts() method so as to return only integers from it. A Draft thoughtOnce you are given that problem, we tend to loop over the content and try to find out the type of each item and store that in another list and return that back. Solution 112345678910public static IEnumerable&lt;int&gt; GetOnlyInts(List&lt;object&gt; listOfObjects){ var result = new List&lt;int&gt;(); foreach(var item in listOfObjects) { if (item is int) result.Add((int)item); } return result;} But as we think through, the listOfObjects is a List. So, there’s no need of the for loop and add it to result variable. We’ll fine tune here using LINQ. Ignore the method signature. (adsbygoogle = window.adsbygoogle || []).push({}); Solution 2123456return listOfObjects.Select(a =&gt; { return new { success = a is int, val = a }; }) .Where(a =&gt; a.success) //filter only successful integers .Select(v =&gt; (int)v.val).ToList(); //return to a list of integers}); This is a good solution and observe how we eliminated the failed cases in the where clause filter. Best/Short solution1234public static IEnumerable&lt;int&gt; GetOnlyInts(List&lt;object&gt; listOfObjects){ return listOfObjects.OfType&lt;int&gt;();} The ‘OfType’ extension method only the specific type of item that is requested on. Let’s examine the source code of OfType extension method to see what it has. OfType() source codeSource code link to OfType extension method 12345678910public static IEnumerable&lt;TResult&gt; OfType&lt;TResult&gt;(this IEnumerable source) { if (source == null) throw Error.ArgumentNull(\"source\"); return OfTypeIterator&lt;TResult&gt;(source);}static IEnumerable&lt;TResult&gt; OfTypeIterator&lt;TResult&gt;(IEnumerable source) { foreach (object obj in source) { if (obj is TResult) yield return (TResult)obj; }} (adsbygoogle = window.adsbygoogle || []).push({}); As you can see from the above source code of OfType method, it has the same old foreach statement on the IEnumerable. But it yield returns the values. If the type of the object is TResult, then the value is returned by casting it to TResult.","link":"/get-only-specific-types-from-list/"},{"title":"Getting started with ASP.NET Core 2.1","text":"This post is just an introductory post on the ASP.NET Core application. In this post, we’ll create an ASP.NET Core application and we’ll examine the folders and code. If you miss my previous post on ASP.NET Core and Benefits. Take a look. Prerequisites:To run/create applications for .NET Core we need the following things Visual Studio 2017 .NET Core 2.1 SDK (for the purpose of this article only). Make sure Visual Studio 2017 has the “cross-platform development” workload is installed through visual studio installer Creating our application:For creating .NET Core applications open the Visual Studio 2017 and select File &gt;&gt; New &gt;&gt; Project. And this should launch the Templates wizard like this. Select as highlighted in the below screenshot. The ASP.NET Core Web application template holds several other templates. Select the appropriate template and framework and hit ok. Now, this should create our application. Notice that we also have templates for Angular, React and Redux in the above screen. (adsbygoogle = window.adsbygoogle || []).push({}); Let’s run the application. Press F5 or Ctrl + F5. There it is. Our application is up and running. Let’s examine the folder structure now. Here is what our solution looks like As you can see we also have wwwroot folder along with MVC structure. The wwwroot folder will have static files such as CSS, JS, HTML, images. This is called as Web root. To access these files, the URI format is http://serveraddress/foldername/filename Let’s try to access one image. Program.csHere is the screenshot of the code This is just having a Main method to run the app with the default host builder. Notice we have a CreateWebHostBuilder property. WebHost.CreateDefaultBuilder method sets the content root to the current directory. The Program.cs also sets the startup using .UseStartup method. (adsbygoogle = window.adsbygoogle || []).push({}); Startup.csLet’s see what we have in the Startup.cs class 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051namespace Coderethinked.Web{ public class Startup { public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } // This method gets called by the runtime. Use this method to add services to the container. public void ConfigureServices(IServiceCollection services) { services.Configure&lt;CookiePolicyOptions&gt;(options =&gt; { // This lambda determines whether user consent for non-essential cookies is needed for a given request. options.CheckConsentNeeded = context =&gt; true; options.MinimumSameSitePolicy = SameSiteMode.None; }); services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1); } // This method gets called by the runtime. Use this method to configure the HTTP request pipeline. public void Configure(IApplicationBuilder app, IHostingEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } else { app.UseExceptionHandler(\"/Home/Error\"); app.UseHsts(); } app.UseHttpsRedirection(); app.UseStaticFiles(); app.UseCookiePolicy(); app.UseMvc(routes =&gt; { routes.MapRoute( name: \"default\", template: \"{controller=Home}/{action=Index}/{id?}\"); }); } }} The ConfigureServices method is called by the runtime as indicated in the comments above the method. This method can be used to add services. Ex:1234services.AddAntiforgery();services.AddCors();services.AddAuthorization();services.AddAuthentication(); There are several other options to add into this Configure services method. (adsbygoogle = window.adsbygoogle || []).push({}); Configure:This method is used to configure what the application needs. Notice the configure method here, we have the following statement app.UseStaticFiles(); This is responsible for serving the static files in our application. If we comment that out, we cannot access the static resources anymore. We’ll see all our images, js and CSS will be stopped and our application looks like this. Things like SignalR, Routing, Third party authentication can be configured here. That’s about the Startup file. Launch Settings:This JSON file is to configure holds the configurations to run the application. As we are running the application on IIS Express, the necessary configuration for IIS Express is utilized. 12345678\"iisSettings\":{ \"windowsAuthentication\":false, \"anonymousAuthentication\":true, \"iisExpress\":{ \"applicationUrl\":\"http://localhost:51681\", \"sslPort\":44307 }} In the above JSON, we have applicationUrl: http://localhost:51681 and a sslPort: 44307 is allocated. So, 44307 is for SSL port meaning this is for accessing the site with HTTPS://. So https://localhost:44307 is secured while http://localhost:51681 is just a plain HTTP which is not secured. So, HTTP and HTTPS are configured by default. The other folders like Controllers, Models, Views are with the any other MVC projects we have encountered before. Not found anything special in those files Thanks for reading.","link":"/getting-started-with-asp-net-core-2-1/"},{"title":"LibMan - Microsoft Library Manager for client side libraries","text":"Back in the days if we want to download jQuery library for a POC of a project we used to download the required js and CSS files from jquery site and then locating your folder to place your libraries within. Although, this job is being now replaced with package management systems you’ll need to install a package management system to do it for us. LibMan does it elegantly without any package manager. What is LibMan? LibMan(libman.json) is for managing client-side libraries in projects. It is a way of organizing client-side libraries into a specific folder without much hassle. LibMan is added in Visual Studio as part of the update 15.8. Note that this is an experimental feature built into visual studio. Purpose With LibMan, you don’t need any additional package management system to be installed to download client-side libraries for projects. This doesn’t mean that libman is a package management system. Reduces the build tasks of organizing the library files. You can have the libman for any web projects. LibMan is not tied to any specific project. (adsbygoogle = window.adsbygoogle || []).push({}); LibManFor Web Projects, you can just open the folder in Visual Studio and add a libman.json by yourself or you can do it with context menu option as well. We’ll see how to do it. In this post, I’ll just create a folder as app and open this folder as a website and add the libman in here. Notice the empty folders in my solution here. Now, right click on the app and select Manage Client-Side Libraries… from the context menu. This should create a libman.json file in the project.orGo to WebSite/Project and select Manage Client-Side Libraries… from the menu Both of the above options would create libman.json file in the project with the default configuration (if the libman.json does not exist already) Options in LibMan: defaultProvider: LibMan offers 3 different providers cdnjs (default provider) filesystem (from local files) unpkg (a fast, global cdn) defaultDestination: The default destination to all store the libraries, if the destination for a library is not specified. This option is not included by default in the libman.json config file. libraries: An array of libraries to configure. Downloading jQuery and storing in websiteAs part of this article, we’ll just download the latest version of the jQuery library from cdnjs network and map it to our local lib folder on the website. (adsbygoogle = window.adsbygoogle || []).push({}); One of the good things about this LibMan integration into Visual Studio is that it provides an intellisense if the provider is configured to a CDN network such as cdnjs or unpkg. The libman.json is not just a JSON file but we’ll have some intellisense while we configure it. Let’s map the jQuery to the solution/project folder. Add the following into the libraries array of libman.json12345{ \"library\": \"jquery@3.3.1\", \"destination\": \"lib/jQuery_3.3.1\", \"provider\": \"cdnjs\"} After you copy and paste the above code. Save the file. Now the jQuery files should be downloaded as you can see in the output window. As you can see in the lib folder jQuery library is downloaded. Notice that only a few js files are downloaded and no CSS files are downloaded. You can customize the files that you want to download using the files options inside a library objectEx:123456{ \"library\": \"jqueryui@1.12.1\", \"destination\": \"lib/jQuery_UI\", \"provider\": \"cdnjs\", \"files\": [ \"jquery-ui.css\", \"images/ui-icons_444444_256x240.png\" ]} So, you can download whatever the files you want. Restoring manuallyYou can still restore the files manually by right-clicking on the project folder and selecting Restore Client-Side Libraries. (adsbygoogle = window.adsbygoogle || []).push({}); Restoring libraries on BuildThere is an option to restore the files during the build as well. This can be done by right-clicking on the libman.json and selecting Enable Restore Client-Side Libraries on Build.. This will prompt you for an alert dialog in Visual Studio This will add a package to the packages in the package.json file as we are in a web project. 1234&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;packages&gt; &lt;package id=\"Microsoft.Web.LibraryManager.Build\" version=\"1.0.163\" targetFramework=\"net40\" /&gt;&lt;/packages&gt; If you are on a csharp project, then a package reference will be added in the .csproj file 123456789101112&lt;Project Sdk=\"Microsoft.NET.Sdk.Web\"&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;netcoreapp2.1&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=\"Microsoft.AspNetCore.App\" /&gt; &lt;PackageReference Include=\"Microsoft.Web.LibraryManager.Build\" Version=\"1.0.163\" /&gt; &lt;/ItemGroup&gt;&lt;/Project&gt; (adsbygoogle = window.adsbygoogle || []).push({}); TakeawayLibMan is a great addition to the visual studio. LibMan will avoid you to stop downloading the client side libraries from the web and unzip them and add it to the appropriate library folders that we wish to have. A cleaner way to set up the client side libraries without much effort. If you are a guy who does Research and Development (R&amp;D) all day long this LibMan is for you. You don’t need to search for the libraries around the web. Just use LibMan. This LibMan still has its limitations to few providers as of now. But, hopefully, Microsoft might add few of them over time. That’s it for the post.","link":"/libman-microsoft-library-manager-for-client-side-libraries/"},{"title":"stopPropogation() vs preventDefault() in JavaScript","text":"In the previous blog post, we looked at what event bubbling is and how we can implement it. In this article we’ll see what is the difference between stopPropogation() and preventDefault() methods in an event handler. e.stopPropagation()The stopPropagation() on an event will stop bubbling until the event chain. If you call the stopPropagation() on the event then the event won’t be bubbled up and the parent element will not receive the event triggers. We’ll use the event bubbling demo code here to stop propagating. In the event bubbling example, it will trigger all the events when we click on any of the TD element. Let’s stop the event bubbling when we click on any TD element. (adsbygoogle = window.adsbygoogle || []).push({}); Let’s change the TD click event to have our stopPropogation. 1234$(\"td\").on(\"click\", function (e) { e.stopPropagation(); alert(\"td click fired\");}); Once we did the above change, our events won’t be bubbled up top when the click event happens on the TD element. Stopping the propagation/bubbling can be useful if we use event delegation to have a single event for all the nested elements (ex: a single event on a table element, which will take care of where it was clicked and what action it has to take). Here is the jsFiddle demo with the propagation stopped on the td element. Try clicking on any of the TD cells and you should only get one alert instead of getting multiple alerts. e.preventDefault()Unlike stopPropagation(), preventDefault() will prevent the default browser action on that event. Let’s say we have an input field which is a postal code or PIN code. We don’t want the user to enter alphabets and special characters into the field. The field should only accept numbers. One way to do is instead of having the input type as the text we can have the type as a number so that only numbers will be accepted but this will allow the user to decrement or increment the numbers in the input by using arrow keys (up/down). So, let‘s wire up a keypress event on that element and call the preventDefault() on the event if the entered character is not a number. Here is how it can be done. 12345$(\"#alpha\").keypress(function(event) { if (event.which != 8 &amp;&amp; isNaN(String.fromCharCode(event.which))) { event.preventDefault(); //prevents from being entered }}); Here is the demo. (adsbygoogle = window.adsbygoogle || []).push({}); Note that the `event.preventDefault()` will just prevent the event from happening for that specific event. So, if you have any keypress event registered on the on the parent element or ancestors, those will still be fired due to the bubbling effect. **e.preventDefault() will not stop the bubbling**. ## returning false from the event handler in jQuery returning false from an event in jQuery will have two effects. The `return false;` statement in a jQuery event listener does both the `e.stopPropagation()` and `e.preventDefault()`. Let's add a body keypress listener along with the keypress event on the input field. 12345678$(\"body\").keypress(function() { alert(\"body key press\");})$(\"#alpha\").keypress(function(event) { if (event.which != 8 &amp;&amp; isNaN(String.fromCharCode(event.which))) { event.preventDefault(); }}); So, whenever we press a key in the text box, if the key is other than a number then the character won’t be inserted into the text box and we will present an alert to the user as we have key press event registered on the `body` tag. The alert will still be triggered though we enter a number as we are not stopping the propagation in the input field. Now, let's replace `event.preventDefault()` statement with a `return false` and try that in the [fiddler](http://jsfiddle.net/sq8rcyxf/). You can observe that the alert in body keypress will no longer be presented when we press any alphabet. This is because we are stopping the bubbling and preventing the default action on the event with return false statement. Here is the modified jsFiddle. best place to handle actions on the eventWe can stop the event actions anywhere in the event handler. I’d recommend you to add these event actions at the beginning of the event handler function. This is because if you have the event action (say e.stopPropagation()) at the end of the function, and if your functional code has any run-time errors, then our e.stopPropagation() statement will not be reached and because of to the event bubbling effect, we might end up triggering the events up the hierarchy. Example:1234$(\"td\").on(\"click\", function (e) { //functional code here e.stopPropagation();}); As you can see from the above code if the function piece of code has any errors the rest of the lines won’t be executed and our e.stopPropagation() statement will not be considered. Instead of having the e.stopPropagation() at the end of the handler, if we can have it at the beginning of the handler then though our functional code fails, the propagation will not happen (meaning e.stopPropagation() works). Example:1234$(\"td\").on(\"click\", function (e) { e.stopPropagation(); //functional code here}); (adsbygoogle = window.adsbygoogle || []).push({});","link":"/stoppropogation-vs-preventdefault-in-javascript/"},{"title":"Tag Helpers in ASP.NET Core","text":"In this post, we’ll see how to use the tag helpers inside razor files in ASP.NET Core application. Key Takeaways: What are Tag Helpers in ASP.NET core and why use Tag Helpers. Using tag Helpers. How to add/remove/opt-out of tag helpers. Tag helpers scope. What are Tag Helpers in ASP.NET Core?Unlike normal HTML Helpers in MVC, the Tag Helpers in ASP.NET Core allow us to have server-side code to customize the HTML elements in razor files. Why use Tag Helpers? Enables HTML friendly development experience Provides intellisense for using server-side properties Using the Tag HelpersWe’ll use the input element asp-for attribute and see how the tag helpers work. So, we’ve got a Post Model class here. 123456789public class PostModel{ [Display(Name = \"Post ID\")] public int PostID { get; set; } [Required] [Display(Name = \"Post Name\")] public string PostName { get; set; }} (adsbygoogle = window.adsbygoogle || []).push({}); Now, go to the Views/_ViewImports.cshtml file and add the following 1@addTagHelper *, &lt;your assembly name&gt; Now in our Index.html file, we’ll just try to get the names of the PostModel into our Razor. 12@model CoreTagHelpers.Models.PostModel&lt;input asp-for=\"PostName\" /&gt; That should generate the following HTML with the PostName in the id and name attributes. And, it also generated data-val, data-val-required attributes as we have the [Required] data annotation decorated to the Post name property in our model class. 1&lt;input type=\"text\" data-val=\"true\" data-val-required=\"The Post Name field is required.\" id=\"PostName\" name=\"PostName\" value=\"Hello\"&gt; The value for the input Hello is generated as I’ve created an object of PostModel in the controller action and passed it to the view. 12345public IActionResult Index(){ var data = new PostModel { PostID = 1, PostName = \"Hello\" }; return View(data);} @addTagHelper@addTagHelper directive makes the necessary tag helpers available to the view. In the above input tag helper case, I’ve used a wildcard (*) to get all the model classes but you could use specific model classes only available to the view by giving a fully qualified name. 1@addTagHelper CoreTagHelpers.Models.EmailTagHelper, CoreTagHelpers (adsbygoogle = window.adsbygoogle || []).push({}); @removeT (adsbygoogle = window.adsbygoogle || []).push({}); agHelperThis directive will remove the tag helper which was added. We can ignore a tag helper from _ViewImports.cshtml by adding @removeTagHelper in the view. Adding @removeTagHelper in the Views\\_ViewImports.cshtml will remove the tag helper from all the views. Opt out of tag helpers (!)The opt-out character (“!”) is used to disable the Tag Helper at the element level. 1&lt;!label asp-for=\"PostID\"&gt;&lt;/!label&gt; With the opt-out character, the HTML will not be generated for the label tag in the above case. We can use this opt-out character if we want to conditionally control rendering of the HTML elements. The scope of Tag helpersWe can add _ViewImports.cshtml to any view folder, and the view engine applies the directives from both the view folder and from the Views\\_ViewImports.cshtml. We can limit the Tag helper scope to specific view folder by adding a _ViewImports.cshtml inside the view folder. If we want to control it in a Home folder then adding Views/Home/_ViewImports.cshtml will make the view imports available within that folder itself. Default Tag helpersThere are many tag helpers created by Microsoft, which are included by default if you’ve created a dot net core project. Intellisense support for Tag helpersOnce you start writing any HTML element the icon for the HTML tag displays like this. This indicates that the element is targeted by Tag Helpers. Normal HTML elements will just display the “&lt;&gt;” icon. Once you add the asp-for attribute to the HTML element the color of the HTML element will be changed to purple. So, you can distinguish between a normal HTML tag and a tag helper tag. ConclusionWith the HTML helpers in ASP.NET MVC projects, it’s hard for the front-end designer to HTML attributes to the elements in the file. Tag helpers offer the server side code into the HTML elements while keeping the original HTML markup.","link":"/tag-helpers-in-asp-net-core/"},{"title":"Replacing existing entity framework code with Dapper","text":"Developers choose Entity framework ORM (EF) for better productivity when accessing the database. But, when the product is built that went from bare bones to very complex and heavy data access then comes the performance. Sometimes its the Entity framework that kills the performance so the choice when searching for a better ORM than Entity framework is Dapper. In this post, I’ll walk you through how we can replace the existing entity framework code with dapper. (adsbygoogle = window.adsbygoogle || []).push({}); Entity models and accessing data with Entity frameworkHere are our entity model classes for a simple Todo application. Todo model classes12345678910111213141516171819202122public class ToDoItem{ public ToDoItem() { Details = new HashSet&lt;ToDoItemDetails&gt;(); } [Key] public int Id { get; set; } public string ToDoText { get; set; } public bool IsCompleted { get; set; } public int Priority { get; set; } public ICollection&lt;ToDoItemDetails&gt; Details { get; set; }}public class ToDoItemDetails{ [Key] public int Id { get; set; } public int TodoItemId { get; set; } public string Notes { get; set; } public DateTime CreatedDate { get; set; } public ToDoItem TodoItem { get; set; }} And here is our method to retrieve all todo items and its details using entity framework. accessing with EF1234567public IEnumerable GetAll(){ return _context.TodoItem.Include(a =&gt; a.Details).ToList();} The above code looks so minimal and maintainable. Let’s see how the same thing can be done with Dapper. Accessing data with DapperFor the purpose of the article, I’m making use of the entity models that are created for entity framework. In real time, we’d have to use the DTO or a simple view model to return the data from the repository. accessing with Dapper1234567891011121314151617181920212223242526272829303132333435363738394041public IDbConnection Connection{ get { return new SqlConnection(_configuration.GetConnectionString(“MyConnectionString”)); }}public IEnumerable GetAll(){ var todoDictionary = new Dictionary&lt;int, ToDoItem&gt;(); string query = “SELECT * FROM ToDoItems td JOIN TodoItemDetails details ON details.TodoItemId = td.Id”; using (IDbConnection con = Connection) { var result = con.Query&lt;ToDoItem, ToDoItemDetails, ToDoItem&gt;(query, (todoItem, todoItemDetail) =&gt; { ToDoItem todoEntry; if(!todoDictionary.TryGetValue(todoItem.Id, out todoEntry)) { todoEntry = todoItem; todoEntry.Details = new List(); todoDictionary.Add(todoEntry.Id, todoEntry); } todoEntry.Details.Add(todoItemDetail); return todoEntry; }); return result; }} (adsbygoogle = window.adsbygoogle || []).push({}); The above code is a bit complex as we are dealing with multiple tables and we have to fill the details list object in the TodoItem class. As you can see we have more work to do with Dapper. But, there isn’t anything special except that it looks like the ADO.NET style of having the query into a string and supplying arguments to the Query method to get the appropriate result which can be mapped to ToDoItem class. Design considerationsWhen modifying applications like the above one, it’s better to have an interface like repositories and when you implement these repositories you do it separately for entity framework access and separate for Dapper. I recommend implementing a repository interface in a separate class for a specific ORM. We already have EF in the repository implementation. If we want to have a method specific implementation as in our example GetAll() method is replaced with the existing EF code. Instead, it’s better to have a separate class for Dapper implementations. When you want to have the dapper implementation, call the dapper specific method in that class. ConclusionAs you can see we have removed the existing entity framework code with Dapper code for better performance. I have other methods in the repository that make use of entity framework for reading and writing to the database. Writing code in LINQ to SQL is more productive than writing in Dapper. But, when it comes to performance dapper wins over entity framework. (adsbygoogle = window.adsbygoogle || []).push({}); We can have both LINQ to SQL and entity framework code in the same class to access the database. But, this is not a good design consideration as we may be switching to a better performing ORM tomorrow.","link":"/replacing-existing-entity-framework-code-with-dapper/"},{"title":"The strategy design pattern with an example","text":"A strategy design pattern is the most commonly used design pattern in computer programming. In this post, we’ll start with a basic switch case statement and then we’ll modify the code into strategy design pattern. What is a strategy design pattern?A strategy design pattern is one of the behavioral design patterns which will route to a specific algorithm based on the input. Here’s the definition of strategy design pattern from Wikipedia In computer programming, the strategy pattern (also known as the policy pattern) is a behavioral software design pattern) that enables selecting an algorithm at runtime. Instead of implementing a single algorithm directly, code receives run-time instructions as to which in a family of algorithms to use. here’s another from dofactory.com Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it. (adsbygoogle = window.adsbygoogle || []).push({}); When to use?When we have a method that behaves differently based on the different inputs supplied then we can make use of the strategy design pattern. In particular, if we have different business rules for different operations then we can use this strategy design pattern to have different logic for each of the operation (s). So, if you see too many if/else blocks in a method and they vary differently based on different rules or when we have a switch case that is growing with the feature requests then we can apply the strategy design pattern. Strategy design pattern diagram Abstract the method in an interface. (Strategy interface) Create separate classes for each algorithm by implementing the interface. (concrete strategy classes) Have a strategy class that handles calling each of these strategy classes dynamically based on the input arguments. (Context class). Advantages The Open/Closed principle: By implementing the concrete strategies for the strategy interface, we’ll cover this principle. When creating the new strategies we will not worry about changing the existing implementations. Reduced coupling: By using if/else or switch statements our code is tied to the implementation. So, changing is hard. By using this strategy, the only coupling is to the interface of the strategy. So, when changing one strategy you’d only need to change the concrete strategy you wish. Testability: The if/else blocks in methods are not easily testable. The cyclomatic complexity for the if/else blocks will be increased in the future if more code flows into the method. Testing the method would require you to write many tests for a single method and should cover all the control flow branches. With the strategy design pattern, as classes would just have one single method it is easier to test. Use caseFor this article, we’ll assume that if a person walks into the room, he needs to get cool air from any source (Fan, Cooler or A.C.). It is up to the person to turn on what he needs of the day. After turning on any of those available sources we will also output what turned on. (adsbygoogle = window.adsbygoogle || []).push({}); Existing designWhen the user requests for an appropriate cooling strategy we’ll just output which option user has opted for. We can do this with a switch-case statement. 1234567891011121314151617public static void PrintSelectedCoolingSystem(int collingType){ switch (collingType) { case (int)CoolingSystem.Fan: Console.Write(\"Fan is turned on!\"); break; case (int)CoolingSystem.Cooler: Console.Write(\"Cooler is turned on!\"); break; case (int)CoolingSystem.AC: Console.Write(\"A.C. is turned on!\"); break; default: break; }} This is basic with hard-coded text that just prints what turned on based on passed input. Replacing case statements logic with concrete classesLet’s modify the above code by creating different classes for each of these cooling systems. First up, here’s the cooling system interface. 1234public interface ICoolingSystem{ void Print();} And here are the concrete class implementations for ICoolingSystem interface. 1234567891011121314151617181920212223public class Fan : ICoolingSystem{ public void Print() { Console.Write(\"Fan is turned on!\"); }}public class Cooler : ICoolingSystem{ public void Print() { Console.Write(\"Cooler is turned on!\"); }}public class AC : ICoolingSystem{ public void Print() { Console.Write(\"A.C. is turned on!\"); }} With these concrete classes created let’s modify our PrintSelectedCoolingSystem method. 1234567891011121314151617181920public static void PrintSelectedCoolingSystem(int collingType){ ICoolingSystem coolingStrategy = null; switch (collingType) { case (int)CoolingSystem.Fan: coolingStrategy = new Fan(); break; case (int)CoolingSystem.Cooler: coolingStrategy = new Cooler(); break; case (int)CoolingSystem.AC: coolingStrategy = new AC(); break; } coolingStrategy?.Print();} We’ve changed our case statements by having the instances of the cooling strategies. And finally, we’ll call the Print() method of the cooling strategy interface to print out the result for us. With this refactoring done we are already halfway through the strategy pattern. These classes(Fan, Cooler, AC) are our concrete implementations of the Strategy interface. (adsbygoogle = window.adsbygoogle || []).push({}); The Context classThe context class in the strategy pattern is to call a particular algorithm defined by the concrete strategies. Let’s call our context class as CoolingContext. 123456789101112131415161718192021public class CoolingContext{ private ICoolingSystem _coolingSystem; /// &lt;summary&gt; /// Set appropriate cooling strategy /// &lt;/summary&gt; /// &lt;param name=\"coolingSystem\"&gt;&lt;/param&gt; public void SetCoolingStrategy(ICoolingSystem coolingSystem) { _coolingSystem = coolingSystem; } /// &lt;summary&gt; /// Prints the strategy set /// &lt;/summary&gt; public void Print() { _coolingSystem?.Print(); }} And here’s the PrintSelectedCoolingSystem() method again with the strategy pattern. 12345678910111213141516171819public static void PrintSelectedCoolingSystem(int collingType){ CoolingContext collingContext = new CoolingContext(); switch (collingType) { case (int)CoolingSystem.Fan: collingContext.SetCoolingStrategy(new Fan()); break; case (int)CoolingSystem.Cooler: collingContext.SetCoolingStrategy(new Cooler()); break; case (int)CoolingSystem.AC: collingContext.SetCoolingStrategy(new AC()); break; } collingContext.Print();} We must set the strategy first by using the SetCoolingStrategy() method so that the appropriate concrete strategy is set within the context class and we can call the Print() method to print the strategy we chose. That’s it! This is the strategy design pattern. (adsbygoogle = window.adsbygoogle || []).push({}); Strategy design pattern (complete source code):Here’s the complete source code of strategy design pattern. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596namespace StrategyDesignPattern{ //The strategy interface public interface ICoolingSystem { void Print(); } //concrete implementation for Fan public class Fan : ICoolingSystem { public void Print() { Console.Write(\"Fan is turned on!\"); } } //concrete implementation for Cooler public class Cooler : ICoolingSystem { public void Print() { Console.Write(\"Cooler is turned on!\"); } } //concrete implementation for A.C. public class AC : ICoolingSystem { public void Print() { Console.Write(\"A.C. is turned on!\"); } } //Context class public class CoolingContext { private ICoolingSystem _coolingSystem; /// &lt;summary&gt; /// Set appropriate cooling strategy /// &lt;/summary&gt; /// &lt;param name=\"coolingSystem\"&gt;&lt;/param&gt; public void SetCoolingStrategy(ICoolingSystem coolingSystem) { _coolingSystem = coolingSystem; } /// &lt;summary&gt; /// Prints the strategy set /// &lt;/summary&gt; public void Print() { _coolingSystem?.Print(); } } public enum CoolingSystem { Fan = 1, AC, Cooler } //main method static void Main(string[] args) { Console.WriteLine(\"Please select a colling system:\"); int input = int.Parse(Console.ReadKey().KeyChar.ToString()); Console.WriteLine(); PrintSelectedCoolingSystem(input); } public static void PrintSelectedCoolingSystem(int collingType) { CoolingContext collingContext = new CoolingContext(); switch (collingType) { case (int)CoolingSystem.Fan: collingContext.SetCoolingStrategy(new Fan()); break; case (int)CoolingSystem.Cooler: collingContext.SetCoolingStrategy(new Cooler()); break; case (int)CoolingSystem.AC: collingContext.SetCoolingStrategy(new AC()); break; } collingContext.Print(); }} RecapIn this post, we took a switch case statement and refactored into the strategy design pattern. The first step is to have concrete strategy classes and move the case statement logic/implementation into these concrete strategies. Once done, plug the newly created concrete implementations in the existing code and run the app. Make sure everything works fine. We’ll create a strategy interface/abstract class to abstract our method we’ll implement in concrete classes. Context class calls the specific implementations at run-time. This class will have SetStrategy method that will take the Strategy type. From the main method, we’ll set the strategy using context class SetStrategy() method and call the Print() method on the context object, which will then invoke concrete class print method. (adsbygoogle = window.adsbygoogle || []).push({}); References Strategy design pattern on Wikipedia.com Strategy design pattern on DoFactory.com Featured Image Credit Photo by Providence Doucet on Unsplash","link":"/the-strategy-design-pattern-with-an-example/"},{"title":".ToSafeDictionary() extension method in csharp","text":"The .ToDictionary() extension will throw an argument exception if we have duplicate keys added to the dictionary. Ex:123List&lt;int&gt; listOfItems= new List&lt;int&gt;{1,1,2,3,4,4,5};Dictionary&lt;int, string&gt; dict = listOfItems.ToDictionary(a =&gt; a, a =&gt; \"item \" + a);Console.WriteLine(dict.Count); The above code throws the following exception System.ArgumentException: An item with the same key has already been added. In this post, we’ll create an extension method which will ignore duplicate keys from being added to a dictionary. (adsbygoogle = window.adsbygoogle || []).push({}); So, though we add duplicates into the list of items and have it to transform to a dictionary, our extension method should ignore the duplicates and returns a dictionary without duplicates. First, let’s see what is in the original .ToDictionary() extension method. Original ToDictionary extension method source code12345678public static Dictionary&lt;TKey, TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, TKey&gt; keySelector, Func&lt;TSource, TElement&gt; elementSelector, IEqualityComparer&lt;TKey&gt; comparer) { if (source == null) throw Error.ArgumentNull(\"source\"); if (keySelector == null) throw Error.ArgumentNull(\"keySelector\"); if (elementSelector == null) throw Error.ArgumentNull(\"elementSelector\"); Dictionary&lt;TKey, TElement&gt; d = new Dictionary&lt;TKey, TElement&gt;(comparer); foreach (TSource element in source) d.Add(keySelector(element), elementSelector(element)); return d; } .ToDictionary() extension method is just a foreach over the enumerables. Each item in the list will be iterated and added to the dictionary. The accumulated dictionary is returned in the end. (adsbygoogle = window.adsbygoogle || []).push({}); ToSafeDictionary extension methodTo implement .ToSafeDictionary() extension method, We’ll just extend the original .ToDictionary() method to have contains check before adding any item to the dictionary. No magic, just a conditional check to ignore the key. 1234567891011121314151617public static Dictionary&lt;TKey, TElement&gt; ToSafeDictionary&lt;TSource, TKey, TElement&gt;(this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, TKey&gt; keySelector, Func&lt;TSource, TElement&gt; elementSelector, IEqualityComparer&lt;TKey&gt; comparer) { if (source == null) throw new ArgumentException(\"source\"); if (keySelector == null) throw new ArgumentException(\"keySelector\"); if (elementSelector == null) throw new ArgumentException(\"elementSelector\"); Dictionary&lt;TKey, TElement&gt; d = new Dictionary&lt;TKey, TElement&gt;(comparer); foreach (TSource element in source) { if (!d.ContainsKey(keySelector(element))) d.Add(keySelector(element), elementSelector(element)); } return d; } Note that I’ve used the ArgumentException when the values for the parameters is null instead of using the original source code Error.ArgumentNull just to make sure we compile the code in C#. Now if we run the same example code with .ToSafeDictionary on the list of items then we should not get any exceptions. (adsbygoogle = window.adsbygoogle || []).push({}); 12Dictionary&lt;int, string&gt; dict = listOfItems.ToSafeDictionary(a =&gt; a, a =&gt; \"item \" + a, null);Console.WriteLine(dict.Count); References Enumerable source code","link":"/tosafedictionary-extension-method-in-csharp/"},{"title":"Streaming data in ASP.NET Core SignalR","text":"In this post, we’ll see how to stream the data in ASP.NET Core SignalR. With ASP.NET Core 2.1 released, SignalR now supports streaming content. What is a Stream? Streaming or media streaming is a technique for transferring data so that it can be processed as a steady and continuous stream. – webopedia.com When to stream?If the data will load with some latency, and we don’t have to wait for the content to arrive. For this scenario, we can use data streaming. This can also be useful when we don’t want to get all the data at a time as this might be time-consuming. So, we’ll send the data in chunks/fragments from the server to the client. Now, we’ll see how to set up the ASP.NET Core SignalR in Visual Studio. (adsbygoogle = window.adsbygoogle || []).push({}); Creating ASP.NET Core ApplicationLet’s create a new project from File &gt;&gt; New Project in visual studio and give it a name. And now select Web Application from the templates and your framework as ASP.NET Core 2.1 Once you’re done with that you should have your project in the solution folder. We’ll write our Hubs now. Hub setupUnlike normal signalR methods, the stream methods will be different as they have stream the content when the chunks of data are available. Create a C# file in the project with the name as StreamHub or whatever. It is better to add it in a Folder though. Derive that from Hub class and add a namespace in the file as using Microsoft.AspNetCore.SignalR; Now, create a method in the class with the return type as ChannelReader&lt;T&gt; where T is the value returned. The ChannelReader return type on a method makes a streaming hub method. Here is the code for streaming our data. (adsbygoogle = window.adsbygoogle || []).push({}); 1234567891011121314151617181920212223public ChannelReader&lt;int&gt; DelayCounter(int delay) { var channel = Channel.CreateUnbounded&lt;int&gt;(); _ = WriteItems(channel.Writer, 20, delay); return channel.Reader; } private async Task WriteItems(ChannelWriter&lt;int&gt; writer, int count, int delay) { for (var i = 0; i &lt; count; i++) { //For every 5 items streamed, add twice the delay if (i % 5 == 0) delay = delay * 2; await writer.WriteAsync(i); await Task.Delay(delay); } writer.TryComplete(); } DelayCounter is our streaming method, this takes a delay parameter to specify from the client end. WriteItems is a private method, and this returns a Task. The last line in the WriteItems is .TryComplete() on the stream says the streaming done and is closed to the client. Configuring SignalR in the project Head over to the Startup class and locate ConfigureServices method and add the following line at the end (skip this if you can configure yourself). 1services.AddSignalR(); We also need to add a route for the signalR stream. Now, head over to the Configure method in the Startup class and add the following. 1234app.UseSignalR(routes =&gt;{ routes.MapHub&lt;StreamHub&gt;(\"/streamHub\");}); Add SignalR client libraryThis is to add the signalR js on the client side. Launch Package Manager Console (PMC) from the Visual Studio and navigate to the project folder with the following command cd CodeRethinked.SignalRStreaming Run npm init to create a package.json file npm init -y Ignore the warnings. Install the signalR client library with the following command npm install @aspnet/signalr The npm install command downloads the signalR client library to a subfolder under node_modules folder. (adsbygoogle = window.adsbygoogle || []).push({}); Copy the signalR from node_modulesCopy the signalr.js file from the &lt;projectfolder&gt;\\node_modules\\@aspnet\\signalr\\dist\\browser to a folder in wwwroot\\lib\\signalr. or Alternatively, you could also make use of the Microsoft Library Manager (libman.json) to restore it for you. If you don’t understand what libman.json is. Check this article on Libman. So, your Libman for adding downloaded signalR should look like this. 1234567891011{ \"version\": \"1.0\", \"defaultProvider\": \"cdnjs\", \"libraries\": [ { \"provider\": \"filesystem\", \"library\": \"node_modules/@aspnet/signalr/dist/browser/signalr.js\", \"destination\": \"wwwroot/lib/signalr\" } ]} Once you’ve saved libman.json our signalr.js will be available in the SignalR folder in lib. HTML for streamingCopy the following HTML into Index.chtml. For this article, I’m removing the existing HTML in Index.cshtml and adding the following. 12345678910111213141516171819202122232425262728@page@model IndexModel@{ ViewData[\"Title\"] = \"Home page\";}&lt;div class=\"container\"&gt; &lt;div class=\"row\"&gt;&amp;nbsp;&lt;/div&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-6\"&gt;&amp;nbsp;&lt;/div&gt; &lt;div class=\"col-6\"&gt; &lt;input type=\"button\" id=\"streamButton\" value=\"Start Streaming\" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-12\"&gt; &lt;hr /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-6\"&gt;&amp;nbsp;&lt;/div&gt; &lt;div class=\"col-6\"&gt; &lt;ul id=\"messagesList\"&gt;&lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script src=\"~/lib/signalr/signalr.js\"&gt;&lt;/script&gt;&lt;script src=\"~/js/signalrstream.js\"&gt;&lt;/script&gt; Notice we have signalrstream.js at the end. Let’s add the js file to stream the content. JavaScript setupcreate a new signalrstream.js file in wwwroot\\js folder. Add the following code into the js file. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647var __awaiter = (this &amp;&amp; this.__awaiter) || function (thisArg, _arguments, P, generator) { return new (P || (P = Promise))(function (resolve, reject) { function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } } function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } } function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); } step((generator = generator.apply(thisArg, _arguments || [])).next()); });};var connection = new signalR.HubConnectionBuilder() .withUrl(\"/streamHub\") .build();document.getElementById(\"streamButton\").addEventListener(\"click\", (event) =&gt; __awaiter(this, void 0, void 0, function* () { try { connection.stream(\"DelayCounter\", 500) .subscribe({ next: (item) =&gt; { var li = document.createElement(\"li\"); li.textContent = item; document.getElementById(\"messagesList\").appendChild(li); }, complete: () =&gt; { var li = document.createElement(\"li\"); li.textContent = \"Stream completed\"; document.getElementById(\"messagesList\").appendChild(li); }, error: (err) =&gt; { var li = document.createElement(\"li\"); li.textContent = err; document.getElementById(\"messagesList\").appendChild(li); }, }); } catch (e) { console.error(e.toString()); } event.preventDefault();}));(() =&gt; __awaiter(this, void 0, void 0, function* () { try { yield connection.start(); } catch (e) { console.error(e.toString()); }}))(); (adsbygoogle = window.adsbygoogle || []).push({}); As ASP.NET SignalR now uses ES 6 features and not all browsers support ES 6 features. So, in order for it to work in all browser, better to use transpilers such as babel. Unlike traditional signalR, we now have a different syntax for creating a connection. 123var connection = new signalR.HubConnectionBuilder() .withUrl(\"/streamHub\") .build(); And for regular signalR connections, we’ll add listeners with .on method but this is a stream so we have stream method that accepts two arguments. Hub method name: Our hub name is DelayCounter Arguments to the Hub method: In our case argument is a delay between the streams. connection.stream will have subscribe method to subscribe for events. We’ll wire up for next, complete and error events and display messages in the messagesList element. 123456789101112131415161718connection.stream(\"DelayCounter\", 500) .subscribe({ next: (item) =&gt; { var li = document.createElement(\"li\"); li.textContent = item; document.getElementById(\"messagesList\").appendChild(li); }, complete: () =&gt; { var li = document.createElement(\"li\"); li.textContent = \"Stream completed\"; document.getElementById(\"messagesList\").appendChild(li); }, error: (err) =&gt; { var li = document.createElement(\"li\"); li.textContent = err; document.getElementById(\"messagesList\").appendChild(li); },}); The code before/after the stream connection is related to async and starting a connection as soon as we hit the js file. Here is the output of the stream See it in action I’ve changed the StreamHub class to have the count up to 10 in above gif image so it won’t take any longer. Notice the delay from the item 6-10 when streaming this is because we’ve doubled the amount of delay for every 5 items. We can think this of as streaming the data only when available. So, it streams the 6th item when it is available. So, for sending large data to the client, it’s better to opt for streaming instead of sending the data at once. (adsbygoogle = window.adsbygoogle || []).push({}); Source code downloadsource code on github. I’ve removed the npm_modules from the solution to make it lightweight so install the npm modules with the following command and start the solution. npm install TakeawayStreaming the content is not new, but it is in signalR now and a great feature. Streaming will keep user experience cool and also our server won’t have those high bars (peak timings). Most of the developers know the limitations of SignalR not being able to transmit a huge amount of data. With ASP.NET Core SignalR, streaming the data from the server to client overcomes the problem of transferring all the content at once. I’d recommend going for streaming content when you think your data is large or if you want some user experience without blocking the client by showing endless spinners.","link":"/streaming-data-in-asp-net-core-signalr/"},{"title":"Shortest word in a string with LINQ","text":"In this post, we’ll try to find the shortest word in a string using LINQ. ProblemGiven a string of words, return the length of the shortest word in the string. Forget the edge cases of handling (empty or null). Ex: “The shortest string” =&gt; should output 3 for “The” Initial thoughtsSo there will be a string which contains words. First, we’ll split that string with empty space so that we’ll get all the words in a string. Now, we can sort the list of strings by length so that our shortest word will be in the first place and then we can perform a FirstOrDefault on it. (adsbygoogle = window.adsbygoogle || []).push({}); 1234public int ShortestWord(string s){​ return s.Split(' ').OrderBy(x =&gt; x.Length).FirstOrDefault().Length;} or we can do an orderby and then do a select the length and return the first item.1return s.Split(' ').OrderBy(i =&gt; i.Length).Select(i=&gt;i.Length).First(); There can be many solutions like this. Okay, we’ll see what’s the best or the clever solution Best SolutionWe have the .Min extension method in LINQ. That should be sufficient to return the minimum length of the word. 1234public int ShortestWord(string s){​ return s.Split(' ').Min(x =&gt; x.Length);} (adsbygoogle = window.adsbygoogle || []).push({}); That’s it! That will return the minimum length of a word in a string.","link":"/shortest-word-in-a-string-with-linq/"},{"title":"Unable to find debuggable browser tab in Blazor","text":"Debugging blazor applications is a little different from what we’ve been doing for years for debugging the JS files. Microsoft team announced official preview of Blazor framework recently. I wanted to try the new Blazor framework so I’ve installed VS 2019 preview. I ran the blazor application by following the setup instructions mentioned on Microsoft docs. After running the application, I just opened the developer tools in chrome to debug the Counter function that came up with default blazor template. Unfortunately, I couldn’t see any of the counter files. And I saw the following console message Debugging hotkey: Shift+Alt+D (when application has focus) I press that hot key and I have the new tab opened in chrome with the following error message. Although, there is a resolution mentioned in the above screenshot it will not work. (adsbygoogle = window.adsbygoogle || []).push({}); Solution close all the instances of chrome browser. Once you close your browser window, make sure you also end the tasks of chrome.exe process from Task Manager. The following are the google chrome processes which are still alive though you close google chrome. Once you close all the instances of chrome, run the app again and press Shift + Alt + D with the focus on application. And here is the debugging window. That’s it for debugging. Where’s the Counter.razor file?It’s in yourapp.dll folder in the sources &gt;&gt; Page folder. Pic Credits Featured Photo by Sebastian Herrmann on Unsplash","link":"/unable-to-find-debuggable-browser-tab-in-blazor/"},{"title":"visualizing stack and heap with SharpLab","text":"When I wanted to look at the IL of the C# code I wrote I used to create a new console application in visual studio and write the code and build it and view the DLL with ILSpy or dotPeek. These days I’m using LINQPad to view the IL quickly. Here is the alternative to that hectic setup, Sharplab. SharpLab is developed by Andrey Shchekin. SharpLab is a similar tool you can use to Run, De-compile (C#, IL, JIT Asm) and visualizing syntax trees. You can also switch the C# language to whatever you want in SharpLab. And the good thing about SharpLab is that you don’t need any tools except a web browser. (adsbygoogle = window.adsbygoogle || []).push({}); Visualizing stack/heap and boxingApart from viewing IL or viewing de-compiled C# code. SharpLab recently added a new feature to visualize .NET stack/heap and boxing. Once done with writing or creating an object, you could just use Inspect.MemoryGraph(obj) statement to see if it is on stack/heap. You can also see the boxing happened on the objects. This is how it looks like. Viewing structure of object in Memory (heap)If you want to view the structure of an object in the memory, you can use Inspect.Heap(object) statement. Let’s inspect a string value in the memory and here it is. Viewing structure of stack valueYou can view structure of any stack value with Inspect.Stack(value) statement. Lets view a value structure on stack (adsbygoogle = window.adsbygoogle || []).push({}); value.Inspect()This is an alternative to write Console.WriteLine to view a value in the output window in SharpLab. Try it out.","link":"/visualizing-stack-and-heap-with-sharplab-io/"},{"title":"Unit tests for private methods?","text":"This post as you read from the title is about unit testing for private methods. Do we really need to test the private methods in the unit tests? Unit testing private methodsPrivate methods are used to have the abstraction in classes and some times created for code resuability purposes. If you are writing MS Tests for unit testing, then Microsoft provides a Private Object class through which you can test the private methods. But, I don’t think this is a good idea. If you want to test the private methods and achieve code coverage for the lines of code in the private methods the only way I see is to write more tests for the public API which utilizes the private method. But, the output of the public API method can be different from the output of the private methods, in that case, we will have to assert only the value returned from the public API method. Too much logic in the private methodsWhat if we had too much logic in the private method? Well, you could write many tests for your public API. This is not a bad idea. But, don’t you see a hidden class in the private method (refactor the private method logic to have a separate class). Extract that private method logic to a class and test the class instead of writing too many tests for the public API method. (adsbygoogle = window.adsbygoogle || []).push({}); The code base is too old and NO TESTS yetOkay, this might be a special case. Think that the code base is old and is not having any unit tests until now. But the management now wants to have unit tests for the bug fix. The code is also not clean. The methods have too many lines of code and have some business logic to modify the fields and save it to the database. As you figured out the fix and it is in the middle of that very long method. Also, we need to write unit tests for the fix, so we create a new private method for our fix and that should be tested or you could include your code code to make it even harder to read. If we begin writing tests for the method, it would certainly take a very long time to write tests and pass them. We can deal with the above problem in two ways Stub the portions of the code into a public method so that you can mock them in your tests and you can validate your fix alone in the unit tests. Writing tests for the entire method. The first approach is damn easy! All you have to do is create some methods and make them public. But isn’t this bad way of doing things? You are exposing the inner workings of your algorithm/program through an interface just for the purpose of writing unit tests. Now, for the second approach of writing tests for the complete method, it involves you to understand the method and then write tests or mock the objects accordingly. Instead of writing tests for the existing method, I think it is better to have a separate class (if you see the class hidden in a method) because you know the functionality/business logic of the code. So, if you can write everything in a separate method then you can just write tests for your class instead of testing the public API. ConclusionWriting unit tests is a good thing but if we have a private method I think making it public is a bad idea as it breaks the abstraction that we wanted in our code. Private methods are not that bad, it signals that you are missing an abstraction. Don’t aim to unit test the private methods just test the public API. If you think there’s more logic in the private methods that need to be tested, write it in a separate class file. (adsbygoogle = window.adsbygoogle || []).push({});","link":"/unit-tests-for-private-methods/"},{"title":"Exploring web api in asp.net core","text":"With the asp.net core modularity, the configuration and setup work for the asp.net core projects is more when compared to building apps with the .net framework. In this post, we’ll explore how to build a web API and also look at the configuration options that we need to build a web API in asp.net core. I have installed ASP.NET CORE 2.2 for this project. Make sure you install the .NET Core 2.2 SDK if you are running the sample project. (adsbygoogle = window.adsbygoogle || []).push({}); File &gt;&gt; New ProjectOpen Visual Studio and from the menu select File &gt;&gt; New &gt;&gt; Project. This should open a New Project wizard. Select .Net Core from the left menu and select ASP.NET Core Web Application. That should bring another wizard with a good number of project templates. Choose API from that. Once done with that you should see a brand new project. Exploring the files createdSolution explorer should look like this. The solution doesn’t have much of the boilerplate that you’d normally expect with the normal .net framework API with the default project. Looking at the ValuesControllerValuesController is the file created by the API project template. Unlike the normal .net framework API controllers which will be derived from ApiController class, the ValuesController in ASP.NET Core 2.2 is derived from ControllerBase class. (adsbygoogle = window.adsbygoogle || []).push({}); 1public class ValuesController : ControllerBase The ControllerBase abstract class has the same things what the old ApiController class in the .net framework has. So, things like the ModelState, HttpContext, Url information and several methods which returns HttpResponses from the API’s. The ApiController annotationApart from deriving the API from the ControllerBase class, we have our values controller API decorated with [ApiController]. The ApiController annotation is not mandatory on the controllers. Your API still works if you don’t decorate with ApiController annotation. However, having the ApiController annotation has its advantages. They derive this attribute from the ASP.NET MVC ControllerAttribute so using this on a class will make it available for the controller discovery process. Besides having implemented ControllerAttribute class, it also implements IApiBehaviorMetadata, which will provide some API-centric features. ApiController annotation, when coupled with ControllerBase, will provide REST specific behavior for the controllers. Automatic model state validationModel state validations will automatically trigger an HTTP 400 response. So, writing the model state condition in every controller action isn’t necessary. 1234if (!ModelState.IsValid){ return BadRequest(ModelState);} We can customize the error message of the above 400 response by using InvalidModelStateResponseFactory (adsbygoogle = window.adsbygoogle || []).push({}); ConclusionIf you are new to ASP.NET core consider reading the documentation from MSDN so you can get a good grip on the setup and configuration things in the startup.cs file. Overall, the API seems to be the same old ASP.NET MVC Web API except for those configuration things in the Program.cs and Startup.cs files. References ASP.NET Core 2.2 Web API documentation.","link":"/writing-web-api-s-in-asp-net-core/"},{"title":"why func delegate is not translated to sql","text":"This post is a sequence for the previous article which shows why the Func delegate is not translated into the SQL statements. Let’s investigate why our func delegate is not translated as we have expected in the previous article. Writing the queries to the consoleWe can see the query that will be translated for the queryables by writing out the IQueryable to the console. Here it is 12345678910111213141516171819202122Expression&lt;Func&lt;Customer, bool&gt;&gt; exprPred = p =&gt; p.FirstName == \"Design Engineer\";var names = context.Customers.Where(exprPred);Console.Write(\"Query : \" + names);/*Query : SELECT [Extent1].[CustomerID] AS [CustomerID], [Extent1].[NameStyle] AS [NameStyle], [Extent1].[Title] AS [Title], [Extent1].[FirstName] AS [FirstName], [Extent1].[MiddleName] AS [MiddleName], [Extent1].[LastName] AS [LastName], [Extent1].[Suffix] AS [Suffix], [Extent1].[CompanyName] AS [CompanyName], [Extent1].[SalesPerson] AS [SalesPerson], [Extent1].[EmailAddress] AS [EmailAddress], [Extent1].[Phone] AS [Phone], [Extent1].[PasswordHash] AS [PasswordHash], [Extent1].[PasswordSalt] AS [PasswordSalt], [Extent1].[rowguid] AS [rowguid], [Extent1].[ModifiedDate] AS [ModifiedDate] FROM [SalesLT].[Customer] AS [Extent1] WHERE N'Design Engineer' = [Extent1].[FirstName] */ We got the SQL query for the IQueryable here and it is what it was expected. Now, let’s try the same thing for our Func delegate and see what it will output when we write it to console. (adsbygoogle = window.adsbygoogle || []).push({}); 1234Func&lt;Customer, bool&gt; funcPred = p =&gt; p.FirstName == \"Design Engineer\";var names = context.Customers.Where(funcPred);Console.Write(\"Query : \" + names);//Query : System.Linq.Enumerable+WhereEnumerableIterator`1[QueryProviderImpl.Customer] The output is different here. This is making a call to WhereEnumerableIterator in Enumerable class. Where() method in Enumerable classLet’s look at the .Where() method source code and WhereEnumerableIterator class from the Microsoft source. Enumerable.cs12345678910111213public static partial class Enumerable{ public static IEnumerable&lt;TSource&gt; Where&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, bool&gt; predicate) { if (source == null) throw Error.ArgumentNull(\"source\"); if (predicate == null) throw Error.ArgumentNull(\"predicate\"); if (source is Iterator&lt;TSource&gt;) return ((Iterator&lt;TSource&gt;)source).Where(predicate); if (source is TSource[]) return new WhereArrayIterator&lt;TSource&gt;((TSource[])source, predicate); if (source is List&lt;TSource&gt;) return new WhereListIterator&lt;TSource&gt;((List&lt;TSource&gt;)source, predicate); return new WhereEnumerableIterator&lt;TSource&gt;(source, predicate); } //... some other methods go here} As said in the previous post, there are overloads for .Where method. One for the Expression and the other for the Func. Now the above one called as we are passing a Func to the second parameter. The .Where() Extension method on the Enumerable class is returning an instance of WhereEnumerableIterator class. WhereEnumerableIterator classHere is the implementation of WhereEnumerableIterator class. WhereEnumerableIterator.cs12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849class WhereEnumerableIterator&lt;TSource&gt; : Iterator&lt;TSource&gt;{ IEnumerable&lt;TSource&gt; source; Func&lt;TSource, bool&gt; predicate; IEnumerator&lt;TSource&gt; enumerator; public WhereEnumerableIterator(IEnumerable&lt;TSource&gt; source, Func&lt;TSource, bool&gt; predicate) { this.source = source; this.predicate = predicate; } public override Iterator&lt;TSource&gt; Clone() { return new WhereEnumerableIterator&lt;TSource&gt;(source, predicate); } public override void Dispose() { if (enumerator is IDisposable) ((IDisposable)enumerator).Dispose(); enumerator = null; base.Dispose(); } public override bool MoveNext() { switch (state) { case 1: enumerator = source.GetEnumerator(); state = 2; goto case 2; case 2: while (enumerator.MoveNext()) { TSource item = enumerator.Current; if (predicate(item)) { current = item; return true; } } Dispose(); break; } return false; } public override IEnumerable&lt;TResult&gt; Select&lt;TResult&gt;(Func&lt;TSource, TResult&gt; selector) { return new WhereSelectEnumerableIterator&lt;TSource, TResult&gt;(source, predicate, selector); } public override IEnumerable&lt;TSource&gt; Where(Func&lt;TSource, bool&gt; predicate) { return new WhereEnumerableIterator&lt;TSource&gt;(source, CombinePredicates(this.predicate, predicate)); }} The WhereEnumerableIterator class will implement the Iterator class. The Iterator is an abstract class which implements IEnumerable and IEnumerator interfaces except the MoveNext() method. So, our WhereEnumerableIterator class will implement the iterator pattern and has the MoveNext() method implemented. (adsbygoogle = window.adsbygoogle || []).push({}); What happened to our func and its executionLet’s come back to our query on the Customers entity 12Func&lt;Customer, bool&gt; funcPred = p =&gt; p.FirstName == \"Design Engineer\";var names = context.Customers.Where(funcPredicate); Let me pull the MoveNext() method of WhereEnumerableIterator class so that it will be clear. 12345678910111213141516171819public override bool MoveNext() { switch (state) { case 1: enumerator = source.GetEnumerator(); state = 2; goto case 2; case 2: while (enumerator.MoveNext()) { TSource item = enumerator.Current; if (predicate(item)) { current = item; return true; } } Dispose(); break; } return false;} As we iterate the items in the names in a foreach or when .ToList() is called on the names, every item from the customer table is pulled from the database with the enumerator.Current and compared against the predicate(the func delegate in our case) that we pass in. The difference?The difference in query execution is fairly large because expression trees and func delegates on the entities take a different approach in execution. If we pass an expression tree to .Where() method then the execution will be different as the query is translated into an appropriate query based on the query provider (SQL statements for SQL Provider). If we pass a func delegate to .Where() method then the appropriate records from the database are pulled and compared against the predicate and will return the result. (adsbygoogle = window.adsbygoogle || []).push({}); Entity Framework implements a provider model for different databases such as SQL, Oracle, MySQL, PostgreSQL etc. These query providers will have to translate the IQueryables into SQL as the query for a database will be different for different databases. The translation for the expression trees will be interesting as it involves providers, translations, expression visitors etc. As this is not a topic for this article I’m not pulling those topics. If you are interested in finding how the expression tree translation works look at the references section. References http://putridparrot.com/blog/creating-a-custom-linq-provider/ https://weblogs.asp.net/dixin/understanding-linq-to-sql-10-implementing-linq-to-sql-provider https://referencesource.microsoft.com/#System.Data.Linq/SqlClient/SqlProvider.cs https://blogs.msdn.microsoft.com/mattwar/2007/07/30/linq-building-an-iqueryable-provider-part-i/ https://blogs.msdn.microsoft.com/mattwar/2007/07/31/linq-building-an-iqueryable-provider-part-ii/","link":"/why-func-delegate-is-not-translated-to-sql/"},{"title":"Getting started with Vue CLI","text":"If you are already familiar with Vue CLI, you can just skip reading this post. Vue JS is an open-source JavaScript framework for building user interfaces and SPA’s (single-page applications). If you want to build a project in Vue, I’d recommend Vue CLI templates for those who are new to Vue. Vue-cli offers zero-config rapid prototyping with cli-service, scaffolding, run time dependency and a GUI to create and manage apps. The Vue CLI component system includes 3 things. CLI CLI Service and CLI plugins. Installing Vue CLILet’s install the Vue-CLI and create a new project with the CLI commands. 123npm install -g @vue/cli # OR yarn global add @vue/cli Creating a project with Vue CLIAfter installing the Vue CLI successfully, we can create a new project using the following command in a new directory 1vue create &lt;foldername&gt; Or if you are interested in creating the project in an already created folder you can also do that with vue create . command. After running the above command in a command prompt, cli will be asking us to choose the default preset or we can manually configure our project with the tooling we are interested in. After selecting a preset either manually or selecting the default, you’ll be asked to select a linter config for the project. We have 4 different options here. ESLint with error prevention only: minimal errors ESLint + Airbnb config: ESLint with Airbnb standards ESLint + Standard config: Standard config ESLint + Prettier: Prettier is a code formatter with rules. I chose ESLint + Standard config. Once done, the rest of the options you can configure based on your need like lint on save, saving your current config to a preset, etc. Once done with this you should have your project folder with Vue CLI generated folder structure. If you are not a command-line person, then you can do it in the Vue UI. All you’ve to do is run the Vue UI from the command line and it launches an app in the browser so you can cherry-pick what configuration you want in the browser. Exploring the Vue CLI projectHere’s the folder structure. Let’s see what we have in the package.json file.12345678910111213141516171819202122232425{ \"name\": \"jumpstart\", \"version\": \"0.1.0\", \"private\": true, \"scripts\": { \"serve\": \"vue-cli-service serve\", \"build\": \"vue-cli-service build\", \"lint\": \"vue-cli-service lint\" }, \"dependencies\": { \"core-js\": \"^2.6.5\", \"vue\": \"^2.6.10\" }, \"devDependencies\": { \"@vue/cli-plugin-babel\": \"^3.11.0\", \"@vue/cli-plugin-eslint\": \"^3.11.0\", \"@vue/cli-service\": \"^3.11.0\", \"@vue/eslint-config-standard\": \"^4.0.0\", \"babel-eslint\": \"^10.0.1\", \"eslint\": \"^5.16.0\", \"eslint-plugin-vue\": \"^5.0.0\", \"vue-template-compiler\": \"^2.6.10\" }} Notice the script section here. We can perform 3 different commands and the vue-cli-service will act accordingly. We can run the project in development mode using the following command. 123npm run serve # OR yarn serve So, if we run the npm run serve command then the vue-cli-service will start the development server for us with Hot Module Reload(HMR) ability.HMR is the ability to re-compile the code and re-run the dev server when any code changes. The npm run build compiles and minifies for the production environment. Apart from the command line, you can also build/serve the app from the UI as well with vue ui. Vue UI provides some stats for our app like speed stats, size of our components, assets, etc. Vue folder structuresrc is a folder that contains all our source code. Inside src folder we will have components and assets folders. You can delete these folders and organize your folders. I think it is good to have these folders and if you have feature specific components, then you can create some folders under components folder.Rest of the files in the project folder are configuration files. Vue app entry pointmain.js is the entry point for our app. We define the entry point in vue.config.js file. With the new CLI service, the vue.config.js is optional. So, we cannot see any config.js files in our project but you can have one. In the main.js, we have the Vue instance for the App component. This will run the App component and App component renders the content it holds. 123new Vue({ render: h =&gt; h(App) }).$mount(‘#app’) App componentThe App component is the plugging point for what we need on the home/landing page of our app. You can think of this as a layout for the entire app. So, if you wish to have a layout like this 123456789101112&lt;AppHeader&gt; &lt;/AppHeader&gt; &lt;BodyContent&gt; &lt;LeftPanel&gt; &lt;!--Holds links to the right panel --&gt; &lt;/LeftPanel&gt; &lt;RightPanel&gt; &lt;!-- Displays content --&gt; &lt;/RightPanel&gt; &lt;/BodyContent&gt; &lt;AppFooter&gt; &lt;/AppFooter&gt; Then you need to register the above components(AppHeader, BodyContent, LeftPanel, RightPanel, AppFooter) in the App.Vue file. If the RightPanel includes a carousel component, then you need not register it here it has to be registered in the RightPanel to render it. There is no need to register every component you created into the App component. (adsbygoogle = window.adsbygoogle || []).push({});","link":"/getting-started-with-vue-cli/"},{"title":"Understanding computed properties in VueJS","text":"In this post we’ll see what are computed properties, how to write a computed property and let’s understand how a computed property is designed behind the scenes. Don’t forget to visit the links in the references section. What are the computed properties?Computed properties are like normal methods in Vue, but with the caching ability on the reactive dependencies. (adsbygoogle = window.adsbygoogle || []).push({}); An example of computed propertyWe have a grocery list of items and we’d like to display the total price of the items. So, when changing the price of an item, the total gets updated too. Here’s the grocery list component.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;template&gt; &lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Price&lt;/th&gt; &lt;th&gt;Quantity&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt;&lt;/tr&gt; &lt;tr&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr v-for=’item in groceries’ v-bind:key=’item.id’&gt; &lt;td&gt;{{item.itemName}}&lt;/td&gt; &lt;td&gt;&lt;input type=’number’ v-model=’item.price’ min=’0’ /&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=\"number\" v-model=’item.quantity’ min=’1’/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; Total Price: &lt;/td&gt; &lt;td&gt;&lt;b&gt;${{ groceriesCount }}&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default { name: ‘GroceriesList’, data () { return { groceries: [ { itemName: ‘Rice’, price: 20, quantity: 1 }, { itemName: ‘Flour’, price: 80, quantity: 1 }, { itemName: ‘Oats’, price: 40, quantity: 1 } ] } }, computed: { groceriesCount: function () { return this.groceries.reduce( (acc, val) =&gt; acc + parseInt(val.price), 0 ) } }}&lt;/script&gt; (adsbygoogle = window.adsbygoogle || []).push({}); For our convenience, I’ve textboxes for displaying price of the items so we can directly edit and see the computed property in action. Notice the grocieriesCount computed property, we haven’t included the quantity of the items yet. But, now try to change the quantity of the items and observe the total price. The total price will only change when changing the price of any item. So, the price is a “reactive dependency” for the computed property. (adsbygoogle = window.adsbygoogle || []).push({}); Test for computed property cachingIn the above example, we’ve just used the total price of the groceries only once. Let’s use the computed property in a h2 tag and try to change the price of any item. 1&lt;h2&gt;Total price: ${{groceriesCount}}&lt;/h2&gt; After adding the above h2 tag in the template section, run the app. Open developer tools and place a breakpoint in our computed property (groceriesCount). Now, try to change the price of any grocery item and your breakpoint should hit only once. Though, we have used the computed property (groceriesCount) twice in the template our breakpoint got hit only once. This is the caching ability of the computed properties. Computed settersBy default computed properties are getters but we can have setters. 123456789101112computed: { fullName: { get: function() { return this.firstName + this.lastName; }, set: function(value) { let names = value.split(‘ ‘); this.firstName = names[0]; this.lastName = names[names.length - 1]; } }} If we set the fullName in a method, the firstName and lastName props will correctly. (adsbygoogle = window.adsbygoogle || []).push({}); How do computed properties work under the hood?Vue has a dependency tracking system, which tracks the reactive dependencies. The data in a component converts into getters and setters. So, it is not specific to the computed properties. Vue creates the getters and setters for every property in the data() function. Here’s how reactivity works: When accessing a value via getter, it will add to the dependencies and when changing a value via a setter, the setter will notify who depends on the property and re-renders the DOM. Here’s the sample code to understand how the reactivity works for a property. 1234567891011121314151617181920212223242526function defineReactive (obj, key, val) { const dep = new Dep(); Object.defineProperty (obj, key, { get: function () { // check if it’s not already a dependancy if (dep.target) buildDependants(val); // This will push the dependencies to some array to use it later return val; }, set: function (newVal) { const value = currentValue; //current value of prop // some basic validations to perform validations(); // set the newVal value = newVal; // notify the depedencies // This will notify all depending props dep.notify(); } })} The Dep() function is a dependancy tracker in Vue. As you can see, we capture the dependencies in the get function and we’ll notify all the depending properties when changing the value in set function via dep.notify(). Here’s the source code that converts properties to getters and setters. (adsbygoogle = window.adsbygoogle || []).push({}); References Vue JS reactive properties code on GitHub Vue JS internals on alongsteel.com why the property isn’t reactive on Stackoverflow","link":"/understanding-computed-properties-in-vuejs/"}],"tags":[{"name":"linq","slug":"linq","link":"/tags/linq/"},{"name":"expression trees","slug":"expression-trees","link":"/tags/expression-trees/"},{"name":"func","slug":"func","link":"/tags/func/"},{"name":"csharp","slug":"csharp","link":"/tags/csharp/"},{"name":"switch case","slug":"switch-case","link":"/tags/switch-case/"},{"name":"Internals, SleepInternal","slug":"internals-sleepinternal","link":"/tags/internals-sleepinternal/"},{"name":"vue","slug":"vue","link":"/tags/vue/"},{"name":"computed properties","slug":"computed-properties","link":"/tags/computed-properties/"},{"name":"in depth","slug":"in-depth","link":"/tags/in-depth/"},{"name":"asp-net-core","slug":"asp-net-core","link":"/tags/asp-net-core/"},{"name":"benefits","slug":"benefits","link":"/tags/benefits/"},{"name":"async-await","slug":"async-await","link":"/tags/async-await/"},{"name":"awaitables","slug":"awaitables","link":"/tags/awaitables/"},{"name":"task","slug":"task","link":"/tags/task/"},{"name":"taghelpers","slug":"taghelpers","link":"/tags/taghelpers/"},{"name":"custom","slug":"custom","link":"/tags/custom/"},{"name":"one-way data binding","slug":"one-way-data-binding","link":"/tags/one-way-data-binding/"},{"name":"two-way data binding","slug":"two-way-data-binding","link":"/tags/two-way-data-binding/"},{"name":"component parameters","slug":"component-parameters","link":"/tags/component-parameters/"},{"name":"data binding","slug":"data-binding","link":"/tags/data-binding/"},{"name":"blazor","slug":"blazor","link":"/tags/blazor/"},{"name":"action","slug":"action","link":"/tags/action/"},{"name":"refactoring","slug":"refactoring","link":"/tags/refactoring/"},{"name":"callback functions","slug":"callback-functions","link":"/tags/callback-functions/"},{"name":"AutoDetectChangesEnabled","slug":"autodetectchangesenabled","link":"/tags/autodetectchangesenabled/"},{"name":"customizing 400 error response","slug":"customizing-400-error-response","link":"/tags/customizing-400-error-response/"},{"name":"model state validation","slug":"model-state-validation","link":"/tags/model-state-validation/"},{"name":"compiler","slug":"compiler","link":"/tags/compiler/"},{"name":"IL","slug":"il","link":"/tags/il/"},{"name":"event bubbling","slug":"event-bubbling","link":"/tags/event-bubbling/"},{"name":"event delegation","slug":"event-delegation","link":"/tags/event-delegation/"},{"name":"performance","slug":"performance","link":"/tags/performance/"},{"name":"row_number","slug":"row-number","link":"/tags/row-number/"},{"name":"filter","slug":"filter","link":"/tags/filter/"},{"name":"list","slug":"list","link":"/tags/list/"},{"name":"oftype","slug":"oftype","link":"/tags/oftype/"},{"name":"LibMan","slug":"libman","link":"/tags/libman/"},{"name":"libman.json","slug":"libman-json","link":"/tags/libman-json/"},{"name":"Visual Studio","slug":"visual-studio","link":"/tags/visual-studio/"},{"name":"Microsoft","slug":"microsoft","link":"/tags/microsoft/"},{"name":"preventDefault","slug":"preventdefault","link":"/tags/preventdefault/"},{"name":"stopPropagation","slug":"stoppropagation","link":"/tags/stoppropagation/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"entity framework","slug":"entity-framework","link":"/tags/entity-framework/"},{"name":"dapper","slug":"dapper","link":"/tags/dapper/"},{"name":"strategy design pattern","slug":"strategy-design-pattern","link":"/tags/strategy-design-pattern/"},{"name":"extension method","slug":"extension-method","link":"/tags/extension-method/"},{"name":"dictionary","slug":"dictionary","link":"/tags/dictionary/"},{"name":"signalr","slug":"signalr","link":"/tags/signalr/"},{"name":"streaming","slug":"streaming","link":"/tags/streaming/"},{"name":"debugging","slug":"debugging","link":"/tags/debugging/"},{"name":"tools","slug":"tools","link":"/tags/tools/"},{"name":"sharplab","slug":"sharplab","link":"/tags/sharplab/"},{"name":"stack","slug":"stack","link":"/tags/stack/"},{"name":"heap","slug":"heap","link":"/tags/heap/"},{"name":"boxing","slug":"boxing","link":"/tags/boxing/"},{"name":"unit testing","slug":"unit-testing","link":"/tags/unit-testing/"},{"name":"private methods","slug":"private-methods","link":"/tags/private-methods/"},{"name":"web api","slug":"web-api","link":"/tags/web-api/"},{"name":"vue-cli-service","slug":"vue-cli-service","link":"/tags/vue-cli-service/"},{"name":"vue-ui","slug":"vue-ui","link":"/tags/vue-ui/"},{"name":"getting-started","slug":"getting-started","link":"/tags/getting-started/"}],"categories":[{"name":"csharp","slug":"csharp","link":"/categories/csharp/"},{"name":"VueJS","slug":"vuejs","link":"/categories/vuejs/"},{"name":"ASP.NET Core","slug":"asp-net-core","link":"/categories/asp-net-core/"},{"name":"expression trees","slug":"csharp/expression-trees","link":"/categories/csharp/expression-trees/"},{"name":"blazor","slug":"blazor","link":"/categories/blazor/"},{"name":"delegates","slug":"csharp/delegates","link":"/categories/csharp/delegates/"},{"name":"refactoring","slug":"csharp/refactoring","link":"/categories/csharp/refactoring/"},{"name":"javascript","slug":"javascript","link":"/categories/javascript/"},{"name":"linq","slug":"csharp/expression-trees/linq","link":"/categories/csharp/expression-trees/linq/"},{"name":"performance","slug":"csharp/performance","link":"/categories/csharp/performance/"},{"name":"linq","slug":"csharp/linq","link":"/categories/csharp/linq/"},{"name":".NET Core","slug":"blazor/net-core","link":"/categories/blazor/net-core/"},{"name":"Visual Studio","slug":"visual-studio","link":"/categories/visual-studio/"},{"name":"Entity Framework","slug":"entity-framework","link":"/categories/entity-framework/"},{"name":"design patterns","slug":"csharp/design-patterns","link":"/categories/csharp/design-patterns/"},{"name":"jQuery","slug":"javascript/jquery","link":"/categories/javascript/jquery/"},{"name":"Blazor","slug":"blazor","link":"/categories/blazor/"},{"name":"ASP.NET Core","slug":"blazor/asp-net-core","link":"/categories/blazor/asp-net-core/"},{"name":"tools","slug":"tools","link":"/categories/tools/"},{"name":"unit testing","slug":"unit-testing","link":"/categories/unit-testing/"},{"name":"asp-net-core","slug":"asp-net-core","link":"/categories/asp-net-core/"},{"name":"vue","slug":"vue","link":"/categories/vue/"},{"name":"Vue","slug":"vue","link":"/categories/vue/"},{"name":"vuejs","slug":"vuejs","link":"/categories/vuejs/"}]}